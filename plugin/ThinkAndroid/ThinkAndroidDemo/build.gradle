apply plugin: 'com.android.application'

dependencies {
    compile fileTree(include: '*.jar', dir: 'libs')
    //    compile 'com.android.support:support-v4:23.4.0'
    //    compile group: 'com.alibaba', name: 'fastjson', version: '1.1.15'
    //    compile group: 'com.google.code.gson', name: 'gson', version: '2.2.2'
    compile 'com.android.support:appcompat-v7:23.4.0'
    //    compile 'com.flyco.roundview:FlycoRoundView_Lib:1.1.4@aar'
    //    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    //    compile 'com.umeng.analytics:analytics:latest.integration'
    //    compile 'org.xutils:xutils:3.5.0'
    //    compile 'com.squareup.okio:okio:1.13.0'
    //    compile 'com.squareup.okhttp3:okhttp:3.8.1'
    //    compile 'cn.aigestudio.datepicker:DatePicker:2.2.0'
    //    testCompile 'junit:junit:4.12'
    compile project(':Test:ThinkAndroid:ThinkAndroid')
}

def getTime() {
    return new Date().format("yyyyMMdd", TimeZone.getDefault());
}

android {
    useLibrary 'org.apache.http.legacy'
    compileSdkVersion 25
    buildToolsVersion "25.0.2"
    defaultConfig {
        applicationId "com.cat.activity"
        minSdkVersion 16
        targetSdkVersion 16
        versionCode 195
        versionName "1.9.5"
    }
    applicationVariants.all {
        variant ->
            variant.outputs.each {
                output ->
                    output.outputFile = new File(output.outputFile.parent, defaultConfig.applicationId + "-" + buildType.name + "-v" +
                            defaultConfig.versionName + "-" + defaultConfig.versionCode + "-" + getTime() + ".apk");
            }
    }

    signingConfigs {
        release {
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storeFile file(getRootDir().getAbsolutePath() + '/keystore/lipengdevkey.jks')
            storePassword 'android'
        }
        debug {
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storeFile file(getRootDir().getAbsolutePath() + '/keystore/lipengdevkey.jks')
            storePassword 'android'
        }
    }
    buildTypes {
        release {

//            minifyEnabled true
//            shrinkResources true
//            proguardFiles getDefaultProguardFile('proguard-project.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            //开启代码混淆功能
//            minifyEnabled true
//            proguardFile file((getProjectDir().getAbsolutePath()+'/proguard-rules.pro'))
            debuggable true
            signingConfig signingConfigs.debug
        }
    }
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
        }

        instrumentTest.setRoot('tests')
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    task printVariantNames1() {

        println("fhl=====" + getProjectDir().getAbsolutePath())
        println("fhl=====" + getRootDir().getAbsolutePath())
    }


}




