// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "IMClient2ServFile.pb.h"
// @@protoc_insertion_point(imports)

@implementation Imclient2ServFileRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [Imclient2ServFileRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [ImbaseDefineRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface C2FHeartBeatReq ()
@property SInt32 cmdId;
@end

@implementation C2FHeartBeatReq

- (BOOL) hasCmdId {
  return !!hasCmdId_;
}
- (void) setHasCmdId:(BOOL) value_ {
  hasCmdId_ = !!value_;
}
@synthesize cmdId;
- (void) dealloc {
}
- (id) init {
  if ((self = [super init])) {
    self.cmdId = 513;
  }
  return self;
}
static C2FHeartBeatReq* defaultC2FHeartBeatReqInstance = nil;
+ (void) initialize {
  if (self == [C2FHeartBeatReq class]) {
    defaultC2FHeartBeatReqInstance = [[C2FHeartBeatReq alloc] init];
  }
}
+ (C2FHeartBeatReq*) defaultInstance {
  return defaultC2FHeartBeatReqInstance;
}
- (C2FHeartBeatReq*) defaultInstance {
  return defaultC2FHeartBeatReqInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCmdId) {
    [output writeInt32:1 value:self.cmdId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCmdId) {
    size_ += computeInt32Size(1, self.cmdId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (C2FHeartBeatReq*) parseFromData:(NSData*) data {
  return (C2FHeartBeatReq*)[[[C2FHeartBeatReq builder] mergeFromData:data] build];
}
+ (C2FHeartBeatReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (C2FHeartBeatReq*)[[[C2FHeartBeatReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (C2FHeartBeatReq*) parseFromInputStream:(NSInputStream*) input {
  return (C2FHeartBeatReq*)[[[C2FHeartBeatReq builder] mergeFromInputStream:input] build];
}
+ (C2FHeartBeatReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (C2FHeartBeatReq*)[[[C2FHeartBeatReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (C2FHeartBeatReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (C2FHeartBeatReq*)[[[C2FHeartBeatReq builder] mergeFromCodedInputStream:input] build];
}
+ (C2FHeartBeatReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (C2FHeartBeatReq*)[[[C2FHeartBeatReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (C2FHeartBeatReqBuilder*) builder {
  return [[C2FHeartBeatReqBuilder alloc] init];
}
+ (C2FHeartBeatReqBuilder*) builderWithPrototype:(C2FHeartBeatReq*) prototype {
  return [[C2FHeartBeatReq builder] mergeFrom:prototype];
}
- (C2FHeartBeatReqBuilder*) builder {
  return [C2FHeartBeatReq builder];
}
- (C2FHeartBeatReqBuilder*) toBuilder {
  return [C2FHeartBeatReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCmdId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cmdId", [NSNumber numberWithInteger:self.cmdId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[C2FHeartBeatReq class]]) {
    return NO;
  }
  C2FHeartBeatReq *otherMessage = other;
  return
      self.hasCmdId == otherMessage.hasCmdId &&
      (!self.hasCmdId || self.cmdId == otherMessage.cmdId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCmdId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.cmdId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface C2FHeartBeatReqBuilder()
@property (strong) C2FHeartBeatReq* result;
@end

@implementation C2FHeartBeatReqBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[C2FHeartBeatReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (C2FHeartBeatReqBuilder*) clear {
  self.result = [[C2FHeartBeatReq alloc] init];
  return self;
}
- (C2FHeartBeatReqBuilder*) clone {
  return [C2FHeartBeatReq builderWithPrototype:result];
}
- (C2FHeartBeatReq*) defaultInstance {
  return [C2FHeartBeatReq defaultInstance];
}
- (C2FHeartBeatReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (C2FHeartBeatReq*) buildPartial {
  C2FHeartBeatReq* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (C2FHeartBeatReqBuilder*) mergeFrom:(C2FHeartBeatReq*) other {
  if (other == [C2FHeartBeatReq defaultInstance]) {
    return self;
  }
  if (other.hasCmdId) {
    [self setCmdId:other.cmdId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (C2FHeartBeatReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (C2FHeartBeatReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setCmdId:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasCmdId {
  return result.hasCmdId;
}
- (SInt32) cmdId {
  return result.cmdId;
}
- (C2FHeartBeatReqBuilder*) setCmdId:(SInt32) value {
  result.hasCmdId = YES;
  result.cmdId = value;
  return self;
}
- (C2FHeartBeatReqBuilder*) clearCmdId {
  result.hasCmdId = NO;
  result.cmdId = 513;
  return self;
}
@end

@interface C2FHeartBeatRsp ()
@property SInt32 cmdId;
@end

@implementation C2FHeartBeatRsp

- (BOOL) hasCmdId {
  return !!hasCmdId_;
}
- (void) setHasCmdId:(BOOL) value_ {
  hasCmdId_ = !!value_;
}
@synthesize cmdId;
- (void) dealloc {
}
- (id) init {
  if ((self = [super init])) {
    self.cmdId = 514;
  }
  return self;
}
static C2FHeartBeatRsp* defaultC2FHeartBeatRspInstance = nil;
+ (void) initialize {
  if (self == [C2FHeartBeatRsp class]) {
    defaultC2FHeartBeatRspInstance = [[C2FHeartBeatRsp alloc] init];
  }
}
+ (C2FHeartBeatRsp*) defaultInstance {
  return defaultC2FHeartBeatRspInstance;
}
- (C2FHeartBeatRsp*) defaultInstance {
  return defaultC2FHeartBeatRspInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCmdId) {
    [output writeInt32:1 value:self.cmdId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCmdId) {
    size_ += computeInt32Size(1, self.cmdId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (C2FHeartBeatRsp*) parseFromData:(NSData*) data {
  return (C2FHeartBeatRsp*)[[[C2FHeartBeatRsp builder] mergeFromData:data] build];
}
+ (C2FHeartBeatRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (C2FHeartBeatRsp*)[[[C2FHeartBeatRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (C2FHeartBeatRsp*) parseFromInputStream:(NSInputStream*) input {
  return (C2FHeartBeatRsp*)[[[C2FHeartBeatRsp builder] mergeFromInputStream:input] build];
}
+ (C2FHeartBeatRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (C2FHeartBeatRsp*)[[[C2FHeartBeatRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (C2FHeartBeatRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (C2FHeartBeatRsp*)[[[C2FHeartBeatRsp builder] mergeFromCodedInputStream:input] build];
}
+ (C2FHeartBeatRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (C2FHeartBeatRsp*)[[[C2FHeartBeatRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (C2FHeartBeatRspBuilder*) builder {
  return [[C2FHeartBeatRspBuilder alloc] init];
}
+ (C2FHeartBeatRspBuilder*) builderWithPrototype:(C2FHeartBeatRsp*) prototype {
  return [[C2FHeartBeatRsp builder] mergeFrom:prototype];
}
- (C2FHeartBeatRspBuilder*) builder {
  return [C2FHeartBeatRsp builder];
}
- (C2FHeartBeatRspBuilder*) toBuilder {
  return [C2FHeartBeatRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCmdId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cmdId", [NSNumber numberWithInteger:self.cmdId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[C2FHeartBeatRsp class]]) {
    return NO;
  }
  C2FHeartBeatRsp *otherMessage = other;
  return
      self.hasCmdId == otherMessage.hasCmdId &&
      (!self.hasCmdId || self.cmdId == otherMessage.cmdId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCmdId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.cmdId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface C2FHeartBeatRspBuilder()
@property (strong) C2FHeartBeatRsp* result;
@end

@implementation C2FHeartBeatRspBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[C2FHeartBeatRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (C2FHeartBeatRspBuilder*) clear {
  self.result = [[C2FHeartBeatRsp alloc] init];
  return self;
}
- (C2FHeartBeatRspBuilder*) clone {
  return [C2FHeartBeatRsp builderWithPrototype:result];
}
- (C2FHeartBeatRsp*) defaultInstance {
  return [C2FHeartBeatRsp defaultInstance];
}
- (C2FHeartBeatRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (C2FHeartBeatRsp*) buildPartial {
  C2FHeartBeatRsp* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (C2FHeartBeatRspBuilder*) mergeFrom:(C2FHeartBeatRsp*) other {
  if (other == [C2FHeartBeatRsp defaultInstance]) {
    return self;
  }
  if (other.hasCmdId) {
    [self setCmdId:other.cmdId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (C2FHeartBeatRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (C2FHeartBeatRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setCmdId:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasCmdId {
  return result.hasCmdId;
}
- (SInt32) cmdId {
  return result.cmdId;
}
- (C2FHeartBeatRspBuilder*) setCmdId:(SInt32) value {
  result.hasCmdId = YES;
  result.cmdId = value;
  return self;
}
- (C2FHeartBeatRspBuilder*) clearCmdId {
  result.hasCmdId = NO;
  result.cmdId = 514;
  return self;
}
@end

@interface C2FFileLoginReq ()
@property SInt32 cmdId;
@property (strong) NSString* userId;
@property (strong) NSString* token;
@end

@implementation C2FFileLoginReq

- (BOOL) hasCmdId {
  return !!hasCmdId_;
}
- (void) setHasCmdId:(BOOL) value_ {
  hasCmdId_ = !!value_;
}
@synthesize cmdId;
- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value_ {
  hasUserId_ = !!value_;
}
@synthesize userId;
- (BOOL) hasToken {
  return !!hasToken_;
}
- (void) setHasToken:(BOOL) value_ {
  hasToken_ = !!value_;
}
@synthesize token;
- (void) dealloc {
  self.userId = nil;
  self.token = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.cmdId = 515;
    self.userId = @"";
    self.token = @"";
  }
  return self;
}
static C2FFileLoginReq* defaultC2FFileLoginReqInstance = nil;
+ (void) initialize {
  if (self == [C2FFileLoginReq class]) {
    defaultC2FFileLoginReqInstance = [[C2FFileLoginReq alloc] init];
  }
}
+ (C2FFileLoginReq*) defaultInstance {
  return defaultC2FFileLoginReqInstance;
}
- (C2FFileLoginReq*) defaultInstance {
  return defaultC2FFileLoginReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasToken) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCmdId) {
    [output writeInt32:1 value:self.cmdId];
  }
  if (self.hasUserId) {
    [output writeString:2 value:self.userId];
  }
  if (self.hasToken) {
    [output writeString:3 value:self.token];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCmdId) {
    size_ += computeInt32Size(1, self.cmdId);
  }
  if (self.hasUserId) {
    size_ += computeStringSize(2, self.userId);
  }
  if (self.hasToken) {
    size_ += computeStringSize(3, self.token);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (C2FFileLoginReq*) parseFromData:(NSData*) data {
  return (C2FFileLoginReq*)[[[C2FFileLoginReq builder] mergeFromData:data] build];
}
+ (C2FFileLoginReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (C2FFileLoginReq*)[[[C2FFileLoginReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (C2FFileLoginReq*) parseFromInputStream:(NSInputStream*) input {
  return (C2FFileLoginReq*)[[[C2FFileLoginReq builder] mergeFromInputStream:input] build];
}
+ (C2FFileLoginReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (C2FFileLoginReq*)[[[C2FFileLoginReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (C2FFileLoginReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (C2FFileLoginReq*)[[[C2FFileLoginReq builder] mergeFromCodedInputStream:input] build];
}
+ (C2FFileLoginReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (C2FFileLoginReq*)[[[C2FFileLoginReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (C2FFileLoginReqBuilder*) builder {
  return [[C2FFileLoginReqBuilder alloc] init];
}
+ (C2FFileLoginReqBuilder*) builderWithPrototype:(C2FFileLoginReq*) prototype {
  return [[C2FFileLoginReq builder] mergeFrom:prototype];
}
- (C2FFileLoginReqBuilder*) builder {
  return [C2FFileLoginReq builder];
}
- (C2FFileLoginReqBuilder*) toBuilder {
  return [C2FFileLoginReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCmdId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cmdId", [NSNumber numberWithInteger:self.cmdId]];
  }
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", self.userId];
  }
  if (self.hasToken) {
    [output appendFormat:@"%@%@: %@\n", indent, @"token", self.token];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[C2FFileLoginReq class]]) {
    return NO;
  }
  C2FFileLoginReq *otherMessage = other;
  return
      self.hasCmdId == otherMessage.hasCmdId &&
      (!self.hasCmdId || self.cmdId == otherMessage.cmdId) &&
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || [self.userId isEqual:otherMessage.userId]) &&
      self.hasToken == otherMessage.hasToken &&
      (!self.hasToken || [self.token isEqual:otherMessage.token]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCmdId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.cmdId] hash];
  }
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [self.userId hash];
  }
  if (self.hasToken) {
    hashCode = hashCode * 31 + [self.token hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface C2FFileLoginReqBuilder()
@property (strong) C2FFileLoginReq* result;
@end

@implementation C2FFileLoginReqBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[C2FFileLoginReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (C2FFileLoginReqBuilder*) clear {
  self.result = [[C2FFileLoginReq alloc] init];
  return self;
}
- (C2FFileLoginReqBuilder*) clone {
  return [C2FFileLoginReq builderWithPrototype:result];
}
- (C2FFileLoginReq*) defaultInstance {
  return [C2FFileLoginReq defaultInstance];
}
- (C2FFileLoginReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (C2FFileLoginReq*) buildPartial {
  C2FFileLoginReq* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (C2FFileLoginReqBuilder*) mergeFrom:(C2FFileLoginReq*) other {
  if (other == [C2FFileLoginReq defaultInstance]) {
    return self;
  }
  if (other.hasCmdId) {
    [self setCmdId:other.cmdId];
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasToken) {
    [self setToken:other.token];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (C2FFileLoginReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (C2FFileLoginReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setCmdId:[input readInt32]];
        break;
      }
      case 18: {
        [self setUserId:[input readString]];
        break;
      }
      case 26: {
        [self setToken:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasCmdId {
  return result.hasCmdId;
}
- (SInt32) cmdId {
  return result.cmdId;
}
- (C2FFileLoginReqBuilder*) setCmdId:(SInt32) value {
  result.hasCmdId = YES;
  result.cmdId = value;
  return self;
}
- (C2FFileLoginReqBuilder*) clearCmdId {
  result.hasCmdId = NO;
  result.cmdId = 515;
  return self;
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (NSString*) userId {
  return result.userId;
}
- (C2FFileLoginReqBuilder*) setUserId:(NSString*) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (C2FFileLoginReqBuilder*) clearUserId {
  result.hasUserId = NO;
  result.userId = @"";
  return self;
}
- (BOOL) hasToken {
  return result.hasToken;
}
- (NSString*) token {
  return result.token;
}
- (C2FFileLoginReqBuilder*) setToken:(NSString*) value {
  result.hasToken = YES;
  result.token = value;
  return self;
}
- (C2FFileLoginReqBuilder*) clearToken {
  result.hasToken = NO;
  result.token = @"";
  return self;
}
@end

@interface C2FFileLoginRsp ()
@property SInt32 cmdId;
@property UInt32 results;
@end

@implementation C2FFileLoginRsp

- (BOOL) hasCmdId {
  return !!hasCmdId_;
}
- (void) setHasCmdId:(BOOL) value_ {
  hasCmdId_ = !!value_;
}
@synthesize cmdId;
- (BOOL) hasResults {
  return !!hasResults_;
}
- (void) setHasResults:(BOOL) value_ {
  hasResults_ = !!value_;
}
@synthesize results;
- (void) dealloc {
}
- (id) init {
  if ((self = [super init])) {
    self.cmdId = 516;
    self.results = 0;
  }
  return self;
}
static C2FFileLoginRsp* defaultC2FFileLoginRspInstance = nil;
+ (void) initialize {
  if (self == [C2FFileLoginRsp class]) {
    defaultC2FFileLoginRspInstance = [[C2FFileLoginRsp alloc] init];
  }
}
+ (C2FFileLoginRsp*) defaultInstance {
  return defaultC2FFileLoginRspInstance;
}
- (C2FFileLoginRsp*) defaultInstance {
  return defaultC2FFileLoginRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasResults) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCmdId) {
    [output writeInt32:1 value:self.cmdId];
  }
  if (self.hasResults) {
    [output writeUInt32:2 value:self.results];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCmdId) {
    size_ += computeInt32Size(1, self.cmdId);
  }
  if (self.hasResults) {
    size_ += computeUInt32Size(2, self.results);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (C2FFileLoginRsp*) parseFromData:(NSData*) data {
  return (C2FFileLoginRsp*)[[[C2FFileLoginRsp builder] mergeFromData:data] build];
}
+ (C2FFileLoginRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (C2FFileLoginRsp*)[[[C2FFileLoginRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (C2FFileLoginRsp*) parseFromInputStream:(NSInputStream*) input {
  return (C2FFileLoginRsp*)[[[C2FFileLoginRsp builder] mergeFromInputStream:input] build];
}
+ (C2FFileLoginRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (C2FFileLoginRsp*)[[[C2FFileLoginRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (C2FFileLoginRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (C2FFileLoginRsp*)[[[C2FFileLoginRsp builder] mergeFromCodedInputStream:input] build];
}
+ (C2FFileLoginRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (C2FFileLoginRsp*)[[[C2FFileLoginRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (C2FFileLoginRspBuilder*) builder {
  return [[C2FFileLoginRspBuilder alloc] init];
}
+ (C2FFileLoginRspBuilder*) builderWithPrototype:(C2FFileLoginRsp*) prototype {
  return [[C2FFileLoginRsp builder] mergeFrom:prototype];
}
- (C2FFileLoginRspBuilder*) builder {
  return [C2FFileLoginRsp builder];
}
- (C2FFileLoginRspBuilder*) toBuilder {
  return [C2FFileLoginRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCmdId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cmdId", [NSNumber numberWithInteger:self.cmdId]];
  }
  if (self.hasResults) {
    [output appendFormat:@"%@%@: %@\n", indent, @"results", [NSNumber numberWithInteger:self.results]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[C2FFileLoginRsp class]]) {
    return NO;
  }
  C2FFileLoginRsp *otherMessage = other;
  return
      self.hasCmdId == otherMessage.hasCmdId &&
      (!self.hasCmdId || self.cmdId == otherMessage.cmdId) &&
      self.hasResults == otherMessage.hasResults &&
      (!self.hasResults || self.results == otherMessage.results) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCmdId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.cmdId] hash];
  }
  if (self.hasResults) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.results] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface C2FFileLoginRspBuilder()
@property (strong) C2FFileLoginRsp* result;
@end

@implementation C2FFileLoginRspBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[C2FFileLoginRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (C2FFileLoginRspBuilder*) clear {
  self.result = [[C2FFileLoginRsp alloc] init];
  return self;
}
- (C2FFileLoginRspBuilder*) clone {
  return [C2FFileLoginRsp builderWithPrototype:result];
}
- (C2FFileLoginRsp*) defaultInstance {
  return [C2FFileLoginRsp defaultInstance];
}
- (C2FFileLoginRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (C2FFileLoginRsp*) buildPartial {
  C2FFileLoginRsp* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (C2FFileLoginRspBuilder*) mergeFrom:(C2FFileLoginRsp*) other {
  if (other == [C2FFileLoginRsp defaultInstance]) {
    return self;
  }
  if (other.hasCmdId) {
    [self setCmdId:other.cmdId];
  }
  if (other.hasResults) {
    [self setResults:other.results];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (C2FFileLoginRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (C2FFileLoginRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setCmdId:[input readInt32]];
        break;
      }
      case 16: {
        [self setResults:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasCmdId {
  return result.hasCmdId;
}
- (SInt32) cmdId {
  return result.cmdId;
}
- (C2FFileLoginRspBuilder*) setCmdId:(SInt32) value {
  result.hasCmdId = YES;
  result.cmdId = value;
  return self;
}
- (C2FFileLoginRspBuilder*) clearCmdId {
  result.hasCmdId = NO;
  result.cmdId = 516;
  return self;
}
- (BOOL) hasResults {
  return result.hasResults;
}
- (UInt32) results {
  return result.results;
}
- (C2FFileLoginRspBuilder*) setResults:(UInt32) value {
  result.hasResults = YES;
  result.results = value;
  return self;
}
- (C2FFileLoginRspBuilder*) clearResults {
  result.hasResults = NO;
  result.results = 0;
  return self;
}
@end

@interface C2FFileData ()
@property SInt32 cmdId;
@property (strong) NSString* fromUserId;
@property (strong) NSString* toUserId;
@property (strong) NSString* fileName;
@property UInt32 fileSize;
@property UInt32 fileOffset;
@property UInt32 fileType;
@property (strong) NSData* fileData;
@end

@implementation C2FFileData

- (BOOL) hasCmdId {
  return !!hasCmdId_;
}
- (void) setHasCmdId:(BOOL) value_ {
  hasCmdId_ = !!value_;
}
@synthesize cmdId;
- (BOOL) hasFromUserId {
  return !!hasFromUserId_;
}
- (void) setHasFromUserId:(BOOL) value_ {
  hasFromUserId_ = !!value_;
}
@synthesize fromUserId;
- (BOOL) hasToUserId {
  return !!hasToUserId_;
}
- (void) setHasToUserId:(BOOL) value_ {
  hasToUserId_ = !!value_;
}
@synthesize toUserId;
- (BOOL) hasFileName {
  return !!hasFileName_;
}
- (void) setHasFileName:(BOOL) value_ {
  hasFileName_ = !!value_;
}
@synthesize fileName;
- (BOOL) hasFileSize {
  return !!hasFileSize_;
}
- (void) setHasFileSize:(BOOL) value_ {
  hasFileSize_ = !!value_;
}
@synthesize fileSize;
- (BOOL) hasFileOffset {
  return !!hasFileOffset_;
}
- (void) setHasFileOffset:(BOOL) value_ {
  hasFileOffset_ = !!value_;
}
@synthesize fileOffset;
- (BOOL) hasFileType {
  return !!hasFileType_;
}
- (void) setHasFileType:(BOOL) value_ {
  hasFileType_ = !!value_;
}
@synthesize fileType;
- (BOOL) hasFileData {
  return !!hasFileData_;
}
- (void) setHasFileData:(BOOL) value_ {
  hasFileData_ = !!value_;
}
@synthesize fileData;
- (void) dealloc {
  self.fromUserId = nil;
  self.toUserId = nil;
  self.fileName = nil;
  self.fileData = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.cmdId = 517;
    self.fromUserId = @"";
    self.toUserId = @"";
    self.fileName = @"";
    self.fileSize = 0;
    self.fileOffset = 0;
    self.fileType = 0;
    self.fileData = [NSData data];
  }
  return self;
}
static C2FFileData* defaultC2FFileDataInstance = nil;
+ (void) initialize {
  if (self == [C2FFileData class]) {
    defaultC2FFileDataInstance = [[C2FFileData alloc] init];
  }
}
+ (C2FFileData*) defaultInstance {
  return defaultC2FFileDataInstance;
}
- (C2FFileData*) defaultInstance {
  return defaultC2FFileDataInstance;
}
- (BOOL) isInitialized {
  if (!self.hasFromUserId) {
    return NO;
  }
  if (!self.hasToUserId) {
    return NO;
  }
  if (!self.hasFileName) {
    return NO;
  }
  if (!self.hasFileSize) {
    return NO;
  }
  if (!self.hasFileOffset) {
    return NO;
  }
  if (!self.hasFileType) {
    return NO;
  }
  if (!self.hasFileData) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCmdId) {
    [output writeInt32:1 value:self.cmdId];
  }
  if (self.hasFromUserId) {
    [output writeString:2 value:self.fromUserId];
  }
  if (self.hasToUserId) {
    [output writeString:3 value:self.toUserId];
  }
  if (self.hasFileName) {
    [output writeString:4 value:self.fileName];
  }
  if (self.hasFileSize) {
    [output writeUInt32:5 value:self.fileSize];
  }
  if (self.hasFileOffset) {
    [output writeUInt32:6 value:self.fileOffset];
  }
  if (self.hasFileType) {
    [output writeUInt32:7 value:self.fileType];
  }
  if (self.hasFileData) {
    [output writeData:8 value:self.fileData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCmdId) {
    size_ += computeInt32Size(1, self.cmdId);
  }
  if (self.hasFromUserId) {
    size_ += computeStringSize(2, self.fromUserId);
  }
  if (self.hasToUserId) {
    size_ += computeStringSize(3, self.toUserId);
  }
  if (self.hasFileName) {
    size_ += computeStringSize(4, self.fileName);
  }
  if (self.hasFileSize) {
    size_ += computeUInt32Size(5, self.fileSize);
  }
  if (self.hasFileOffset) {
    size_ += computeUInt32Size(6, self.fileOffset);
  }
  if (self.hasFileType) {
    size_ += computeUInt32Size(7, self.fileType);
  }
  if (self.hasFileData) {
    size_ += computeDataSize(8, self.fileData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (C2FFileData*) parseFromData:(NSData*) data {
  return (C2FFileData*)[[[C2FFileData builder] mergeFromData:data] build];
}
+ (C2FFileData*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (C2FFileData*)[[[C2FFileData builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (C2FFileData*) parseFromInputStream:(NSInputStream*) input {
  return (C2FFileData*)[[[C2FFileData builder] mergeFromInputStream:input] build];
}
+ (C2FFileData*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (C2FFileData*)[[[C2FFileData builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (C2FFileData*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (C2FFileData*)[[[C2FFileData builder] mergeFromCodedInputStream:input] build];
}
+ (C2FFileData*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (C2FFileData*)[[[C2FFileData builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (C2FFileDataBuilder*) builder {
  return [[C2FFileDataBuilder alloc] init];
}
+ (C2FFileDataBuilder*) builderWithPrototype:(C2FFileData*) prototype {
  return [[C2FFileData builder] mergeFrom:prototype];
}
- (C2FFileDataBuilder*) builder {
  return [C2FFileData builder];
}
- (C2FFileDataBuilder*) toBuilder {
  return [C2FFileData builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCmdId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cmdId", [NSNumber numberWithInteger:self.cmdId]];
  }
  if (self.hasFromUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromUserId", self.fromUserId];
  }
  if (self.hasToUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"toUserId", self.toUserId];
  }
  if (self.hasFileName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fileName", self.fileName];
  }
  if (self.hasFileSize) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fileSize", [NSNumber numberWithInteger:self.fileSize]];
  }
  if (self.hasFileOffset) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fileOffset", [NSNumber numberWithInteger:self.fileOffset]];
  }
  if (self.hasFileType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fileType", [NSNumber numberWithInteger:self.fileType]];
  }
  if (self.hasFileData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fileData", self.fileData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[C2FFileData class]]) {
    return NO;
  }
  C2FFileData *otherMessage = other;
  return
      self.hasCmdId == otherMessage.hasCmdId &&
      (!self.hasCmdId || self.cmdId == otherMessage.cmdId) &&
      self.hasFromUserId == otherMessage.hasFromUserId &&
      (!self.hasFromUserId || [self.fromUserId isEqual:otherMessage.fromUserId]) &&
      self.hasToUserId == otherMessage.hasToUserId &&
      (!self.hasToUserId || [self.toUserId isEqual:otherMessage.toUserId]) &&
      self.hasFileName == otherMessage.hasFileName &&
      (!self.hasFileName || [self.fileName isEqual:otherMessage.fileName]) &&
      self.hasFileSize == otherMessage.hasFileSize &&
      (!self.hasFileSize || self.fileSize == otherMessage.fileSize) &&
      self.hasFileOffset == otherMessage.hasFileOffset &&
      (!self.hasFileOffset || self.fileOffset == otherMessage.fileOffset) &&
      self.hasFileType == otherMessage.hasFileType &&
      (!self.hasFileType || self.fileType == otherMessage.fileType) &&
      self.hasFileData == otherMessage.hasFileData &&
      (!self.hasFileData || [self.fileData isEqual:otherMessage.fileData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCmdId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.cmdId] hash];
  }
  if (self.hasFromUserId) {
    hashCode = hashCode * 31 + [self.fromUserId hash];
  }
  if (self.hasToUserId) {
    hashCode = hashCode * 31 + [self.toUserId hash];
  }
  if (self.hasFileName) {
    hashCode = hashCode * 31 + [self.fileName hash];
  }
  if (self.hasFileSize) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.fileSize] hash];
  }
  if (self.hasFileOffset) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.fileOffset] hash];
  }
  if (self.hasFileType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.fileType] hash];
  }
  if (self.hasFileData) {
    hashCode = hashCode * 31 + [self.fileData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface C2FFileDataBuilder()
@property (strong) C2FFileData* result;
@end

@implementation C2FFileDataBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[C2FFileData alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (C2FFileDataBuilder*) clear {
  self.result = [[C2FFileData alloc] init];
  return self;
}
- (C2FFileDataBuilder*) clone {
  return [C2FFileData builderWithPrototype:result];
}
- (C2FFileData*) defaultInstance {
  return [C2FFileData defaultInstance];
}
- (C2FFileData*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (C2FFileData*) buildPartial {
  C2FFileData* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (C2FFileDataBuilder*) mergeFrom:(C2FFileData*) other {
  if (other == [C2FFileData defaultInstance]) {
    return self;
  }
  if (other.hasCmdId) {
    [self setCmdId:other.cmdId];
  }
  if (other.hasFromUserId) {
    [self setFromUserId:other.fromUserId];
  }
  if (other.hasToUserId) {
    [self setToUserId:other.toUserId];
  }
  if (other.hasFileName) {
    [self setFileName:other.fileName];
  }
  if (other.hasFileSize) {
    [self setFileSize:other.fileSize];
  }
  if (other.hasFileOffset) {
    [self setFileOffset:other.fileOffset];
  }
  if (other.hasFileType) {
    [self setFileType:other.fileType];
  }
  if (other.hasFileData) {
    [self setFileData:other.fileData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (C2FFileDataBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (C2FFileDataBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setCmdId:[input readInt32]];
        break;
      }
      case 18: {
        [self setFromUserId:[input readString]];
        break;
      }
      case 26: {
        [self setToUserId:[input readString]];
        break;
      }
      case 34: {
        [self setFileName:[input readString]];
        break;
      }
      case 40: {
        [self setFileSize:[input readUInt32]];
        break;
      }
      case 48: {
        [self setFileOffset:[input readUInt32]];
        break;
      }
      case 56: {
        [self setFileType:[input readUInt32]];
        break;
      }
      case 66: {
        [self setFileData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasCmdId {
  return result.hasCmdId;
}
- (SInt32) cmdId {
  return result.cmdId;
}
- (C2FFileDataBuilder*) setCmdId:(SInt32) value {
  result.hasCmdId = YES;
  result.cmdId = value;
  return self;
}
- (C2FFileDataBuilder*) clearCmdId {
  result.hasCmdId = NO;
  result.cmdId = 517;
  return self;
}
- (BOOL) hasFromUserId {
  return result.hasFromUserId;
}
- (NSString*) fromUserId {
  return result.fromUserId;
}
- (C2FFileDataBuilder*) setFromUserId:(NSString*) value {
  result.hasFromUserId = YES;
  result.fromUserId = value;
  return self;
}
- (C2FFileDataBuilder*) clearFromUserId {
  result.hasFromUserId = NO;
  result.fromUserId = @"";
  return self;
}
- (BOOL) hasToUserId {
  return result.hasToUserId;
}
- (NSString*) toUserId {
  return result.toUserId;
}
- (C2FFileDataBuilder*) setToUserId:(NSString*) value {
  result.hasToUserId = YES;
  result.toUserId = value;
  return self;
}
- (C2FFileDataBuilder*) clearToUserId {
  result.hasToUserId = NO;
  result.toUserId = @"";
  return self;
}
- (BOOL) hasFileName {
  return result.hasFileName;
}
- (NSString*) fileName {
  return result.fileName;
}
- (C2FFileDataBuilder*) setFileName:(NSString*) value {
  result.hasFileName = YES;
  result.fileName = value;
  return self;
}
- (C2FFileDataBuilder*) clearFileName {
  result.hasFileName = NO;
  result.fileName = @"";
  return self;
}
- (BOOL) hasFileSize {
  return result.hasFileSize;
}
- (UInt32) fileSize {
  return result.fileSize;
}
- (C2FFileDataBuilder*) setFileSize:(UInt32) value {
  result.hasFileSize = YES;
  result.fileSize = value;
  return self;
}
- (C2FFileDataBuilder*) clearFileSize {
  result.hasFileSize = NO;
  result.fileSize = 0;
  return self;
}
- (BOOL) hasFileOffset {
  return result.hasFileOffset;
}
- (UInt32) fileOffset {
  return result.fileOffset;
}
- (C2FFileDataBuilder*) setFileOffset:(UInt32) value {
  result.hasFileOffset = YES;
  result.fileOffset = value;
  return self;
}
- (C2FFileDataBuilder*) clearFileOffset {
  result.hasFileOffset = NO;
  result.fileOffset = 0;
  return self;
}
- (BOOL) hasFileType {
  return result.hasFileType;
}
- (UInt32) fileType {
  return result.fileType;
}
- (C2FFileDataBuilder*) setFileType:(UInt32) value {
  result.hasFileType = YES;
  result.fileType = value;
  return self;
}
- (C2FFileDataBuilder*) clearFileType {
  result.hasFileType = NO;
  result.fileType = 0;
  return self;
}
- (BOOL) hasFileData {
  return result.hasFileData;
}
- (NSData*) fileData {
  return result.fileData;
}
- (C2FFileDataBuilder*) setFileData:(NSData*) value {
  result.hasFileData = YES;
  result.fileData = value;
  return self;
}
- (C2FFileDataBuilder*) clearFileData {
  result.hasFileData = NO;
  result.fileData = [NSData data];
  return self;
}
@end

@interface C2FFileGetOfflineReq ()
@property SInt32 cmdId;
@property (strong) NSString* fromUserId;
@property (strong) NSString* filePath;
@end

@implementation C2FFileGetOfflineReq

- (BOOL) hasCmdId {
  return !!hasCmdId_;
}
- (void) setHasCmdId:(BOOL) value_ {
  hasCmdId_ = !!value_;
}
@synthesize cmdId;
- (BOOL) hasFromUserId {
  return !!hasFromUserId_;
}
- (void) setHasFromUserId:(BOOL) value_ {
  hasFromUserId_ = !!value_;
}
@synthesize fromUserId;
- (BOOL) hasFilePath {
  return !!hasFilePath_;
}
- (void) setHasFilePath:(BOOL) value_ {
  hasFilePath_ = !!value_;
}
@synthesize filePath;
- (void) dealloc {
  self.fromUserId = nil;
  self.filePath = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.cmdId = 518;
    self.fromUserId = @"";
    self.filePath = @"";
  }
  return self;
}
static C2FFileGetOfflineReq* defaultC2FFileGetOfflineReqInstance = nil;
+ (void) initialize {
  if (self == [C2FFileGetOfflineReq class]) {
    defaultC2FFileGetOfflineReqInstance = [[C2FFileGetOfflineReq alloc] init];
  }
}
+ (C2FFileGetOfflineReq*) defaultInstance {
  return defaultC2FFileGetOfflineReqInstance;
}
- (C2FFileGetOfflineReq*) defaultInstance {
  return defaultC2FFileGetOfflineReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasFromUserId) {
    return NO;
  }
  if (!self.hasFilePath) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCmdId) {
    [output writeInt32:1 value:self.cmdId];
  }
  if (self.hasFromUserId) {
    [output writeString:2 value:self.fromUserId];
  }
  if (self.hasFilePath) {
    [output writeString:3 value:self.filePath];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCmdId) {
    size_ += computeInt32Size(1, self.cmdId);
  }
  if (self.hasFromUserId) {
    size_ += computeStringSize(2, self.fromUserId);
  }
  if (self.hasFilePath) {
    size_ += computeStringSize(3, self.filePath);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (C2FFileGetOfflineReq*) parseFromData:(NSData*) data {
  return (C2FFileGetOfflineReq*)[[[C2FFileGetOfflineReq builder] mergeFromData:data] build];
}
+ (C2FFileGetOfflineReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (C2FFileGetOfflineReq*)[[[C2FFileGetOfflineReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (C2FFileGetOfflineReq*) parseFromInputStream:(NSInputStream*) input {
  return (C2FFileGetOfflineReq*)[[[C2FFileGetOfflineReq builder] mergeFromInputStream:input] build];
}
+ (C2FFileGetOfflineReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (C2FFileGetOfflineReq*)[[[C2FFileGetOfflineReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (C2FFileGetOfflineReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (C2FFileGetOfflineReq*)[[[C2FFileGetOfflineReq builder] mergeFromCodedInputStream:input] build];
}
+ (C2FFileGetOfflineReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (C2FFileGetOfflineReq*)[[[C2FFileGetOfflineReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (C2FFileGetOfflineReqBuilder*) builder {
  return [[C2FFileGetOfflineReqBuilder alloc] init];
}
+ (C2FFileGetOfflineReqBuilder*) builderWithPrototype:(C2FFileGetOfflineReq*) prototype {
  return [[C2FFileGetOfflineReq builder] mergeFrom:prototype];
}
- (C2FFileGetOfflineReqBuilder*) builder {
  return [C2FFileGetOfflineReq builder];
}
- (C2FFileGetOfflineReqBuilder*) toBuilder {
  return [C2FFileGetOfflineReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCmdId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cmdId", [NSNumber numberWithInteger:self.cmdId]];
  }
  if (self.hasFromUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromUserId", self.fromUserId];
  }
  if (self.hasFilePath) {
    [output appendFormat:@"%@%@: %@\n", indent, @"filePath", self.filePath];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[C2FFileGetOfflineReq class]]) {
    return NO;
  }
  C2FFileGetOfflineReq *otherMessage = other;
  return
      self.hasCmdId == otherMessage.hasCmdId &&
      (!self.hasCmdId || self.cmdId == otherMessage.cmdId) &&
      self.hasFromUserId == otherMessage.hasFromUserId &&
      (!self.hasFromUserId || [self.fromUserId isEqual:otherMessage.fromUserId]) &&
      self.hasFilePath == otherMessage.hasFilePath &&
      (!self.hasFilePath || [self.filePath isEqual:otherMessage.filePath]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCmdId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.cmdId] hash];
  }
  if (self.hasFromUserId) {
    hashCode = hashCode * 31 + [self.fromUserId hash];
  }
  if (self.hasFilePath) {
    hashCode = hashCode * 31 + [self.filePath hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface C2FFileGetOfflineReqBuilder()
@property (strong) C2FFileGetOfflineReq* result;
@end

@implementation C2FFileGetOfflineReqBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[C2FFileGetOfflineReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (C2FFileGetOfflineReqBuilder*) clear {
  self.result = [[C2FFileGetOfflineReq alloc] init];
  return self;
}
- (C2FFileGetOfflineReqBuilder*) clone {
  return [C2FFileGetOfflineReq builderWithPrototype:result];
}
- (C2FFileGetOfflineReq*) defaultInstance {
  return [C2FFileGetOfflineReq defaultInstance];
}
- (C2FFileGetOfflineReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (C2FFileGetOfflineReq*) buildPartial {
  C2FFileGetOfflineReq* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (C2FFileGetOfflineReqBuilder*) mergeFrom:(C2FFileGetOfflineReq*) other {
  if (other == [C2FFileGetOfflineReq defaultInstance]) {
    return self;
  }
  if (other.hasCmdId) {
    [self setCmdId:other.cmdId];
  }
  if (other.hasFromUserId) {
    [self setFromUserId:other.fromUserId];
  }
  if (other.hasFilePath) {
    [self setFilePath:other.filePath];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (C2FFileGetOfflineReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (C2FFileGetOfflineReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setCmdId:[input readInt32]];
        break;
      }
      case 18: {
        [self setFromUserId:[input readString]];
        break;
      }
      case 26: {
        [self setFilePath:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasCmdId {
  return result.hasCmdId;
}
- (SInt32) cmdId {
  return result.cmdId;
}
- (C2FFileGetOfflineReqBuilder*) setCmdId:(SInt32) value {
  result.hasCmdId = YES;
  result.cmdId = value;
  return self;
}
- (C2FFileGetOfflineReqBuilder*) clearCmdId {
  result.hasCmdId = NO;
  result.cmdId = 518;
  return self;
}
- (BOOL) hasFromUserId {
  return result.hasFromUserId;
}
- (NSString*) fromUserId {
  return result.fromUserId;
}
- (C2FFileGetOfflineReqBuilder*) setFromUserId:(NSString*) value {
  result.hasFromUserId = YES;
  result.fromUserId = value;
  return self;
}
- (C2FFileGetOfflineReqBuilder*) clearFromUserId {
  result.hasFromUserId = NO;
  result.fromUserId = @"";
  return self;
}
- (BOOL) hasFilePath {
  return result.hasFilePath;
}
- (NSString*) filePath {
  return result.filePath;
}
- (C2FFileGetOfflineReqBuilder*) setFilePath:(NSString*) value {
  result.hasFilePath = YES;
  result.filePath = value;
  return self;
}
- (C2FFileGetOfflineReqBuilder*) clearFilePath {
  result.hasFilePath = NO;
  result.filePath = @"";
  return self;
}
@end

@interface C2FFileUploadFinish ()
@property SInt32 cmdId;
@property (strong) NSString* fromUserId;
@property (strong) NSString* toUserId;
@property (strong) NSString* filePath;
@property (strong) NSString* saveFilePath;
@property UInt32 fileSize;
@end

@implementation C2FFileUploadFinish

- (BOOL) hasCmdId {
  return !!hasCmdId_;
}
- (void) setHasCmdId:(BOOL) value_ {
  hasCmdId_ = !!value_;
}
@synthesize cmdId;
- (BOOL) hasFromUserId {
  return !!hasFromUserId_;
}
- (void) setHasFromUserId:(BOOL) value_ {
  hasFromUserId_ = !!value_;
}
@synthesize fromUserId;
- (BOOL) hasToUserId {
  return !!hasToUserId_;
}
- (void) setHasToUserId:(BOOL) value_ {
  hasToUserId_ = !!value_;
}
@synthesize toUserId;
- (BOOL) hasFilePath {
  return !!hasFilePath_;
}
- (void) setHasFilePath:(BOOL) value_ {
  hasFilePath_ = !!value_;
}
@synthesize filePath;
- (BOOL) hasSaveFilePath {
  return !!hasSaveFilePath_;
}
- (void) setHasSaveFilePath:(BOOL) value_ {
  hasSaveFilePath_ = !!value_;
}
@synthesize saveFilePath;
- (BOOL) hasFileSize {
  return !!hasFileSize_;
}
- (void) setHasFileSize:(BOOL) value_ {
  hasFileSize_ = !!value_;
}
@synthesize fileSize;
- (void) dealloc {
  self.fromUserId = nil;
  self.toUserId = nil;
  self.filePath = nil;
  self.saveFilePath = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.cmdId = 519;
    self.fromUserId = @"";
    self.toUserId = @"";
    self.filePath = @"";
    self.saveFilePath = @"";
    self.fileSize = 0;
  }
  return self;
}
static C2FFileUploadFinish* defaultC2FFileUploadFinishInstance = nil;
+ (void) initialize {
  if (self == [C2FFileUploadFinish class]) {
    defaultC2FFileUploadFinishInstance = [[C2FFileUploadFinish alloc] init];
  }
}
+ (C2FFileUploadFinish*) defaultInstance {
  return defaultC2FFileUploadFinishInstance;
}
- (C2FFileUploadFinish*) defaultInstance {
  return defaultC2FFileUploadFinishInstance;
}
- (BOOL) isInitialized {
  if (!self.hasFromUserId) {
    return NO;
  }
  if (!self.hasToUserId) {
    return NO;
  }
  if (!self.hasFilePath) {
    return NO;
  }
  if (!self.hasSaveFilePath) {
    return NO;
  }
  if (!self.hasFileSize) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCmdId) {
    [output writeInt32:1 value:self.cmdId];
  }
  if (self.hasFromUserId) {
    [output writeString:2 value:self.fromUserId];
  }
  if (self.hasToUserId) {
    [output writeString:3 value:self.toUserId];
  }
  if (self.hasFilePath) {
    [output writeString:4 value:self.filePath];
  }
  if (self.hasSaveFilePath) {
    [output writeString:5 value:self.saveFilePath];
  }
  if (self.hasFileSize) {
    [output writeUInt32:6 value:self.fileSize];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCmdId) {
    size_ += computeInt32Size(1, self.cmdId);
  }
  if (self.hasFromUserId) {
    size_ += computeStringSize(2, self.fromUserId);
  }
  if (self.hasToUserId) {
    size_ += computeStringSize(3, self.toUserId);
  }
  if (self.hasFilePath) {
    size_ += computeStringSize(4, self.filePath);
  }
  if (self.hasSaveFilePath) {
    size_ += computeStringSize(5, self.saveFilePath);
  }
  if (self.hasFileSize) {
    size_ += computeUInt32Size(6, self.fileSize);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (C2FFileUploadFinish*) parseFromData:(NSData*) data {
  return (C2FFileUploadFinish*)[[[C2FFileUploadFinish builder] mergeFromData:data] build];
}
+ (C2FFileUploadFinish*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (C2FFileUploadFinish*)[[[C2FFileUploadFinish builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (C2FFileUploadFinish*) parseFromInputStream:(NSInputStream*) input {
  return (C2FFileUploadFinish*)[[[C2FFileUploadFinish builder] mergeFromInputStream:input] build];
}
+ (C2FFileUploadFinish*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (C2FFileUploadFinish*)[[[C2FFileUploadFinish builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (C2FFileUploadFinish*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (C2FFileUploadFinish*)[[[C2FFileUploadFinish builder] mergeFromCodedInputStream:input] build];
}
+ (C2FFileUploadFinish*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (C2FFileUploadFinish*)[[[C2FFileUploadFinish builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (C2FFileUploadFinishBuilder*) builder {
  return [[C2FFileUploadFinishBuilder alloc] init];
}
+ (C2FFileUploadFinishBuilder*) builderWithPrototype:(C2FFileUploadFinish*) prototype {
  return [[C2FFileUploadFinish builder] mergeFrom:prototype];
}
- (C2FFileUploadFinishBuilder*) builder {
  return [C2FFileUploadFinish builder];
}
- (C2FFileUploadFinishBuilder*) toBuilder {
  return [C2FFileUploadFinish builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCmdId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cmdId", [NSNumber numberWithInteger:self.cmdId]];
  }
  if (self.hasFromUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromUserId", self.fromUserId];
  }
  if (self.hasToUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"toUserId", self.toUserId];
  }
  if (self.hasFilePath) {
    [output appendFormat:@"%@%@: %@\n", indent, @"filePath", self.filePath];
  }
  if (self.hasSaveFilePath) {
    [output appendFormat:@"%@%@: %@\n", indent, @"saveFilePath", self.saveFilePath];
  }
  if (self.hasFileSize) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fileSize", [NSNumber numberWithInteger:self.fileSize]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[C2FFileUploadFinish class]]) {
    return NO;
  }
  C2FFileUploadFinish *otherMessage = other;
  return
      self.hasCmdId == otherMessage.hasCmdId &&
      (!self.hasCmdId || self.cmdId == otherMessage.cmdId) &&
      self.hasFromUserId == otherMessage.hasFromUserId &&
      (!self.hasFromUserId || [self.fromUserId isEqual:otherMessage.fromUserId]) &&
      self.hasToUserId == otherMessage.hasToUserId &&
      (!self.hasToUserId || [self.toUserId isEqual:otherMessage.toUserId]) &&
      self.hasFilePath == otherMessage.hasFilePath &&
      (!self.hasFilePath || [self.filePath isEqual:otherMessage.filePath]) &&
      self.hasSaveFilePath == otherMessage.hasSaveFilePath &&
      (!self.hasSaveFilePath || [self.saveFilePath isEqual:otherMessage.saveFilePath]) &&
      self.hasFileSize == otherMessage.hasFileSize &&
      (!self.hasFileSize || self.fileSize == otherMessage.fileSize) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCmdId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.cmdId] hash];
  }
  if (self.hasFromUserId) {
    hashCode = hashCode * 31 + [self.fromUserId hash];
  }
  if (self.hasToUserId) {
    hashCode = hashCode * 31 + [self.toUserId hash];
  }
  if (self.hasFilePath) {
    hashCode = hashCode * 31 + [self.filePath hash];
  }
  if (self.hasSaveFilePath) {
    hashCode = hashCode * 31 + [self.saveFilePath hash];
  }
  if (self.hasFileSize) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.fileSize] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface C2FFileUploadFinishBuilder()
@property (strong) C2FFileUploadFinish* result;
@end

@implementation C2FFileUploadFinishBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[C2FFileUploadFinish alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (C2FFileUploadFinishBuilder*) clear {
  self.result = [[C2FFileUploadFinish alloc] init];
  return self;
}
- (C2FFileUploadFinishBuilder*) clone {
  return [C2FFileUploadFinish builderWithPrototype:result];
}
- (C2FFileUploadFinish*) defaultInstance {
  return [C2FFileUploadFinish defaultInstance];
}
- (C2FFileUploadFinish*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (C2FFileUploadFinish*) buildPartial {
  C2FFileUploadFinish* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (C2FFileUploadFinishBuilder*) mergeFrom:(C2FFileUploadFinish*) other {
  if (other == [C2FFileUploadFinish defaultInstance]) {
    return self;
  }
  if (other.hasCmdId) {
    [self setCmdId:other.cmdId];
  }
  if (other.hasFromUserId) {
    [self setFromUserId:other.fromUserId];
  }
  if (other.hasToUserId) {
    [self setToUserId:other.toUserId];
  }
  if (other.hasFilePath) {
    [self setFilePath:other.filePath];
  }
  if (other.hasSaveFilePath) {
    [self setSaveFilePath:other.saveFilePath];
  }
  if (other.hasFileSize) {
    [self setFileSize:other.fileSize];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (C2FFileUploadFinishBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (C2FFileUploadFinishBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setCmdId:[input readInt32]];
        break;
      }
      case 18: {
        [self setFromUserId:[input readString]];
        break;
      }
      case 26: {
        [self setToUserId:[input readString]];
        break;
      }
      case 34: {
        [self setFilePath:[input readString]];
        break;
      }
      case 42: {
        [self setSaveFilePath:[input readString]];
        break;
      }
      case 48: {
        [self setFileSize:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasCmdId {
  return result.hasCmdId;
}
- (SInt32) cmdId {
  return result.cmdId;
}
- (C2FFileUploadFinishBuilder*) setCmdId:(SInt32) value {
  result.hasCmdId = YES;
  result.cmdId = value;
  return self;
}
- (C2FFileUploadFinishBuilder*) clearCmdId {
  result.hasCmdId = NO;
  result.cmdId = 519;
  return self;
}
- (BOOL) hasFromUserId {
  return result.hasFromUserId;
}
- (NSString*) fromUserId {
  return result.fromUserId;
}
- (C2FFileUploadFinishBuilder*) setFromUserId:(NSString*) value {
  result.hasFromUserId = YES;
  result.fromUserId = value;
  return self;
}
- (C2FFileUploadFinishBuilder*) clearFromUserId {
  result.hasFromUserId = NO;
  result.fromUserId = @"";
  return self;
}
- (BOOL) hasToUserId {
  return result.hasToUserId;
}
- (NSString*) toUserId {
  return result.toUserId;
}
- (C2FFileUploadFinishBuilder*) setToUserId:(NSString*) value {
  result.hasToUserId = YES;
  result.toUserId = value;
  return self;
}
- (C2FFileUploadFinishBuilder*) clearToUserId {
  result.hasToUserId = NO;
  result.toUserId = @"";
  return self;
}
- (BOOL) hasFilePath {
  return result.hasFilePath;
}
- (NSString*) filePath {
  return result.filePath;
}
- (C2FFileUploadFinishBuilder*) setFilePath:(NSString*) value {
  result.hasFilePath = YES;
  result.filePath = value;
  return self;
}
- (C2FFileUploadFinishBuilder*) clearFilePath {
  result.hasFilePath = NO;
  result.filePath = @"";
  return self;
}
- (BOOL) hasSaveFilePath {
  return result.hasSaveFilePath;
}
- (NSString*) saveFilePath {
  return result.saveFilePath;
}
- (C2FFileUploadFinishBuilder*) setSaveFilePath:(NSString*) value {
  result.hasSaveFilePath = YES;
  result.saveFilePath = value;
  return self;
}
- (C2FFileUploadFinishBuilder*) clearSaveFilePath {
  result.hasSaveFilePath = NO;
  result.saveFilePath = @"";
  return self;
}
- (BOOL) hasFileSize {
  return result.hasFileSize;
}
- (UInt32) fileSize {
  return result.fileSize;
}
- (C2FFileUploadFinishBuilder*) setFileSize:(UInt32) value {
  result.hasFileSize = YES;
  result.fileSize = value;
  return self;
}
- (C2FFileUploadFinishBuilder*) clearFileSize {
  result.hasFileSize = NO;
  result.fileSize = 0;
  return self;
}
@end

@interface C2MFileReq ()
@property SInt32 cmdId;
@property (strong) NSString* fromUserId;
@property (strong) NSString* toUserId;
@property (strong) NSString* fileName;
@property UInt32 fileSize;
@end

@implementation C2MFileReq

- (BOOL) hasCmdId {
  return !!hasCmdId_;
}
- (void) setHasCmdId:(BOOL) value_ {
  hasCmdId_ = !!value_;
}
@synthesize cmdId;
- (BOOL) hasFromUserId {
  return !!hasFromUserId_;
}
- (void) setHasFromUserId:(BOOL) value_ {
  hasFromUserId_ = !!value_;
}
@synthesize fromUserId;
- (BOOL) hasToUserId {
  return !!hasToUserId_;
}
- (void) setHasToUserId:(BOOL) value_ {
  hasToUserId_ = !!value_;
}
@synthesize toUserId;
- (BOOL) hasFileName {
  return !!hasFileName_;
}
- (void) setHasFileName:(BOOL) value_ {
  hasFileName_ = !!value_;
}
@synthesize fileName;
- (BOOL) hasFileSize {
  return !!hasFileSize_;
}
- (void) setHasFileSize:(BOOL) value_ {
  hasFileSize_ = !!value_;
}
@synthesize fileSize;
- (void) dealloc {
  self.fromUserId = nil;
  self.toUserId = nil;
  self.fileName = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.cmdId = 520;
    self.fromUserId = @"";
    self.toUserId = @"";
    self.fileName = @"";
    self.fileSize = 0;
  }
  return self;
}
static C2MFileReq* defaultC2MFileReqInstance = nil;
+ (void) initialize {
  if (self == [C2MFileReq class]) {
    defaultC2MFileReqInstance = [[C2MFileReq alloc] init];
  }
}
+ (C2MFileReq*) defaultInstance {
  return defaultC2MFileReqInstance;
}
- (C2MFileReq*) defaultInstance {
  return defaultC2MFileReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasFromUserId) {
    return NO;
  }
  if (!self.hasToUserId) {
    return NO;
  }
  if (!self.hasFileName) {
    return NO;
  }
  if (!self.hasFileSize) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCmdId) {
    [output writeInt32:1 value:self.cmdId];
  }
  if (self.hasFromUserId) {
    [output writeString:2 value:self.fromUserId];
  }
  if (self.hasToUserId) {
    [output writeString:3 value:self.toUserId];
  }
  if (self.hasFileName) {
    [output writeString:4 value:self.fileName];
  }
  if (self.hasFileSize) {
    [output writeUInt32:5 value:self.fileSize];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCmdId) {
    size_ += computeInt32Size(1, self.cmdId);
  }
  if (self.hasFromUserId) {
    size_ += computeStringSize(2, self.fromUserId);
  }
  if (self.hasToUserId) {
    size_ += computeStringSize(3, self.toUserId);
  }
  if (self.hasFileName) {
    size_ += computeStringSize(4, self.fileName);
  }
  if (self.hasFileSize) {
    size_ += computeUInt32Size(5, self.fileSize);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (C2MFileReq*) parseFromData:(NSData*) data {
  return (C2MFileReq*)[[[C2MFileReq builder] mergeFromData:data] build];
}
+ (C2MFileReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (C2MFileReq*)[[[C2MFileReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (C2MFileReq*) parseFromInputStream:(NSInputStream*) input {
  return (C2MFileReq*)[[[C2MFileReq builder] mergeFromInputStream:input] build];
}
+ (C2MFileReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (C2MFileReq*)[[[C2MFileReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (C2MFileReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (C2MFileReq*)[[[C2MFileReq builder] mergeFromCodedInputStream:input] build];
}
+ (C2MFileReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (C2MFileReq*)[[[C2MFileReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (C2MFileReqBuilder*) builder {
  return [[C2MFileReqBuilder alloc] init];
}
+ (C2MFileReqBuilder*) builderWithPrototype:(C2MFileReq*) prototype {
  return [[C2MFileReq builder] mergeFrom:prototype];
}
- (C2MFileReqBuilder*) builder {
  return [C2MFileReq builder];
}
- (C2MFileReqBuilder*) toBuilder {
  return [C2MFileReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCmdId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cmdId", [NSNumber numberWithInteger:self.cmdId]];
  }
  if (self.hasFromUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromUserId", self.fromUserId];
  }
  if (self.hasToUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"toUserId", self.toUserId];
  }
  if (self.hasFileName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fileName", self.fileName];
  }
  if (self.hasFileSize) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fileSize", [NSNumber numberWithInteger:self.fileSize]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[C2MFileReq class]]) {
    return NO;
  }
  C2MFileReq *otherMessage = other;
  return
      self.hasCmdId == otherMessage.hasCmdId &&
      (!self.hasCmdId || self.cmdId == otherMessage.cmdId) &&
      self.hasFromUserId == otherMessage.hasFromUserId &&
      (!self.hasFromUserId || [self.fromUserId isEqual:otherMessage.fromUserId]) &&
      self.hasToUserId == otherMessage.hasToUserId &&
      (!self.hasToUserId || [self.toUserId isEqual:otherMessage.toUserId]) &&
      self.hasFileName == otherMessage.hasFileName &&
      (!self.hasFileName || [self.fileName isEqual:otherMessage.fileName]) &&
      self.hasFileSize == otherMessage.hasFileSize &&
      (!self.hasFileSize || self.fileSize == otherMessage.fileSize) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCmdId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.cmdId] hash];
  }
  if (self.hasFromUserId) {
    hashCode = hashCode * 31 + [self.fromUserId hash];
  }
  if (self.hasToUserId) {
    hashCode = hashCode * 31 + [self.toUserId hash];
  }
  if (self.hasFileName) {
    hashCode = hashCode * 31 + [self.fileName hash];
  }
  if (self.hasFileSize) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.fileSize] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface C2MFileReqBuilder()
@property (strong) C2MFileReq* result;
@end

@implementation C2MFileReqBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[C2MFileReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (C2MFileReqBuilder*) clear {
  self.result = [[C2MFileReq alloc] init];
  return self;
}
- (C2MFileReqBuilder*) clone {
  return [C2MFileReq builderWithPrototype:result];
}
- (C2MFileReq*) defaultInstance {
  return [C2MFileReq defaultInstance];
}
- (C2MFileReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (C2MFileReq*) buildPartial {
  C2MFileReq* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (C2MFileReqBuilder*) mergeFrom:(C2MFileReq*) other {
  if (other == [C2MFileReq defaultInstance]) {
    return self;
  }
  if (other.hasCmdId) {
    [self setCmdId:other.cmdId];
  }
  if (other.hasFromUserId) {
    [self setFromUserId:other.fromUserId];
  }
  if (other.hasToUserId) {
    [self setToUserId:other.toUserId];
  }
  if (other.hasFileName) {
    [self setFileName:other.fileName];
  }
  if (other.hasFileSize) {
    [self setFileSize:other.fileSize];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (C2MFileReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (C2MFileReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setCmdId:[input readInt32]];
        break;
      }
      case 18: {
        [self setFromUserId:[input readString]];
        break;
      }
      case 26: {
        [self setToUserId:[input readString]];
        break;
      }
      case 34: {
        [self setFileName:[input readString]];
        break;
      }
      case 40: {
        [self setFileSize:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasCmdId {
  return result.hasCmdId;
}
- (SInt32) cmdId {
  return result.cmdId;
}
- (C2MFileReqBuilder*) setCmdId:(SInt32) value {
  result.hasCmdId = YES;
  result.cmdId = value;
  return self;
}
- (C2MFileReqBuilder*) clearCmdId {
  result.hasCmdId = NO;
  result.cmdId = 520;
  return self;
}
- (BOOL) hasFromUserId {
  return result.hasFromUserId;
}
- (NSString*) fromUserId {
  return result.fromUserId;
}
- (C2MFileReqBuilder*) setFromUserId:(NSString*) value {
  result.hasFromUserId = YES;
  result.fromUserId = value;
  return self;
}
- (C2MFileReqBuilder*) clearFromUserId {
  result.hasFromUserId = NO;
  result.fromUserId = @"";
  return self;
}
- (BOOL) hasToUserId {
  return result.hasToUserId;
}
- (NSString*) toUserId {
  return result.toUserId;
}
- (C2MFileReqBuilder*) setToUserId:(NSString*) value {
  result.hasToUserId = YES;
  result.toUserId = value;
  return self;
}
- (C2MFileReqBuilder*) clearToUserId {
  result.hasToUserId = NO;
  result.toUserId = @"";
  return self;
}
- (BOOL) hasFileName {
  return result.hasFileName;
}
- (NSString*) fileName {
  return result.fileName;
}
- (C2MFileReqBuilder*) setFileName:(NSString*) value {
  result.hasFileName = YES;
  result.fileName = value;
  return self;
}
- (C2MFileReqBuilder*) clearFileName {
  result.hasFileName = NO;
  result.fileName = @"";
  return self;
}
- (BOOL) hasFileSize {
  return result.hasFileSize;
}
- (UInt32) fileSize {
  return result.fileSize;
}
- (C2MFileReqBuilder*) setFileSize:(UInt32) value {
  result.hasFileSize = YES;
  result.fileSize = value;
  return self;
}
- (C2MFileReqBuilder*) clearFileSize {
  result.hasFileSize = NO;
  result.fileSize = 0;
  return self;
}
@end

@interface C2MFileRsp ()
@property SInt32 cmdId;
@property (strong) NSString* fromUserId;
@property (strong) NSString* toUserId;
@property (strong) NSString* fileName;
@property UInt32 acceptFlag;
@property (strong) NSString* listenIp;
@property UInt32 listenPort;
@end

@implementation C2MFileRsp

- (BOOL) hasCmdId {
  return !!hasCmdId_;
}
- (void) setHasCmdId:(BOOL) value_ {
  hasCmdId_ = !!value_;
}
@synthesize cmdId;
- (BOOL) hasFromUserId {
  return !!hasFromUserId_;
}
- (void) setHasFromUserId:(BOOL) value_ {
  hasFromUserId_ = !!value_;
}
@synthesize fromUserId;
- (BOOL) hasToUserId {
  return !!hasToUserId_;
}
- (void) setHasToUserId:(BOOL) value_ {
  hasToUserId_ = !!value_;
}
@synthesize toUserId;
- (BOOL) hasFileName {
  return !!hasFileName_;
}
- (void) setHasFileName:(BOOL) value_ {
  hasFileName_ = !!value_;
}
@synthesize fileName;
- (BOOL) hasAcceptFlag {
  return !!hasAcceptFlag_;
}
- (void) setHasAcceptFlag:(BOOL) value_ {
  hasAcceptFlag_ = !!value_;
}
@synthesize acceptFlag;
- (BOOL) hasListenIp {
  return !!hasListenIp_;
}
- (void) setHasListenIp:(BOOL) value_ {
  hasListenIp_ = !!value_;
}
@synthesize listenIp;
- (BOOL) hasListenPort {
  return !!hasListenPort_;
}
- (void) setHasListenPort:(BOOL) value_ {
  hasListenPort_ = !!value_;
}
@synthesize listenPort;
- (void) dealloc {
  self.fromUserId = nil;
  self.toUserId = nil;
  self.fileName = nil;
  self.listenIp = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.cmdId = 521;
    self.fromUserId = @"";
    self.toUserId = @"";
    self.fileName = @"";
    self.acceptFlag = 0;
    self.listenIp = @"";
    self.listenPort = 0;
  }
  return self;
}
static C2MFileRsp* defaultC2MFileRspInstance = nil;
+ (void) initialize {
  if (self == [C2MFileRsp class]) {
    defaultC2MFileRspInstance = [[C2MFileRsp alloc] init];
  }
}
+ (C2MFileRsp*) defaultInstance {
  return defaultC2MFileRspInstance;
}
- (C2MFileRsp*) defaultInstance {
  return defaultC2MFileRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasFromUserId) {
    return NO;
  }
  if (!self.hasToUserId) {
    return NO;
  }
  if (!self.hasFileName) {
    return NO;
  }
  if (!self.hasAcceptFlag) {
    return NO;
  }
  if (!self.hasListenIp) {
    return NO;
  }
  if (!self.hasListenPort) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCmdId) {
    [output writeInt32:1 value:self.cmdId];
  }
  if (self.hasFromUserId) {
    [output writeString:2 value:self.fromUserId];
  }
  if (self.hasToUserId) {
    [output writeString:3 value:self.toUserId];
  }
  if (self.hasFileName) {
    [output writeString:4 value:self.fileName];
  }
  if (self.hasAcceptFlag) {
    [output writeUInt32:5 value:self.acceptFlag];
  }
  if (self.hasListenIp) {
    [output writeString:6 value:self.listenIp];
  }
  if (self.hasListenPort) {
    [output writeUInt32:7 value:self.listenPort];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCmdId) {
    size_ += computeInt32Size(1, self.cmdId);
  }
  if (self.hasFromUserId) {
    size_ += computeStringSize(2, self.fromUserId);
  }
  if (self.hasToUserId) {
    size_ += computeStringSize(3, self.toUserId);
  }
  if (self.hasFileName) {
    size_ += computeStringSize(4, self.fileName);
  }
  if (self.hasAcceptFlag) {
    size_ += computeUInt32Size(5, self.acceptFlag);
  }
  if (self.hasListenIp) {
    size_ += computeStringSize(6, self.listenIp);
  }
  if (self.hasListenPort) {
    size_ += computeUInt32Size(7, self.listenPort);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (C2MFileRsp*) parseFromData:(NSData*) data {
  return (C2MFileRsp*)[[[C2MFileRsp builder] mergeFromData:data] build];
}
+ (C2MFileRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (C2MFileRsp*)[[[C2MFileRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (C2MFileRsp*) parseFromInputStream:(NSInputStream*) input {
  return (C2MFileRsp*)[[[C2MFileRsp builder] mergeFromInputStream:input] build];
}
+ (C2MFileRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (C2MFileRsp*)[[[C2MFileRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (C2MFileRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (C2MFileRsp*)[[[C2MFileRsp builder] mergeFromCodedInputStream:input] build];
}
+ (C2MFileRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (C2MFileRsp*)[[[C2MFileRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (C2MFileRspBuilder*) builder {
  return [[C2MFileRspBuilder alloc] init];
}
+ (C2MFileRspBuilder*) builderWithPrototype:(C2MFileRsp*) prototype {
  return [[C2MFileRsp builder] mergeFrom:prototype];
}
- (C2MFileRspBuilder*) builder {
  return [C2MFileRsp builder];
}
- (C2MFileRspBuilder*) toBuilder {
  return [C2MFileRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCmdId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cmdId", [NSNumber numberWithInteger:self.cmdId]];
  }
  if (self.hasFromUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromUserId", self.fromUserId];
  }
  if (self.hasToUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"toUserId", self.toUserId];
  }
  if (self.hasFileName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fileName", self.fileName];
  }
  if (self.hasAcceptFlag) {
    [output appendFormat:@"%@%@: %@\n", indent, @"acceptFlag", [NSNumber numberWithInteger:self.acceptFlag]];
  }
  if (self.hasListenIp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"listenIp", self.listenIp];
  }
  if (self.hasListenPort) {
    [output appendFormat:@"%@%@: %@\n", indent, @"listenPort", [NSNumber numberWithInteger:self.listenPort]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[C2MFileRsp class]]) {
    return NO;
  }
  C2MFileRsp *otherMessage = other;
  return
      self.hasCmdId == otherMessage.hasCmdId &&
      (!self.hasCmdId || self.cmdId == otherMessage.cmdId) &&
      self.hasFromUserId == otherMessage.hasFromUserId &&
      (!self.hasFromUserId || [self.fromUserId isEqual:otherMessage.fromUserId]) &&
      self.hasToUserId == otherMessage.hasToUserId &&
      (!self.hasToUserId || [self.toUserId isEqual:otherMessage.toUserId]) &&
      self.hasFileName == otherMessage.hasFileName &&
      (!self.hasFileName || [self.fileName isEqual:otherMessage.fileName]) &&
      self.hasAcceptFlag == otherMessage.hasAcceptFlag &&
      (!self.hasAcceptFlag || self.acceptFlag == otherMessage.acceptFlag) &&
      self.hasListenIp == otherMessage.hasListenIp &&
      (!self.hasListenIp || [self.listenIp isEqual:otherMessage.listenIp]) &&
      self.hasListenPort == otherMessage.hasListenPort &&
      (!self.hasListenPort || self.listenPort == otherMessage.listenPort) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCmdId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.cmdId] hash];
  }
  if (self.hasFromUserId) {
    hashCode = hashCode * 31 + [self.fromUserId hash];
  }
  if (self.hasToUserId) {
    hashCode = hashCode * 31 + [self.toUserId hash];
  }
  if (self.hasFileName) {
    hashCode = hashCode * 31 + [self.fileName hash];
  }
  if (self.hasAcceptFlag) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.acceptFlag] hash];
  }
  if (self.hasListenIp) {
    hashCode = hashCode * 31 + [self.listenIp hash];
  }
  if (self.hasListenPort) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.listenPort] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface C2MFileRspBuilder()
@property (strong) C2MFileRsp* result;
@end

@implementation C2MFileRspBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[C2MFileRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (C2MFileRspBuilder*) clear {
  self.result = [[C2MFileRsp alloc] init];
  return self;
}
- (C2MFileRspBuilder*) clone {
  return [C2MFileRsp builderWithPrototype:result];
}
- (C2MFileRsp*) defaultInstance {
  return [C2MFileRsp defaultInstance];
}
- (C2MFileRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (C2MFileRsp*) buildPartial {
  C2MFileRsp* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (C2MFileRspBuilder*) mergeFrom:(C2MFileRsp*) other {
  if (other == [C2MFileRsp defaultInstance]) {
    return self;
  }
  if (other.hasCmdId) {
    [self setCmdId:other.cmdId];
  }
  if (other.hasFromUserId) {
    [self setFromUserId:other.fromUserId];
  }
  if (other.hasToUserId) {
    [self setToUserId:other.toUserId];
  }
  if (other.hasFileName) {
    [self setFileName:other.fileName];
  }
  if (other.hasAcceptFlag) {
    [self setAcceptFlag:other.acceptFlag];
  }
  if (other.hasListenIp) {
    [self setListenIp:other.listenIp];
  }
  if (other.hasListenPort) {
    [self setListenPort:other.listenPort];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (C2MFileRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (C2MFileRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setCmdId:[input readInt32]];
        break;
      }
      case 18: {
        [self setFromUserId:[input readString]];
        break;
      }
      case 26: {
        [self setToUserId:[input readString]];
        break;
      }
      case 34: {
        [self setFileName:[input readString]];
        break;
      }
      case 40: {
        [self setAcceptFlag:[input readUInt32]];
        break;
      }
      case 50: {
        [self setListenIp:[input readString]];
        break;
      }
      case 56: {
        [self setListenPort:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasCmdId {
  return result.hasCmdId;
}
- (SInt32) cmdId {
  return result.cmdId;
}
- (C2MFileRspBuilder*) setCmdId:(SInt32) value {
  result.hasCmdId = YES;
  result.cmdId = value;
  return self;
}
- (C2MFileRspBuilder*) clearCmdId {
  result.hasCmdId = NO;
  result.cmdId = 521;
  return self;
}
- (BOOL) hasFromUserId {
  return result.hasFromUserId;
}
- (NSString*) fromUserId {
  return result.fromUserId;
}
- (C2MFileRspBuilder*) setFromUserId:(NSString*) value {
  result.hasFromUserId = YES;
  result.fromUserId = value;
  return self;
}
- (C2MFileRspBuilder*) clearFromUserId {
  result.hasFromUserId = NO;
  result.fromUserId = @"";
  return self;
}
- (BOOL) hasToUserId {
  return result.hasToUserId;
}
- (NSString*) toUserId {
  return result.toUserId;
}
- (C2MFileRspBuilder*) setToUserId:(NSString*) value {
  result.hasToUserId = YES;
  result.toUserId = value;
  return self;
}
- (C2MFileRspBuilder*) clearToUserId {
  result.hasToUserId = NO;
  result.toUserId = @"";
  return self;
}
- (BOOL) hasFileName {
  return result.hasFileName;
}
- (NSString*) fileName {
  return result.fileName;
}
- (C2MFileRspBuilder*) setFileName:(NSString*) value {
  result.hasFileName = YES;
  result.fileName = value;
  return self;
}
- (C2MFileRspBuilder*) clearFileName {
  result.hasFileName = NO;
  result.fileName = @"";
  return self;
}
- (BOOL) hasAcceptFlag {
  return result.hasAcceptFlag;
}
- (UInt32) acceptFlag {
  return result.acceptFlag;
}
- (C2MFileRspBuilder*) setAcceptFlag:(UInt32) value {
  result.hasAcceptFlag = YES;
  result.acceptFlag = value;
  return self;
}
- (C2MFileRspBuilder*) clearAcceptFlag {
  result.hasAcceptFlag = NO;
  result.acceptFlag = 0;
  return self;
}
- (BOOL) hasListenIp {
  return result.hasListenIp;
}
- (NSString*) listenIp {
  return result.listenIp;
}
- (C2MFileRspBuilder*) setListenIp:(NSString*) value {
  result.hasListenIp = YES;
  result.listenIp = value;
  return self;
}
- (C2MFileRspBuilder*) clearListenIp {
  result.hasListenIp = NO;
  result.listenIp = @"";
  return self;
}
- (BOOL) hasListenPort {
  return result.hasListenPort;
}
- (UInt32) listenPort {
  return result.listenPort;
}
- (C2MFileRspBuilder*) setListenPort:(UInt32) value {
  result.hasListenPort = YES;
  result.listenPort = value;
  return self;
}
- (C2MFileRspBuilder*) clearListenPort {
  result.hasListenPort = NO;
  result.listenPort = 0;
  return self;
}
@end

@interface C2MFileRecvReady ()
@property SInt32 cmdId;
@property (strong) NSString* fromUserId;
@property (strong) NSString* toUserId;
@end

@implementation C2MFileRecvReady

- (BOOL) hasCmdId {
  return !!hasCmdId_;
}
- (void) setHasCmdId:(BOOL) value_ {
  hasCmdId_ = !!value_;
}
@synthesize cmdId;
- (BOOL) hasFromUserId {
  return !!hasFromUserId_;
}
- (void) setHasFromUserId:(BOOL) value_ {
  hasFromUserId_ = !!value_;
}
@synthesize fromUserId;
- (BOOL) hasToUserId {
  return !!hasToUserId_;
}
- (void) setHasToUserId:(BOOL) value_ {
  hasToUserId_ = !!value_;
}
@synthesize toUserId;
- (void) dealloc {
  self.fromUserId = nil;
  self.toUserId = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.cmdId = 522;
    self.fromUserId = @"";
    self.toUserId = @"";
  }
  return self;
}
static C2MFileRecvReady* defaultC2MFileRecvReadyInstance = nil;
+ (void) initialize {
  if (self == [C2MFileRecvReady class]) {
    defaultC2MFileRecvReadyInstance = [[C2MFileRecvReady alloc] init];
  }
}
+ (C2MFileRecvReady*) defaultInstance {
  return defaultC2MFileRecvReadyInstance;
}
- (C2MFileRecvReady*) defaultInstance {
  return defaultC2MFileRecvReadyInstance;
}
- (BOOL) isInitialized {
  if (!self.hasFromUserId) {
    return NO;
  }
  if (!self.hasToUserId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCmdId) {
    [output writeInt32:1 value:self.cmdId];
  }
  if (self.hasFromUserId) {
    [output writeString:2 value:self.fromUserId];
  }
  if (self.hasToUserId) {
    [output writeString:3 value:self.toUserId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCmdId) {
    size_ += computeInt32Size(1, self.cmdId);
  }
  if (self.hasFromUserId) {
    size_ += computeStringSize(2, self.fromUserId);
  }
  if (self.hasToUserId) {
    size_ += computeStringSize(3, self.toUserId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (C2MFileRecvReady*) parseFromData:(NSData*) data {
  return (C2MFileRecvReady*)[[[C2MFileRecvReady builder] mergeFromData:data] build];
}
+ (C2MFileRecvReady*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (C2MFileRecvReady*)[[[C2MFileRecvReady builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (C2MFileRecvReady*) parseFromInputStream:(NSInputStream*) input {
  return (C2MFileRecvReady*)[[[C2MFileRecvReady builder] mergeFromInputStream:input] build];
}
+ (C2MFileRecvReady*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (C2MFileRecvReady*)[[[C2MFileRecvReady builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (C2MFileRecvReady*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (C2MFileRecvReady*)[[[C2MFileRecvReady builder] mergeFromCodedInputStream:input] build];
}
+ (C2MFileRecvReady*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (C2MFileRecvReady*)[[[C2MFileRecvReady builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (C2MFileRecvReadyBuilder*) builder {
  return [[C2MFileRecvReadyBuilder alloc] init];
}
+ (C2MFileRecvReadyBuilder*) builderWithPrototype:(C2MFileRecvReady*) prototype {
  return [[C2MFileRecvReady builder] mergeFrom:prototype];
}
- (C2MFileRecvReadyBuilder*) builder {
  return [C2MFileRecvReady builder];
}
- (C2MFileRecvReadyBuilder*) toBuilder {
  return [C2MFileRecvReady builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCmdId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cmdId", [NSNumber numberWithInteger:self.cmdId]];
  }
  if (self.hasFromUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromUserId", self.fromUserId];
  }
  if (self.hasToUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"toUserId", self.toUserId];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[C2MFileRecvReady class]]) {
    return NO;
  }
  C2MFileRecvReady *otherMessage = other;
  return
      self.hasCmdId == otherMessage.hasCmdId &&
      (!self.hasCmdId || self.cmdId == otherMessage.cmdId) &&
      self.hasFromUserId == otherMessage.hasFromUserId &&
      (!self.hasFromUserId || [self.fromUserId isEqual:otherMessage.fromUserId]) &&
      self.hasToUserId == otherMessage.hasToUserId &&
      (!self.hasToUserId || [self.toUserId isEqual:otherMessage.toUserId]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCmdId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.cmdId] hash];
  }
  if (self.hasFromUserId) {
    hashCode = hashCode * 31 + [self.fromUserId hash];
  }
  if (self.hasToUserId) {
    hashCode = hashCode * 31 + [self.toUserId hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface C2MFileRecvReadyBuilder()
@property (strong) C2MFileRecvReady* result;
@end

@implementation C2MFileRecvReadyBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[C2MFileRecvReady alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (C2MFileRecvReadyBuilder*) clear {
  self.result = [[C2MFileRecvReady alloc] init];
  return self;
}
- (C2MFileRecvReadyBuilder*) clone {
  return [C2MFileRecvReady builderWithPrototype:result];
}
- (C2MFileRecvReady*) defaultInstance {
  return [C2MFileRecvReady defaultInstance];
}
- (C2MFileRecvReady*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (C2MFileRecvReady*) buildPartial {
  C2MFileRecvReady* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (C2MFileRecvReadyBuilder*) mergeFrom:(C2MFileRecvReady*) other {
  if (other == [C2MFileRecvReady defaultInstance]) {
    return self;
  }
  if (other.hasCmdId) {
    [self setCmdId:other.cmdId];
  }
  if (other.hasFromUserId) {
    [self setFromUserId:other.fromUserId];
  }
  if (other.hasToUserId) {
    [self setToUserId:other.toUserId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (C2MFileRecvReadyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (C2MFileRecvReadyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setCmdId:[input readInt32]];
        break;
      }
      case 18: {
        [self setFromUserId:[input readString]];
        break;
      }
      case 26: {
        [self setToUserId:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasCmdId {
  return result.hasCmdId;
}
- (SInt32) cmdId {
  return result.cmdId;
}
- (C2MFileRecvReadyBuilder*) setCmdId:(SInt32) value {
  result.hasCmdId = YES;
  result.cmdId = value;
  return self;
}
- (C2MFileRecvReadyBuilder*) clearCmdId {
  result.hasCmdId = NO;
  result.cmdId = 522;
  return self;
}
- (BOOL) hasFromUserId {
  return result.hasFromUserId;
}
- (NSString*) fromUserId {
  return result.fromUserId;
}
- (C2MFileRecvReadyBuilder*) setFromUserId:(NSString*) value {
  result.hasFromUserId = YES;
  result.fromUserId = value;
  return self;
}
- (C2MFileRecvReadyBuilder*) clearFromUserId {
  result.hasFromUserId = NO;
  result.fromUserId = @"";
  return self;
}
- (BOOL) hasToUserId {
  return result.hasToUserId;
}
- (NSString*) toUserId {
  return result.toUserId;
}
- (C2MFileRecvReadyBuilder*) setToUserId:(NSString*) value {
  result.hasToUserId = YES;
  result.toUserId = value;
  return self;
}
- (C2MFileRecvReadyBuilder*) clearToUserId {
  result.hasToUserId = NO;
  result.toUserId = @"";
  return self;
}
@end

@interface C2MFileAbort ()
@property SInt32 cmdId;
@property (strong) NSString* fromUserId;
@property (strong) NSString* toUserId;
@property (strong) NSString* filePath;
@end

@implementation C2MFileAbort

- (BOOL) hasCmdId {
  return !!hasCmdId_;
}
- (void) setHasCmdId:(BOOL) value_ {
  hasCmdId_ = !!value_;
}
@synthesize cmdId;
- (BOOL) hasFromUserId {
  return !!hasFromUserId_;
}
- (void) setHasFromUserId:(BOOL) value_ {
  hasFromUserId_ = !!value_;
}
@synthesize fromUserId;
- (BOOL) hasToUserId {
  return !!hasToUserId_;
}
- (void) setHasToUserId:(BOOL) value_ {
  hasToUserId_ = !!value_;
}
@synthesize toUserId;
- (BOOL) hasFilePath {
  return !!hasFilePath_;
}
- (void) setHasFilePath:(BOOL) value_ {
  hasFilePath_ = !!value_;
}
@synthesize filePath;
- (void) dealloc {
  self.fromUserId = nil;
  self.toUserId = nil;
  self.filePath = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.cmdId = 523;
    self.fromUserId = @"";
    self.toUserId = @"";
    self.filePath = @"";
  }
  return self;
}
static C2MFileAbort* defaultC2MFileAbortInstance = nil;
+ (void) initialize {
  if (self == [C2MFileAbort class]) {
    defaultC2MFileAbortInstance = [[C2MFileAbort alloc] init];
  }
}
+ (C2MFileAbort*) defaultInstance {
  return defaultC2MFileAbortInstance;
}
- (C2MFileAbort*) defaultInstance {
  return defaultC2MFileAbortInstance;
}
- (BOOL) isInitialized {
  if (!self.hasFromUserId) {
    return NO;
  }
  if (!self.hasToUserId) {
    return NO;
  }
  if (!self.hasFilePath) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCmdId) {
    [output writeInt32:1 value:self.cmdId];
  }
  if (self.hasFromUserId) {
    [output writeString:2 value:self.fromUserId];
  }
  if (self.hasToUserId) {
    [output writeString:3 value:self.toUserId];
  }
  if (self.hasFilePath) {
    [output writeString:4 value:self.filePath];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCmdId) {
    size_ += computeInt32Size(1, self.cmdId);
  }
  if (self.hasFromUserId) {
    size_ += computeStringSize(2, self.fromUserId);
  }
  if (self.hasToUserId) {
    size_ += computeStringSize(3, self.toUserId);
  }
  if (self.hasFilePath) {
    size_ += computeStringSize(4, self.filePath);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (C2MFileAbort*) parseFromData:(NSData*) data {
  return (C2MFileAbort*)[[[C2MFileAbort builder] mergeFromData:data] build];
}
+ (C2MFileAbort*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (C2MFileAbort*)[[[C2MFileAbort builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (C2MFileAbort*) parseFromInputStream:(NSInputStream*) input {
  return (C2MFileAbort*)[[[C2MFileAbort builder] mergeFromInputStream:input] build];
}
+ (C2MFileAbort*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (C2MFileAbort*)[[[C2MFileAbort builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (C2MFileAbort*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (C2MFileAbort*)[[[C2MFileAbort builder] mergeFromCodedInputStream:input] build];
}
+ (C2MFileAbort*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (C2MFileAbort*)[[[C2MFileAbort builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (C2MFileAbortBuilder*) builder {
  return [[C2MFileAbortBuilder alloc] init];
}
+ (C2MFileAbortBuilder*) builderWithPrototype:(C2MFileAbort*) prototype {
  return [[C2MFileAbort builder] mergeFrom:prototype];
}
- (C2MFileAbortBuilder*) builder {
  return [C2MFileAbort builder];
}
- (C2MFileAbortBuilder*) toBuilder {
  return [C2MFileAbort builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCmdId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cmdId", [NSNumber numberWithInteger:self.cmdId]];
  }
  if (self.hasFromUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromUserId", self.fromUserId];
  }
  if (self.hasToUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"toUserId", self.toUserId];
  }
  if (self.hasFilePath) {
    [output appendFormat:@"%@%@: %@\n", indent, @"filePath", self.filePath];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[C2MFileAbort class]]) {
    return NO;
  }
  C2MFileAbort *otherMessage = other;
  return
      self.hasCmdId == otherMessage.hasCmdId &&
      (!self.hasCmdId || self.cmdId == otherMessage.cmdId) &&
      self.hasFromUserId == otherMessage.hasFromUserId &&
      (!self.hasFromUserId || [self.fromUserId isEqual:otherMessage.fromUserId]) &&
      self.hasToUserId == otherMessage.hasToUserId &&
      (!self.hasToUserId || [self.toUserId isEqual:otherMessage.toUserId]) &&
      self.hasFilePath == otherMessage.hasFilePath &&
      (!self.hasFilePath || [self.filePath isEqual:otherMessage.filePath]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCmdId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.cmdId] hash];
  }
  if (self.hasFromUserId) {
    hashCode = hashCode * 31 + [self.fromUserId hash];
  }
  if (self.hasToUserId) {
    hashCode = hashCode * 31 + [self.toUserId hash];
  }
  if (self.hasFilePath) {
    hashCode = hashCode * 31 + [self.filePath hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface C2MFileAbortBuilder()
@property (strong) C2MFileAbort* result;
@end

@implementation C2MFileAbortBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[C2MFileAbort alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (C2MFileAbortBuilder*) clear {
  self.result = [[C2MFileAbort alloc] init];
  return self;
}
- (C2MFileAbortBuilder*) clone {
  return [C2MFileAbort builderWithPrototype:result];
}
- (C2MFileAbort*) defaultInstance {
  return [C2MFileAbort defaultInstance];
}
- (C2MFileAbort*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (C2MFileAbort*) buildPartial {
  C2MFileAbort* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (C2MFileAbortBuilder*) mergeFrom:(C2MFileAbort*) other {
  if (other == [C2MFileAbort defaultInstance]) {
    return self;
  }
  if (other.hasCmdId) {
    [self setCmdId:other.cmdId];
  }
  if (other.hasFromUserId) {
    [self setFromUserId:other.fromUserId];
  }
  if (other.hasToUserId) {
    [self setToUserId:other.toUserId];
  }
  if (other.hasFilePath) {
    [self setFilePath:other.filePath];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (C2MFileAbortBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (C2MFileAbortBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setCmdId:[input readInt32]];
        break;
      }
      case 18: {
        [self setFromUserId:[input readString]];
        break;
      }
      case 26: {
        [self setToUserId:[input readString]];
        break;
      }
      case 34: {
        [self setFilePath:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasCmdId {
  return result.hasCmdId;
}
- (SInt32) cmdId {
  return result.cmdId;
}
- (C2MFileAbortBuilder*) setCmdId:(SInt32) value {
  result.hasCmdId = YES;
  result.cmdId = value;
  return self;
}
- (C2MFileAbortBuilder*) clearCmdId {
  result.hasCmdId = NO;
  result.cmdId = 523;
  return self;
}
- (BOOL) hasFromUserId {
  return result.hasFromUserId;
}
- (NSString*) fromUserId {
  return result.fromUserId;
}
- (C2MFileAbortBuilder*) setFromUserId:(NSString*) value {
  result.hasFromUserId = YES;
  result.fromUserId = value;
  return self;
}
- (C2MFileAbortBuilder*) clearFromUserId {
  result.hasFromUserId = NO;
  result.fromUserId = @"";
  return self;
}
- (BOOL) hasToUserId {
  return result.hasToUserId;
}
- (NSString*) toUserId {
  return result.toUserId;
}
- (C2MFileAbortBuilder*) setToUserId:(NSString*) value {
  result.hasToUserId = YES;
  result.toUserId = value;
  return self;
}
- (C2MFileAbortBuilder*) clearToUserId {
  result.hasToUserId = NO;
  result.toUserId = @"";
  return self;
}
- (BOOL) hasFilePath {
  return result.hasFilePath;
}
- (NSString*) filePath {
  return result.filePath;
}
- (C2MFileAbortBuilder*) setFilePath:(NSString*) value {
  result.hasFilePath = YES;
  result.filePath = value;
  return self;
}
- (C2MFileAbortBuilder*) clearFilePath {
  result.hasFilePath = NO;
  result.filePath = @"";
  return self;
}
@end

@interface C2MFileDownloadOfflineNotify ()
@property SInt32 cmdId;
@property (strong) NSString* fromUserId;
@property (strong) NSString* toUserId;
@property (strong) NSString* filePath;
@property (strong) NSString* savePath;
@end

@implementation C2MFileDownloadOfflineNotify

- (BOOL) hasCmdId {
  return !!hasCmdId_;
}
- (void) setHasCmdId:(BOOL) value_ {
  hasCmdId_ = !!value_;
}
@synthesize cmdId;
- (BOOL) hasFromUserId {
  return !!hasFromUserId_;
}
- (void) setHasFromUserId:(BOOL) value_ {
  hasFromUserId_ = !!value_;
}
@synthesize fromUserId;
- (BOOL) hasToUserId {
  return !!hasToUserId_;
}
- (void) setHasToUserId:(BOOL) value_ {
  hasToUserId_ = !!value_;
}
@synthesize toUserId;
- (BOOL) hasFilePath {
  return !!hasFilePath_;
}
- (void) setHasFilePath:(BOOL) value_ {
  hasFilePath_ = !!value_;
}
@synthesize filePath;
- (BOOL) hasSavePath {
  return !!hasSavePath_;
}
- (void) setHasSavePath:(BOOL) value_ {
  hasSavePath_ = !!value_;
}
@synthesize savePath;
- (void) dealloc {
  self.fromUserId = nil;
  self.toUserId = nil;
  self.filePath = nil;
  self.savePath = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.cmdId = 524;
    self.fromUserId = @"";
    self.toUserId = @"";
    self.filePath = @"";
    self.savePath = @"";
  }
  return self;
}
static C2MFileDownloadOfflineNotify* defaultC2MFileDownloadOfflineNotifyInstance = nil;
+ (void) initialize {
  if (self == [C2MFileDownloadOfflineNotify class]) {
    defaultC2MFileDownloadOfflineNotifyInstance = [[C2MFileDownloadOfflineNotify alloc] init];
  }
}
+ (C2MFileDownloadOfflineNotify*) defaultInstance {
  return defaultC2MFileDownloadOfflineNotifyInstance;
}
- (C2MFileDownloadOfflineNotify*) defaultInstance {
  return defaultC2MFileDownloadOfflineNotifyInstance;
}
- (BOOL) isInitialized {
  if (!self.hasFromUserId) {
    return NO;
  }
  if (!self.hasToUserId) {
    return NO;
  }
  if (!self.hasFilePath) {
    return NO;
  }
  if (!self.hasSavePath) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCmdId) {
    [output writeInt32:1 value:self.cmdId];
  }
  if (self.hasFromUserId) {
    [output writeString:2 value:self.fromUserId];
  }
  if (self.hasToUserId) {
    [output writeString:3 value:self.toUserId];
  }
  if (self.hasFilePath) {
    [output writeString:4 value:self.filePath];
  }
  if (self.hasSavePath) {
    [output writeString:5 value:self.savePath];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCmdId) {
    size_ += computeInt32Size(1, self.cmdId);
  }
  if (self.hasFromUserId) {
    size_ += computeStringSize(2, self.fromUserId);
  }
  if (self.hasToUserId) {
    size_ += computeStringSize(3, self.toUserId);
  }
  if (self.hasFilePath) {
    size_ += computeStringSize(4, self.filePath);
  }
  if (self.hasSavePath) {
    size_ += computeStringSize(5, self.savePath);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (C2MFileDownloadOfflineNotify*) parseFromData:(NSData*) data {
  return (C2MFileDownloadOfflineNotify*)[[[C2MFileDownloadOfflineNotify builder] mergeFromData:data] build];
}
+ (C2MFileDownloadOfflineNotify*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (C2MFileDownloadOfflineNotify*)[[[C2MFileDownloadOfflineNotify builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (C2MFileDownloadOfflineNotify*) parseFromInputStream:(NSInputStream*) input {
  return (C2MFileDownloadOfflineNotify*)[[[C2MFileDownloadOfflineNotify builder] mergeFromInputStream:input] build];
}
+ (C2MFileDownloadOfflineNotify*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (C2MFileDownloadOfflineNotify*)[[[C2MFileDownloadOfflineNotify builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (C2MFileDownloadOfflineNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (C2MFileDownloadOfflineNotify*)[[[C2MFileDownloadOfflineNotify builder] mergeFromCodedInputStream:input] build];
}
+ (C2MFileDownloadOfflineNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (C2MFileDownloadOfflineNotify*)[[[C2MFileDownloadOfflineNotify builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (C2MFileDownloadOfflineNotifyBuilder*) builder {
  return [[C2MFileDownloadOfflineNotifyBuilder alloc] init];
}
+ (C2MFileDownloadOfflineNotifyBuilder*) builderWithPrototype:(C2MFileDownloadOfflineNotify*) prototype {
  return [[C2MFileDownloadOfflineNotify builder] mergeFrom:prototype];
}
- (C2MFileDownloadOfflineNotifyBuilder*) builder {
  return [C2MFileDownloadOfflineNotify builder];
}
- (C2MFileDownloadOfflineNotifyBuilder*) toBuilder {
  return [C2MFileDownloadOfflineNotify builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCmdId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cmdId", [NSNumber numberWithInteger:self.cmdId]];
  }
  if (self.hasFromUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromUserId", self.fromUserId];
  }
  if (self.hasToUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"toUserId", self.toUserId];
  }
  if (self.hasFilePath) {
    [output appendFormat:@"%@%@: %@\n", indent, @"filePath", self.filePath];
  }
  if (self.hasSavePath) {
    [output appendFormat:@"%@%@: %@\n", indent, @"savePath", self.savePath];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[C2MFileDownloadOfflineNotify class]]) {
    return NO;
  }
  C2MFileDownloadOfflineNotify *otherMessage = other;
  return
      self.hasCmdId == otherMessage.hasCmdId &&
      (!self.hasCmdId || self.cmdId == otherMessage.cmdId) &&
      self.hasFromUserId == otherMessage.hasFromUserId &&
      (!self.hasFromUserId || [self.fromUserId isEqual:otherMessage.fromUserId]) &&
      self.hasToUserId == otherMessage.hasToUserId &&
      (!self.hasToUserId || [self.toUserId isEqual:otherMessage.toUserId]) &&
      self.hasFilePath == otherMessage.hasFilePath &&
      (!self.hasFilePath || [self.filePath isEqual:otherMessage.filePath]) &&
      self.hasSavePath == otherMessage.hasSavePath &&
      (!self.hasSavePath || [self.savePath isEqual:otherMessage.savePath]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCmdId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.cmdId] hash];
  }
  if (self.hasFromUserId) {
    hashCode = hashCode * 31 + [self.fromUserId hash];
  }
  if (self.hasToUserId) {
    hashCode = hashCode * 31 + [self.toUserId hash];
  }
  if (self.hasFilePath) {
    hashCode = hashCode * 31 + [self.filePath hash];
  }
  if (self.hasSavePath) {
    hashCode = hashCode * 31 + [self.savePath hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface C2MFileDownloadOfflineNotifyBuilder()
@property (strong) C2MFileDownloadOfflineNotify* result;
@end

@implementation C2MFileDownloadOfflineNotifyBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[C2MFileDownloadOfflineNotify alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (C2MFileDownloadOfflineNotifyBuilder*) clear {
  self.result = [[C2MFileDownloadOfflineNotify alloc] init];
  return self;
}
- (C2MFileDownloadOfflineNotifyBuilder*) clone {
  return [C2MFileDownloadOfflineNotify builderWithPrototype:result];
}
- (C2MFileDownloadOfflineNotify*) defaultInstance {
  return [C2MFileDownloadOfflineNotify defaultInstance];
}
- (C2MFileDownloadOfflineNotify*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (C2MFileDownloadOfflineNotify*) buildPartial {
  C2MFileDownloadOfflineNotify* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (C2MFileDownloadOfflineNotifyBuilder*) mergeFrom:(C2MFileDownloadOfflineNotify*) other {
  if (other == [C2MFileDownloadOfflineNotify defaultInstance]) {
    return self;
  }
  if (other.hasCmdId) {
    [self setCmdId:other.cmdId];
  }
  if (other.hasFromUserId) {
    [self setFromUserId:other.fromUserId];
  }
  if (other.hasToUserId) {
    [self setToUserId:other.toUserId];
  }
  if (other.hasFilePath) {
    [self setFilePath:other.filePath];
  }
  if (other.hasSavePath) {
    [self setSavePath:other.savePath];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (C2MFileDownloadOfflineNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (C2MFileDownloadOfflineNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setCmdId:[input readInt32]];
        break;
      }
      case 18: {
        [self setFromUserId:[input readString]];
        break;
      }
      case 26: {
        [self setToUserId:[input readString]];
        break;
      }
      case 34: {
        [self setFilePath:[input readString]];
        break;
      }
      case 42: {
        [self setSavePath:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasCmdId {
  return result.hasCmdId;
}
- (SInt32) cmdId {
  return result.cmdId;
}
- (C2MFileDownloadOfflineNotifyBuilder*) setCmdId:(SInt32) value {
  result.hasCmdId = YES;
  result.cmdId = value;
  return self;
}
- (C2MFileDownloadOfflineNotifyBuilder*) clearCmdId {
  result.hasCmdId = NO;
  result.cmdId = 524;
  return self;
}
- (BOOL) hasFromUserId {
  return result.hasFromUserId;
}
- (NSString*) fromUserId {
  return result.fromUserId;
}
- (C2MFileDownloadOfflineNotifyBuilder*) setFromUserId:(NSString*) value {
  result.hasFromUserId = YES;
  result.fromUserId = value;
  return self;
}
- (C2MFileDownloadOfflineNotifyBuilder*) clearFromUserId {
  result.hasFromUserId = NO;
  result.fromUserId = @"";
  return self;
}
- (BOOL) hasToUserId {
  return result.hasToUserId;
}
- (NSString*) toUserId {
  return result.toUserId;
}
- (C2MFileDownloadOfflineNotifyBuilder*) setToUserId:(NSString*) value {
  result.hasToUserId = YES;
  result.toUserId = value;
  return self;
}
- (C2MFileDownloadOfflineNotifyBuilder*) clearToUserId {
  result.hasToUserId = NO;
  result.toUserId = @"";
  return self;
}
- (BOOL) hasFilePath {
  return result.hasFilePath;
}
- (NSString*) filePath {
  return result.filePath;
}
- (C2MFileDownloadOfflineNotifyBuilder*) setFilePath:(NSString*) value {
  result.hasFilePath = YES;
  result.filePath = value;
  return self;
}
- (C2MFileDownloadOfflineNotifyBuilder*) clearFilePath {
  result.hasFilePath = NO;
  result.filePath = @"";
  return self;
}
- (BOOL) hasSavePath {
  return result.hasSavePath;
}
- (NSString*) savePath {
  return result.savePath;
}
- (C2MFileDownloadOfflineNotifyBuilder*) setSavePath:(NSString*) value {
  result.hasSavePath = YES;
  result.savePath = value;
  return self;
}
- (C2MFileDownloadOfflineNotifyBuilder*) clearSavePath {
  result.hasSavePath = NO;
  result.savePath = @"";
  return self;
}
@end

@interface C2MFileUploadOfflineNotify ()
@property SInt32 cmdId;
@property (strong) NSString* fromUserId;
@property (strong) NSString* toUserId;
@property (strong) NSString* filePath;
@end

@implementation C2MFileUploadOfflineNotify

- (BOOL) hasCmdId {
  return !!hasCmdId_;
}
- (void) setHasCmdId:(BOOL) value_ {
  hasCmdId_ = !!value_;
}
@synthesize cmdId;
- (BOOL) hasFromUserId {
  return !!hasFromUserId_;
}
- (void) setHasFromUserId:(BOOL) value_ {
  hasFromUserId_ = !!value_;
}
@synthesize fromUserId;
- (BOOL) hasToUserId {
  return !!hasToUserId_;
}
- (void) setHasToUserId:(BOOL) value_ {
  hasToUserId_ = !!value_;
}
@synthesize toUserId;
- (BOOL) hasFilePath {
  return !!hasFilePath_;
}
- (void) setHasFilePath:(BOOL) value_ {
  hasFilePath_ = !!value_;
}
@synthesize filePath;
- (void) dealloc {
  self.fromUserId = nil;
  self.toUserId = nil;
  self.filePath = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.cmdId = 525;
    self.fromUserId = @"";
    self.toUserId = @"";
    self.filePath = @"";
  }
  return self;
}
static C2MFileUploadOfflineNotify* defaultC2MFileUploadOfflineNotifyInstance = nil;
+ (void) initialize {
  if (self == [C2MFileUploadOfflineNotify class]) {
    defaultC2MFileUploadOfflineNotifyInstance = [[C2MFileUploadOfflineNotify alloc] init];
  }
}
+ (C2MFileUploadOfflineNotify*) defaultInstance {
  return defaultC2MFileUploadOfflineNotifyInstance;
}
- (C2MFileUploadOfflineNotify*) defaultInstance {
  return defaultC2MFileUploadOfflineNotifyInstance;
}
- (BOOL) isInitialized {
  if (!self.hasFromUserId) {
    return NO;
  }
  if (!self.hasToUserId) {
    return NO;
  }
  if (!self.hasFilePath) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCmdId) {
    [output writeInt32:1 value:self.cmdId];
  }
  if (self.hasFromUserId) {
    [output writeString:2 value:self.fromUserId];
  }
  if (self.hasToUserId) {
    [output writeString:3 value:self.toUserId];
  }
  if (self.hasFilePath) {
    [output writeString:4 value:self.filePath];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCmdId) {
    size_ += computeInt32Size(1, self.cmdId);
  }
  if (self.hasFromUserId) {
    size_ += computeStringSize(2, self.fromUserId);
  }
  if (self.hasToUserId) {
    size_ += computeStringSize(3, self.toUserId);
  }
  if (self.hasFilePath) {
    size_ += computeStringSize(4, self.filePath);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (C2MFileUploadOfflineNotify*) parseFromData:(NSData*) data {
  return (C2MFileUploadOfflineNotify*)[[[C2MFileUploadOfflineNotify builder] mergeFromData:data] build];
}
+ (C2MFileUploadOfflineNotify*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (C2MFileUploadOfflineNotify*)[[[C2MFileUploadOfflineNotify builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (C2MFileUploadOfflineNotify*) parseFromInputStream:(NSInputStream*) input {
  return (C2MFileUploadOfflineNotify*)[[[C2MFileUploadOfflineNotify builder] mergeFromInputStream:input] build];
}
+ (C2MFileUploadOfflineNotify*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (C2MFileUploadOfflineNotify*)[[[C2MFileUploadOfflineNotify builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (C2MFileUploadOfflineNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (C2MFileUploadOfflineNotify*)[[[C2MFileUploadOfflineNotify builder] mergeFromCodedInputStream:input] build];
}
+ (C2MFileUploadOfflineNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (C2MFileUploadOfflineNotify*)[[[C2MFileUploadOfflineNotify builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (C2MFileUploadOfflineNotifyBuilder*) builder {
  return [[C2MFileUploadOfflineNotifyBuilder alloc] init];
}
+ (C2MFileUploadOfflineNotifyBuilder*) builderWithPrototype:(C2MFileUploadOfflineNotify*) prototype {
  return [[C2MFileUploadOfflineNotify builder] mergeFrom:prototype];
}
- (C2MFileUploadOfflineNotifyBuilder*) builder {
  return [C2MFileUploadOfflineNotify builder];
}
- (C2MFileUploadOfflineNotifyBuilder*) toBuilder {
  return [C2MFileUploadOfflineNotify builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCmdId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cmdId", [NSNumber numberWithInteger:self.cmdId]];
  }
  if (self.hasFromUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromUserId", self.fromUserId];
  }
  if (self.hasToUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"toUserId", self.toUserId];
  }
  if (self.hasFilePath) {
    [output appendFormat:@"%@%@: %@\n", indent, @"filePath", self.filePath];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[C2MFileUploadOfflineNotify class]]) {
    return NO;
  }
  C2MFileUploadOfflineNotify *otherMessage = other;
  return
      self.hasCmdId == otherMessage.hasCmdId &&
      (!self.hasCmdId || self.cmdId == otherMessage.cmdId) &&
      self.hasFromUserId == otherMessage.hasFromUserId &&
      (!self.hasFromUserId || [self.fromUserId isEqual:otherMessage.fromUserId]) &&
      self.hasToUserId == otherMessage.hasToUserId &&
      (!self.hasToUserId || [self.toUserId isEqual:otherMessage.toUserId]) &&
      self.hasFilePath == otherMessage.hasFilePath &&
      (!self.hasFilePath || [self.filePath isEqual:otherMessage.filePath]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCmdId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.cmdId] hash];
  }
  if (self.hasFromUserId) {
    hashCode = hashCode * 31 + [self.fromUserId hash];
  }
  if (self.hasToUserId) {
    hashCode = hashCode * 31 + [self.toUserId hash];
  }
  if (self.hasFilePath) {
    hashCode = hashCode * 31 + [self.filePath hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface C2MFileUploadOfflineNotifyBuilder()
@property (strong) C2MFileUploadOfflineNotify* result;
@end

@implementation C2MFileUploadOfflineNotifyBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[C2MFileUploadOfflineNotify alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (C2MFileUploadOfflineNotifyBuilder*) clear {
  self.result = [[C2MFileUploadOfflineNotify alloc] init];
  return self;
}
- (C2MFileUploadOfflineNotifyBuilder*) clone {
  return [C2MFileUploadOfflineNotify builderWithPrototype:result];
}
- (C2MFileUploadOfflineNotify*) defaultInstance {
  return [C2MFileUploadOfflineNotify defaultInstance];
}
- (C2MFileUploadOfflineNotify*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (C2MFileUploadOfflineNotify*) buildPartial {
  C2MFileUploadOfflineNotify* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (C2MFileUploadOfflineNotifyBuilder*) mergeFrom:(C2MFileUploadOfflineNotify*) other {
  if (other == [C2MFileUploadOfflineNotify defaultInstance]) {
    return self;
  }
  if (other.hasCmdId) {
    [self setCmdId:other.cmdId];
  }
  if (other.hasFromUserId) {
    [self setFromUserId:other.fromUserId];
  }
  if (other.hasToUserId) {
    [self setToUserId:other.toUserId];
  }
  if (other.hasFilePath) {
    [self setFilePath:other.filePath];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (C2MFileUploadOfflineNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (C2MFileUploadOfflineNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setCmdId:[input readInt32]];
        break;
      }
      case 18: {
        [self setFromUserId:[input readString]];
        break;
      }
      case 26: {
        [self setToUserId:[input readString]];
        break;
      }
      case 34: {
        [self setFilePath:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasCmdId {
  return result.hasCmdId;
}
- (SInt32) cmdId {
  return result.cmdId;
}
- (C2MFileUploadOfflineNotifyBuilder*) setCmdId:(SInt32) value {
  result.hasCmdId = YES;
  result.cmdId = value;
  return self;
}
- (C2MFileUploadOfflineNotifyBuilder*) clearCmdId {
  result.hasCmdId = NO;
  result.cmdId = 525;
  return self;
}
- (BOOL) hasFromUserId {
  return result.hasFromUserId;
}
- (NSString*) fromUserId {
  return result.fromUserId;
}
- (C2MFileUploadOfflineNotifyBuilder*) setFromUserId:(NSString*) value {
  result.hasFromUserId = YES;
  result.fromUserId = value;
  return self;
}
- (C2MFileUploadOfflineNotifyBuilder*) clearFromUserId {
  result.hasFromUserId = NO;
  result.fromUserId = @"";
  return self;
}
- (BOOL) hasToUserId {
  return result.hasToUserId;
}
- (NSString*) toUserId {
  return result.toUserId;
}
- (C2MFileUploadOfflineNotifyBuilder*) setToUserId:(NSString*) value {
  result.hasToUserId = YES;
  result.toUserId = value;
  return self;
}
- (C2MFileUploadOfflineNotifyBuilder*) clearToUserId {
  result.hasToUserId = NO;
  result.toUserId = @"";
  return self;
}
- (BOOL) hasFilePath {
  return result.hasFilePath;
}
- (NSString*) filePath {
  return result.filePath;
}
- (C2MFileUploadOfflineNotifyBuilder*) setFilePath:(NSString*) value {
  result.hasFilePath = YES;
  result.filePath = value;
  return self;
}
- (C2MFileUploadOfflineNotifyBuilder*) clearFilePath {
  result.hasFilePath = NO;
  result.filePath = @"";
  return self;
}
@end

@interface C2MFileHasOfflineReq ()
@property SInt32 cmdId;
@end

@implementation C2MFileHasOfflineReq

- (BOOL) hasCmdId {
  return !!hasCmdId_;
}
- (void) setHasCmdId:(BOOL) value_ {
  hasCmdId_ = !!value_;
}
@synthesize cmdId;
- (void) dealloc {
}
- (id) init {
  if ((self = [super init])) {
    self.cmdId = 526;
  }
  return self;
}
static C2MFileHasOfflineReq* defaultC2MFileHasOfflineReqInstance = nil;
+ (void) initialize {
  if (self == [C2MFileHasOfflineReq class]) {
    defaultC2MFileHasOfflineReqInstance = [[C2MFileHasOfflineReq alloc] init];
  }
}
+ (C2MFileHasOfflineReq*) defaultInstance {
  return defaultC2MFileHasOfflineReqInstance;
}
- (C2MFileHasOfflineReq*) defaultInstance {
  return defaultC2MFileHasOfflineReqInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCmdId) {
    [output writeInt32:1 value:self.cmdId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCmdId) {
    size_ += computeInt32Size(1, self.cmdId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (C2MFileHasOfflineReq*) parseFromData:(NSData*) data {
  return (C2MFileHasOfflineReq*)[[[C2MFileHasOfflineReq builder] mergeFromData:data] build];
}
+ (C2MFileHasOfflineReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (C2MFileHasOfflineReq*)[[[C2MFileHasOfflineReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (C2MFileHasOfflineReq*) parseFromInputStream:(NSInputStream*) input {
  return (C2MFileHasOfflineReq*)[[[C2MFileHasOfflineReq builder] mergeFromInputStream:input] build];
}
+ (C2MFileHasOfflineReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (C2MFileHasOfflineReq*)[[[C2MFileHasOfflineReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (C2MFileHasOfflineReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (C2MFileHasOfflineReq*)[[[C2MFileHasOfflineReq builder] mergeFromCodedInputStream:input] build];
}
+ (C2MFileHasOfflineReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (C2MFileHasOfflineReq*)[[[C2MFileHasOfflineReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (C2MFileHasOfflineReqBuilder*) builder {
  return [[C2MFileHasOfflineReqBuilder alloc] init];
}
+ (C2MFileHasOfflineReqBuilder*) builderWithPrototype:(C2MFileHasOfflineReq*) prototype {
  return [[C2MFileHasOfflineReq builder] mergeFrom:prototype];
}
- (C2MFileHasOfflineReqBuilder*) builder {
  return [C2MFileHasOfflineReq builder];
}
- (C2MFileHasOfflineReqBuilder*) toBuilder {
  return [C2MFileHasOfflineReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCmdId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cmdId", [NSNumber numberWithInteger:self.cmdId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[C2MFileHasOfflineReq class]]) {
    return NO;
  }
  C2MFileHasOfflineReq *otherMessage = other;
  return
      self.hasCmdId == otherMessage.hasCmdId &&
      (!self.hasCmdId || self.cmdId == otherMessage.cmdId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCmdId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.cmdId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface C2MFileHasOfflineReqBuilder()
@property (strong) C2MFileHasOfflineReq* result;
@end

@implementation C2MFileHasOfflineReqBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[C2MFileHasOfflineReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (C2MFileHasOfflineReqBuilder*) clear {
  self.result = [[C2MFileHasOfflineReq alloc] init];
  return self;
}
- (C2MFileHasOfflineReqBuilder*) clone {
  return [C2MFileHasOfflineReq builderWithPrototype:result];
}
- (C2MFileHasOfflineReq*) defaultInstance {
  return [C2MFileHasOfflineReq defaultInstance];
}
- (C2MFileHasOfflineReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (C2MFileHasOfflineReq*) buildPartial {
  C2MFileHasOfflineReq* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (C2MFileHasOfflineReqBuilder*) mergeFrom:(C2MFileHasOfflineReq*) other {
  if (other == [C2MFileHasOfflineReq defaultInstance]) {
    return self;
  }
  if (other.hasCmdId) {
    [self setCmdId:other.cmdId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (C2MFileHasOfflineReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (C2MFileHasOfflineReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setCmdId:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasCmdId {
  return result.hasCmdId;
}
- (SInt32) cmdId {
  return result.cmdId;
}
- (C2MFileHasOfflineReqBuilder*) setCmdId:(SInt32) value {
  result.hasCmdId = YES;
  result.cmdId = value;
  return self;
}
- (C2MFileHasOfflineReqBuilder*) clearCmdId {
  result.hasCmdId = NO;
  result.cmdId = 526;
  return self;
}
@end

@interface C2MFileHasOfflineRsp ()
@property SInt32 cmdId;
@property (strong) NSMutableArray * offlineFileInfoListArray;
@end

@implementation C2MFileHasOfflineRsp

- (BOOL) hasCmdId {
  return !!hasCmdId_;
}
- (void) setHasCmdId:(BOOL) value_ {
  hasCmdId_ = !!value_;
}
@synthesize cmdId;
@synthesize offlineFileInfoListArray;
@dynamic offlineFileInfoList;
- (void) dealloc {
  self.offlineFileInfoListArray = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.cmdId = 527;
  }
  return self;
}
static C2MFileHasOfflineRsp* defaultC2MFileHasOfflineRspInstance = nil;
+ (void) initialize {
  if (self == [C2MFileHasOfflineRsp class]) {
    defaultC2MFileHasOfflineRspInstance = [[C2MFileHasOfflineRsp alloc] init];
  }
}
+ (C2MFileHasOfflineRsp*) defaultInstance {
  return defaultC2MFileHasOfflineRspInstance;
}
- (C2MFileHasOfflineRsp*) defaultInstance {
  return defaultC2MFileHasOfflineRspInstance;
}
- (NSArray *)offlineFileInfoList {
  return offlineFileInfoListArray;
}
- (ClientOfflineFileInfo*)offlineFileInfoListAtIndex:(NSUInteger)index {
  return [offlineFileInfoListArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitofflineFileInfoList = YES;
   [self.offlineFileInfoList enumerateObjectsUsingBlock:^(ClientOfflineFileInfo *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitofflineFileInfoList = NO;
      *stop = YES;
    }
  }];
  if (!isInitofflineFileInfoList) return isInitofflineFileInfoList;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCmdId) {
    [output writeInt32:1 value:self.cmdId];
  }
  [self.offlineFileInfoListArray enumerateObjectsUsingBlock:^(ClientOfflineFileInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCmdId) {
    size_ += computeInt32Size(1, self.cmdId);
  }
  [self.offlineFileInfoListArray enumerateObjectsUsingBlock:^(ClientOfflineFileInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (C2MFileHasOfflineRsp*) parseFromData:(NSData*) data {
  return (C2MFileHasOfflineRsp*)[[[C2MFileHasOfflineRsp builder] mergeFromData:data] build];
}
+ (C2MFileHasOfflineRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (C2MFileHasOfflineRsp*)[[[C2MFileHasOfflineRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (C2MFileHasOfflineRsp*) parseFromInputStream:(NSInputStream*) input {
  return (C2MFileHasOfflineRsp*)[[[C2MFileHasOfflineRsp builder] mergeFromInputStream:input] build];
}
+ (C2MFileHasOfflineRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (C2MFileHasOfflineRsp*)[[[C2MFileHasOfflineRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (C2MFileHasOfflineRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (C2MFileHasOfflineRsp*)[[[C2MFileHasOfflineRsp builder] mergeFromCodedInputStream:input] build];
}
+ (C2MFileHasOfflineRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (C2MFileHasOfflineRsp*)[[[C2MFileHasOfflineRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (C2MFileHasOfflineRspBuilder*) builder {
  return [[C2MFileHasOfflineRspBuilder alloc] init];
}
+ (C2MFileHasOfflineRspBuilder*) builderWithPrototype:(C2MFileHasOfflineRsp*) prototype {
  return [[C2MFileHasOfflineRsp builder] mergeFrom:prototype];
}
- (C2MFileHasOfflineRspBuilder*) builder {
  return [C2MFileHasOfflineRsp builder];
}
- (C2MFileHasOfflineRspBuilder*) toBuilder {
  return [C2MFileHasOfflineRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCmdId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cmdId", [NSNumber numberWithInteger:self.cmdId]];
  }
  [self.offlineFileInfoListArray enumerateObjectsUsingBlock:^(ClientOfflineFileInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"offlineFileInfoList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[C2MFileHasOfflineRsp class]]) {
    return NO;
  }
  C2MFileHasOfflineRsp *otherMessage = other;
  return
      self.hasCmdId == otherMessage.hasCmdId &&
      (!self.hasCmdId || self.cmdId == otherMessage.cmdId) &&
      [self.offlineFileInfoListArray isEqualToArray:otherMessage.offlineFileInfoListArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCmdId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.cmdId] hash];
  }
  [self.offlineFileInfoListArray enumerateObjectsUsingBlock:^(ClientOfflineFileInfo *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface C2MFileHasOfflineRspBuilder()
@property (strong) C2MFileHasOfflineRsp* result;
@end

@implementation C2MFileHasOfflineRspBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[C2MFileHasOfflineRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (C2MFileHasOfflineRspBuilder*) clear {
  self.result = [[C2MFileHasOfflineRsp alloc] init];
  return self;
}
- (C2MFileHasOfflineRspBuilder*) clone {
  return [C2MFileHasOfflineRsp builderWithPrototype:result];
}
- (C2MFileHasOfflineRsp*) defaultInstance {
  return [C2MFileHasOfflineRsp defaultInstance];
}
- (C2MFileHasOfflineRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (C2MFileHasOfflineRsp*) buildPartial {
  C2MFileHasOfflineRsp* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (C2MFileHasOfflineRspBuilder*) mergeFrom:(C2MFileHasOfflineRsp*) other {
  if (other == [C2MFileHasOfflineRsp defaultInstance]) {
    return self;
  }
  if (other.hasCmdId) {
    [self setCmdId:other.cmdId];
  }
  if (other.offlineFileInfoListArray.count > 0) {
    if (result.offlineFileInfoListArray == nil) {
      result.offlineFileInfoListArray = [[NSMutableArray alloc] initWithArray:other.offlineFileInfoListArray];
    } else {
      [result.offlineFileInfoListArray addObjectsFromArray:other.offlineFileInfoListArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (C2MFileHasOfflineRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (C2MFileHasOfflineRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setCmdId:[input readInt32]];
        break;
      }
      case 18: {
        ClientOfflineFileInfoBuilder* subBuilder = [ClientOfflineFileInfo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addOfflineFileInfoList:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasCmdId {
  return result.hasCmdId;
}
- (SInt32) cmdId {
  return result.cmdId;
}
- (C2MFileHasOfflineRspBuilder*) setCmdId:(SInt32) value {
  result.hasCmdId = YES;
  result.cmdId = value;
  return self;
}
- (C2MFileHasOfflineRspBuilder*) clearCmdId {
  result.hasCmdId = NO;
  result.cmdId = 527;
  return self;
}
- (NSMutableArray *)offlineFileInfoList {
  return result.offlineFileInfoListArray;
}
- (ClientOfflineFileInfo*)offlineFileInfoListAtIndex:(NSUInteger)index {
  return [result offlineFileInfoListAtIndex:index];
}
- (C2MFileHasOfflineRspBuilder *)addOfflineFileInfoList:(ClientOfflineFileInfo*)value {
  if (result.offlineFileInfoListArray == nil) {
    result.offlineFileInfoListArray = [[NSMutableArray alloc]init];
  }
  [result.offlineFileInfoListArray addObject:value];
  return self;
}
- (C2MFileHasOfflineRspBuilder *)setOfflineFileInfoListArray:(NSArray *)array {
  result.offlineFileInfoListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (C2MFileHasOfflineRspBuilder *)clearOfflineFileInfoList {
  result.offlineFileInfoListArray = nil;
  return self;
}
@end

@interface C2MFileAddOfflineReq ()
@property SInt32 cmdId;
@property (strong) NSString* fromUserId;
@property (strong) NSString* toUserId;
@property (strong) NSString* filePath;
@property UInt32 fileSize;
@end

@implementation C2MFileAddOfflineReq

- (BOOL) hasCmdId {
  return !!hasCmdId_;
}
- (void) setHasCmdId:(BOOL) value_ {
  hasCmdId_ = !!value_;
}
@synthesize cmdId;
- (BOOL) hasFromUserId {
  return !!hasFromUserId_;
}
- (void) setHasFromUserId:(BOOL) value_ {
  hasFromUserId_ = !!value_;
}
@synthesize fromUserId;
- (BOOL) hasToUserId {
  return !!hasToUserId_;
}
- (void) setHasToUserId:(BOOL) value_ {
  hasToUserId_ = !!value_;
}
@synthesize toUserId;
- (BOOL) hasFilePath {
  return !!hasFilePath_;
}
- (void) setHasFilePath:(BOOL) value_ {
  hasFilePath_ = !!value_;
}
@synthesize filePath;
- (BOOL) hasFileSize {
  return !!hasFileSize_;
}
- (void) setHasFileSize:(BOOL) value_ {
  hasFileSize_ = !!value_;
}
@synthesize fileSize;
- (void) dealloc {
  self.fromUserId = nil;
  self.toUserId = nil;
  self.filePath = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.cmdId = 528;
    self.fromUserId = @"";
    self.toUserId = @"";
    self.filePath = @"";
    self.fileSize = 0;
  }
  return self;
}
static C2MFileAddOfflineReq* defaultC2MFileAddOfflineReqInstance = nil;
+ (void) initialize {
  if (self == [C2MFileAddOfflineReq class]) {
    defaultC2MFileAddOfflineReqInstance = [[C2MFileAddOfflineReq alloc] init];
  }
}
+ (C2MFileAddOfflineReq*) defaultInstance {
  return defaultC2MFileAddOfflineReqInstance;
}
- (C2MFileAddOfflineReq*) defaultInstance {
  return defaultC2MFileAddOfflineReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasFromUserId) {
    return NO;
  }
  if (!self.hasToUserId) {
    return NO;
  }
  if (!self.hasFilePath) {
    return NO;
  }
  if (!self.hasFileSize) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCmdId) {
    [output writeInt32:1 value:self.cmdId];
  }
  if (self.hasFromUserId) {
    [output writeString:2 value:self.fromUserId];
  }
  if (self.hasToUserId) {
    [output writeString:3 value:self.toUserId];
  }
  if (self.hasFilePath) {
    [output writeString:4 value:self.filePath];
  }
  if (self.hasFileSize) {
    [output writeUInt32:5 value:self.fileSize];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCmdId) {
    size_ += computeInt32Size(1, self.cmdId);
  }
  if (self.hasFromUserId) {
    size_ += computeStringSize(2, self.fromUserId);
  }
  if (self.hasToUserId) {
    size_ += computeStringSize(3, self.toUserId);
  }
  if (self.hasFilePath) {
    size_ += computeStringSize(4, self.filePath);
  }
  if (self.hasFileSize) {
    size_ += computeUInt32Size(5, self.fileSize);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (C2MFileAddOfflineReq*) parseFromData:(NSData*) data {
  return (C2MFileAddOfflineReq*)[[[C2MFileAddOfflineReq builder] mergeFromData:data] build];
}
+ (C2MFileAddOfflineReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (C2MFileAddOfflineReq*)[[[C2MFileAddOfflineReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (C2MFileAddOfflineReq*) parseFromInputStream:(NSInputStream*) input {
  return (C2MFileAddOfflineReq*)[[[C2MFileAddOfflineReq builder] mergeFromInputStream:input] build];
}
+ (C2MFileAddOfflineReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (C2MFileAddOfflineReq*)[[[C2MFileAddOfflineReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (C2MFileAddOfflineReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (C2MFileAddOfflineReq*)[[[C2MFileAddOfflineReq builder] mergeFromCodedInputStream:input] build];
}
+ (C2MFileAddOfflineReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (C2MFileAddOfflineReq*)[[[C2MFileAddOfflineReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (C2MFileAddOfflineReqBuilder*) builder {
  return [[C2MFileAddOfflineReqBuilder alloc] init];
}
+ (C2MFileAddOfflineReqBuilder*) builderWithPrototype:(C2MFileAddOfflineReq*) prototype {
  return [[C2MFileAddOfflineReq builder] mergeFrom:prototype];
}
- (C2MFileAddOfflineReqBuilder*) builder {
  return [C2MFileAddOfflineReq builder];
}
- (C2MFileAddOfflineReqBuilder*) toBuilder {
  return [C2MFileAddOfflineReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCmdId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cmdId", [NSNumber numberWithInteger:self.cmdId]];
  }
  if (self.hasFromUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromUserId", self.fromUserId];
  }
  if (self.hasToUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"toUserId", self.toUserId];
  }
  if (self.hasFilePath) {
    [output appendFormat:@"%@%@: %@\n", indent, @"filePath", self.filePath];
  }
  if (self.hasFileSize) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fileSize", [NSNumber numberWithInteger:self.fileSize]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[C2MFileAddOfflineReq class]]) {
    return NO;
  }
  C2MFileAddOfflineReq *otherMessage = other;
  return
      self.hasCmdId == otherMessage.hasCmdId &&
      (!self.hasCmdId || self.cmdId == otherMessage.cmdId) &&
      self.hasFromUserId == otherMessage.hasFromUserId &&
      (!self.hasFromUserId || [self.fromUserId isEqual:otherMessage.fromUserId]) &&
      self.hasToUserId == otherMessage.hasToUserId &&
      (!self.hasToUserId || [self.toUserId isEqual:otherMessage.toUserId]) &&
      self.hasFilePath == otherMessage.hasFilePath &&
      (!self.hasFilePath || [self.filePath isEqual:otherMessage.filePath]) &&
      self.hasFileSize == otherMessage.hasFileSize &&
      (!self.hasFileSize || self.fileSize == otherMessage.fileSize) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCmdId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.cmdId] hash];
  }
  if (self.hasFromUserId) {
    hashCode = hashCode * 31 + [self.fromUserId hash];
  }
  if (self.hasToUserId) {
    hashCode = hashCode * 31 + [self.toUserId hash];
  }
  if (self.hasFilePath) {
    hashCode = hashCode * 31 + [self.filePath hash];
  }
  if (self.hasFileSize) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.fileSize] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface C2MFileAddOfflineReqBuilder()
@property (strong) C2MFileAddOfflineReq* result;
@end

@implementation C2MFileAddOfflineReqBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[C2MFileAddOfflineReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (C2MFileAddOfflineReqBuilder*) clear {
  self.result = [[C2MFileAddOfflineReq alloc] init];
  return self;
}
- (C2MFileAddOfflineReqBuilder*) clone {
  return [C2MFileAddOfflineReq builderWithPrototype:result];
}
- (C2MFileAddOfflineReq*) defaultInstance {
  return [C2MFileAddOfflineReq defaultInstance];
}
- (C2MFileAddOfflineReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (C2MFileAddOfflineReq*) buildPartial {
  C2MFileAddOfflineReq* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (C2MFileAddOfflineReqBuilder*) mergeFrom:(C2MFileAddOfflineReq*) other {
  if (other == [C2MFileAddOfflineReq defaultInstance]) {
    return self;
  }
  if (other.hasCmdId) {
    [self setCmdId:other.cmdId];
  }
  if (other.hasFromUserId) {
    [self setFromUserId:other.fromUserId];
  }
  if (other.hasToUserId) {
    [self setToUserId:other.toUserId];
  }
  if (other.hasFilePath) {
    [self setFilePath:other.filePath];
  }
  if (other.hasFileSize) {
    [self setFileSize:other.fileSize];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (C2MFileAddOfflineReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (C2MFileAddOfflineReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setCmdId:[input readInt32]];
        break;
      }
      case 18: {
        [self setFromUserId:[input readString]];
        break;
      }
      case 26: {
        [self setToUserId:[input readString]];
        break;
      }
      case 34: {
        [self setFilePath:[input readString]];
        break;
      }
      case 40: {
        [self setFileSize:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasCmdId {
  return result.hasCmdId;
}
- (SInt32) cmdId {
  return result.cmdId;
}
- (C2MFileAddOfflineReqBuilder*) setCmdId:(SInt32) value {
  result.hasCmdId = YES;
  result.cmdId = value;
  return self;
}
- (C2MFileAddOfflineReqBuilder*) clearCmdId {
  result.hasCmdId = NO;
  result.cmdId = 528;
  return self;
}
- (BOOL) hasFromUserId {
  return result.hasFromUserId;
}
- (NSString*) fromUserId {
  return result.fromUserId;
}
- (C2MFileAddOfflineReqBuilder*) setFromUserId:(NSString*) value {
  result.hasFromUserId = YES;
  result.fromUserId = value;
  return self;
}
- (C2MFileAddOfflineReqBuilder*) clearFromUserId {
  result.hasFromUserId = NO;
  result.fromUserId = @"";
  return self;
}
- (BOOL) hasToUserId {
  return result.hasToUserId;
}
- (NSString*) toUserId {
  return result.toUserId;
}
- (C2MFileAddOfflineReqBuilder*) setToUserId:(NSString*) value {
  result.hasToUserId = YES;
  result.toUserId = value;
  return self;
}
- (C2MFileAddOfflineReqBuilder*) clearToUserId {
  result.hasToUserId = NO;
  result.toUserId = @"";
  return self;
}
- (BOOL) hasFilePath {
  return result.hasFilePath;
}
- (NSString*) filePath {
  return result.filePath;
}
- (C2MFileAddOfflineReqBuilder*) setFilePath:(NSString*) value {
  result.hasFilePath = YES;
  result.filePath = value;
  return self;
}
- (C2MFileAddOfflineReqBuilder*) clearFilePath {
  result.hasFilePath = NO;
  result.filePath = @"";
  return self;
}
- (BOOL) hasFileSize {
  return result.hasFileSize;
}
- (UInt32) fileSize {
  return result.fileSize;
}
- (C2MFileAddOfflineReqBuilder*) setFileSize:(UInt32) value {
  result.hasFileSize = YES;
  result.fileSize = value;
  return self;
}
- (C2MFileAddOfflineReqBuilder*) clearFileSize {
  result.hasFileSize = NO;
  result.fileSize = 0;
  return self;
}
@end

@interface C2MFileDelOfflineReq ()
@property SInt32 cmdId;
@property (strong) NSString* fromUserId;
@property (strong) NSString* toUserId;
@property UInt32 fileId;
@end

@implementation C2MFileDelOfflineReq

- (BOOL) hasCmdId {
  return !!hasCmdId_;
}
- (void) setHasCmdId:(BOOL) value_ {
  hasCmdId_ = !!value_;
}
@synthesize cmdId;
- (BOOL) hasFromUserId {
  return !!hasFromUserId_;
}
- (void) setHasFromUserId:(BOOL) value_ {
  hasFromUserId_ = !!value_;
}
@synthesize fromUserId;
- (BOOL) hasToUserId {
  return !!hasToUserId_;
}
- (void) setHasToUserId:(BOOL) value_ {
  hasToUserId_ = !!value_;
}
@synthesize toUserId;
- (BOOL) hasFileId {
  return !!hasFileId_;
}
- (void) setHasFileId:(BOOL) value_ {
  hasFileId_ = !!value_;
}
@synthesize fileId;
- (void) dealloc {
  self.fromUserId = nil;
  self.toUserId = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.cmdId = 529;
    self.fromUserId = @"";
    self.toUserId = @"";
    self.fileId = 0;
  }
  return self;
}
static C2MFileDelOfflineReq* defaultC2MFileDelOfflineReqInstance = nil;
+ (void) initialize {
  if (self == [C2MFileDelOfflineReq class]) {
    defaultC2MFileDelOfflineReqInstance = [[C2MFileDelOfflineReq alloc] init];
  }
}
+ (C2MFileDelOfflineReq*) defaultInstance {
  return defaultC2MFileDelOfflineReqInstance;
}
- (C2MFileDelOfflineReq*) defaultInstance {
  return defaultC2MFileDelOfflineReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasFromUserId) {
    return NO;
  }
  if (!self.hasToUserId) {
    return NO;
  }
  if (!self.hasFileId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCmdId) {
    [output writeInt32:1 value:self.cmdId];
  }
  if (self.hasFromUserId) {
    [output writeString:2 value:self.fromUserId];
  }
  if (self.hasToUserId) {
    [output writeString:3 value:self.toUserId];
  }
  if (self.hasFileId) {
    [output writeUInt32:4 value:self.fileId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCmdId) {
    size_ += computeInt32Size(1, self.cmdId);
  }
  if (self.hasFromUserId) {
    size_ += computeStringSize(2, self.fromUserId);
  }
  if (self.hasToUserId) {
    size_ += computeStringSize(3, self.toUserId);
  }
  if (self.hasFileId) {
    size_ += computeUInt32Size(4, self.fileId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (C2MFileDelOfflineReq*) parseFromData:(NSData*) data {
  return (C2MFileDelOfflineReq*)[[[C2MFileDelOfflineReq builder] mergeFromData:data] build];
}
+ (C2MFileDelOfflineReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (C2MFileDelOfflineReq*)[[[C2MFileDelOfflineReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (C2MFileDelOfflineReq*) parseFromInputStream:(NSInputStream*) input {
  return (C2MFileDelOfflineReq*)[[[C2MFileDelOfflineReq builder] mergeFromInputStream:input] build];
}
+ (C2MFileDelOfflineReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (C2MFileDelOfflineReq*)[[[C2MFileDelOfflineReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (C2MFileDelOfflineReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (C2MFileDelOfflineReq*)[[[C2MFileDelOfflineReq builder] mergeFromCodedInputStream:input] build];
}
+ (C2MFileDelOfflineReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (C2MFileDelOfflineReq*)[[[C2MFileDelOfflineReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (C2MFileDelOfflineReqBuilder*) builder {
  return [[C2MFileDelOfflineReqBuilder alloc] init];
}
+ (C2MFileDelOfflineReqBuilder*) builderWithPrototype:(C2MFileDelOfflineReq*) prototype {
  return [[C2MFileDelOfflineReq builder] mergeFrom:prototype];
}
- (C2MFileDelOfflineReqBuilder*) builder {
  return [C2MFileDelOfflineReq builder];
}
- (C2MFileDelOfflineReqBuilder*) toBuilder {
  return [C2MFileDelOfflineReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCmdId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cmdId", [NSNumber numberWithInteger:self.cmdId]];
  }
  if (self.hasFromUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromUserId", self.fromUserId];
  }
  if (self.hasToUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"toUserId", self.toUserId];
  }
  if (self.hasFileId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fileId", [NSNumber numberWithInteger:self.fileId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[C2MFileDelOfflineReq class]]) {
    return NO;
  }
  C2MFileDelOfflineReq *otherMessage = other;
  return
      self.hasCmdId == otherMessage.hasCmdId &&
      (!self.hasCmdId || self.cmdId == otherMessage.cmdId) &&
      self.hasFromUserId == otherMessage.hasFromUserId &&
      (!self.hasFromUserId || [self.fromUserId isEqual:otherMessage.fromUserId]) &&
      self.hasToUserId == otherMessage.hasToUserId &&
      (!self.hasToUserId || [self.toUserId isEqual:otherMessage.toUserId]) &&
      self.hasFileId == otherMessage.hasFileId &&
      (!self.hasFileId || self.fileId == otherMessage.fileId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCmdId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.cmdId] hash];
  }
  if (self.hasFromUserId) {
    hashCode = hashCode * 31 + [self.fromUserId hash];
  }
  if (self.hasToUserId) {
    hashCode = hashCode * 31 + [self.toUserId hash];
  }
  if (self.hasFileId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.fileId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface C2MFileDelOfflineReqBuilder()
@property (strong) C2MFileDelOfflineReq* result;
@end

@implementation C2MFileDelOfflineReqBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[C2MFileDelOfflineReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (C2MFileDelOfflineReqBuilder*) clear {
  self.result = [[C2MFileDelOfflineReq alloc] init];
  return self;
}
- (C2MFileDelOfflineReqBuilder*) clone {
  return [C2MFileDelOfflineReq builderWithPrototype:result];
}
- (C2MFileDelOfflineReq*) defaultInstance {
  return [C2MFileDelOfflineReq defaultInstance];
}
- (C2MFileDelOfflineReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (C2MFileDelOfflineReq*) buildPartial {
  C2MFileDelOfflineReq* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (C2MFileDelOfflineReqBuilder*) mergeFrom:(C2MFileDelOfflineReq*) other {
  if (other == [C2MFileDelOfflineReq defaultInstance]) {
    return self;
  }
  if (other.hasCmdId) {
    [self setCmdId:other.cmdId];
  }
  if (other.hasFromUserId) {
    [self setFromUserId:other.fromUserId];
  }
  if (other.hasToUserId) {
    [self setToUserId:other.toUserId];
  }
  if (other.hasFileId) {
    [self setFileId:other.fileId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (C2MFileDelOfflineReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (C2MFileDelOfflineReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setCmdId:[input readInt32]];
        break;
      }
      case 18: {
        [self setFromUserId:[input readString]];
        break;
      }
      case 26: {
        [self setToUserId:[input readString]];
        break;
      }
      case 32: {
        [self setFileId:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasCmdId {
  return result.hasCmdId;
}
- (SInt32) cmdId {
  return result.cmdId;
}
- (C2MFileDelOfflineReqBuilder*) setCmdId:(SInt32) value {
  result.hasCmdId = YES;
  result.cmdId = value;
  return self;
}
- (C2MFileDelOfflineReqBuilder*) clearCmdId {
  result.hasCmdId = NO;
  result.cmdId = 529;
  return self;
}
- (BOOL) hasFromUserId {
  return result.hasFromUserId;
}
- (NSString*) fromUserId {
  return result.fromUserId;
}
- (C2MFileDelOfflineReqBuilder*) setFromUserId:(NSString*) value {
  result.hasFromUserId = YES;
  result.fromUserId = value;
  return self;
}
- (C2MFileDelOfflineReqBuilder*) clearFromUserId {
  result.hasFromUserId = NO;
  result.fromUserId = @"";
  return self;
}
- (BOOL) hasToUserId {
  return result.hasToUserId;
}
- (NSString*) toUserId {
  return result.toUserId;
}
- (C2MFileDelOfflineReqBuilder*) setToUserId:(NSString*) value {
  result.hasToUserId = YES;
  result.toUserId = value;
  return self;
}
- (C2MFileDelOfflineReqBuilder*) clearToUserId {
  result.hasToUserId = NO;
  result.toUserId = @"";
  return self;
}
- (BOOL) hasFileId {
  return result.hasFileId;
}
- (UInt32) fileId {
  return result.fileId;
}
- (C2MFileDelOfflineReqBuilder*) setFileId:(UInt32) value {
  result.hasFileId = YES;
  result.fileId = value;
  return self;
}
- (C2MFileDelOfflineReqBuilder*) clearFileId {
  result.hasFileId = NO;
  result.fileId = 0;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
