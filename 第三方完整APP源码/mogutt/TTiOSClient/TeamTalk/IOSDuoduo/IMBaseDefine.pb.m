// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "IMBaseDefine.pb.h"
// @@protoc_insertion_point(imports)

@implementation ImbaseDefineRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [ImbaseDefineRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL ResultTypeIsValidValue(ResultType value) {
  switch (value) {
    case ResultTypeRefuseReasonNone:
    case ResultTypeRefuseReasonNoMsgServer:
    case ResultTypeRefuseReasonMsgServerFull:
    case ResultTypeRefuseReasonNoDbServer:
    case ResultTypeRefuseReasonNoLoginServer:
    case ResultTypeRefuseReasonNoRouteServer:
    case ResultTypeRefuseReasonDbValidateFailed:
    case ResultTypeResuseReasonVersionTooOld:
      return YES;
    default:
      return NO;
  }
}
BOOL UserTypeIsValidValue(UserType value) {
  switch (value) {
    case UserTypeUserTypeNormal:
      return YES;
    default:
      return NO;
  }
}
BOOL KickReasonTypeIsValidValue(KickReasonType value) {
  switch (value) {
    case KickReasonTypeKickReasonDuplicateUser:
      return YES;
    default:
      return NO;
  }
}
BOOL OnlineListTypeIsValidValue(OnlineListType value) {
  switch (value) {
    case OnlineListTypeOnlineListTypeFriendList:
      return YES;
    default:
      return NO;
  }
}
BOOL UserStatTypeIsValidValue(UserStatType value) {
  switch (value) {
    case UserStatTypeUserStatusOnline:
    case UserStatTypeUserStatusOffline:
    case UserStatTypeUserStatusLeave:
      return YES;
    default:
      return NO;
  }
}
BOOL SessionTypeIsValidValue(SessionType value) {
  switch (value) {
    case SessionTypeSessionTypeSingle:
    case SessionTypeSessionTypeGroup:
    case SessionTypeSessionTypeTempGroup:
      return YES;
    default:
      return NO;
  }
}
BOOL GroupTypeIsValidValue(GroupType value) {
  switch (value) {
    case GroupTypeNormalGroup:
    case GroupTypeTemporaryGroup:
      return YES;
    default:
      return NO;
  }
}
@interface IpAddr ()
@property (strong) NSString* ip;
@property UInt32 port;
@end

@implementation IpAddr

- (BOOL) hasIp {
  return !!hasIp_;
}
- (void) setHasIp:(BOOL) value_ {
  hasIp_ = !!value_;
}
@synthesize ip;
- (BOOL) hasPort {
  return !!hasPort_;
}
- (void) setHasPort:(BOOL) value_ {
  hasPort_ = !!value_;
}
@synthesize port;
- (void) dealloc {
  self.ip = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.ip = @"";
    self.port = 0;
  }
  return self;
}
static IpAddr* defaultIpAddrInstance = nil;
+ (void) initialize {
  if (self == [IpAddr class]) {
    defaultIpAddrInstance = [[IpAddr alloc] init];
  }
}
+ (IpAddr*) defaultInstance {
  return defaultIpAddrInstance;
}
- (IpAddr*) defaultInstance {
  return defaultIpAddrInstance;
}
- (BOOL) isInitialized {
  if (!self.hasIp) {
    return NO;
  }
  if (!self.hasPort) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasIp) {
    [output writeString:1 value:self.ip];
  }
  if (self.hasPort) {
    [output writeUInt32:2 value:self.port];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasIp) {
    size_ += computeStringSize(1, self.ip);
  }
  if (self.hasPort) {
    size_ += computeUInt32Size(2, self.port);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IpAddr*) parseFromData:(NSData*) data {
  return (IpAddr*)[[[IpAddr builder] mergeFromData:data] build];
}
+ (IpAddr*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IpAddr*)[[[IpAddr builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IpAddr*) parseFromInputStream:(NSInputStream*) input {
  return (IpAddr*)[[[IpAddr builder] mergeFromInputStream:input] build];
}
+ (IpAddr*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IpAddr*)[[[IpAddr builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IpAddr*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IpAddr*)[[[IpAddr builder] mergeFromCodedInputStream:input] build];
}
+ (IpAddr*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IpAddr*)[[[IpAddr builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IpAddrBuilder*) builder {
  return [[IpAddrBuilder alloc] init];
}
+ (IpAddrBuilder*) builderWithPrototype:(IpAddr*) prototype {
  return [[IpAddr builder] mergeFrom:prototype];
}
- (IpAddrBuilder*) builder {
  return [IpAddr builder];
}
- (IpAddrBuilder*) toBuilder {
  return [IpAddr builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasIp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ip", self.ip];
  }
  if (self.hasPort) {
    [output appendFormat:@"%@%@: %@\n", indent, @"port", [NSNumber numberWithInteger:self.port]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IpAddr class]]) {
    return NO;
  }
  IpAddr *otherMessage = other;
  return
      self.hasIp == otherMessage.hasIp &&
      (!self.hasIp || [self.ip isEqual:otherMessage.ip]) &&
      self.hasPort == otherMessage.hasPort &&
      (!self.hasPort || self.port == otherMessage.port) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasIp) {
    hashCode = hashCode * 31 + [self.ip hash];
  }
  if (self.hasPort) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.port] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IpAddrBuilder()
@property (strong) IpAddr* result;
@end

@implementation IpAddrBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[IpAddr alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (IpAddrBuilder*) clear {
  self.result = [[IpAddr alloc] init];
  return self;
}
- (IpAddrBuilder*) clone {
  return [IpAddr builderWithPrototype:result];
}
- (IpAddr*) defaultInstance {
  return [IpAddr defaultInstance];
}
- (IpAddr*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IpAddr*) buildPartial {
  IpAddr* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (IpAddrBuilder*) mergeFrom:(IpAddr*) other {
  if (other == [IpAddr defaultInstance]) {
    return self;
  }
  if (other.hasIp) {
    [self setIp:other.ip];
  }
  if (other.hasPort) {
    [self setPort:other.port];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IpAddrBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IpAddrBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setIp:[input readString]];
        break;
      }
      case 16: {
        [self setPort:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasIp {
  return result.hasIp;
}
- (NSString*) ip {
  return result.ip;
}
- (IpAddrBuilder*) setIp:(NSString*) value {
  result.hasIp = YES;
  result.ip = value;
  return self;
}
- (IpAddrBuilder*) clearIp {
  result.hasIp = NO;
  result.ip = @"";
  return self;
}
- (BOOL) hasPort {
  return result.hasPort;
}
- (UInt32) port {
  return result.port;
}
- (IpAddrBuilder*) setPort:(UInt32) value {
  result.hasPort = YES;
  result.port = value;
  return self;
}
- (IpAddrBuilder*) clearPort {
  result.hasPort = NO;
  result.port = 0;
  return self;
}
@end

@interface ClientUserInfo ()
@property (strong) NSString* userId;
@property (strong) NSString* name;
@property (strong) NSString* nickName;
@property (strong) NSString* avatarUrl;
@property (strong) NSString* department;
@property UserType userType;
@property UInt32 userUpdated;
@end

@implementation ClientUserInfo

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value_ {
  hasUserId_ = !!value_;
}
@synthesize userId;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value_ {
  hasName_ = !!value_;
}
@synthesize name;
- (BOOL) hasNickName {
  return !!hasNickName_;
}
- (void) setHasNickName:(BOOL) value_ {
  hasNickName_ = !!value_;
}
@synthesize nickName;
- (BOOL) hasAvatarUrl {
  return !!hasAvatarUrl_;
}
- (void) setHasAvatarUrl:(BOOL) value_ {
  hasAvatarUrl_ = !!value_;
}
@synthesize avatarUrl;
- (BOOL) hasDepartment {
  return !!hasDepartment_;
}
- (void) setHasDepartment:(BOOL) value_ {
  hasDepartment_ = !!value_;
}
@synthesize department;
- (BOOL) hasUserType {
  return !!hasUserType_;
}
- (void) setHasUserType:(BOOL) value_ {
  hasUserType_ = !!value_;
}
@synthesize userType;
- (BOOL) hasUserUpdated {
  return !!hasUserUpdated_;
}
- (void) setHasUserUpdated:(BOOL) value_ {
  hasUserUpdated_ = !!value_;
}
@synthesize userUpdated;
- (void) dealloc {
  self.userId = nil;
  self.name = nil;
  self.nickName = nil;
  self.avatarUrl = nil;
  self.department = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.userId = @"";
    self.name = @"";
    self.nickName = @"";
    self.avatarUrl = @"";
    self.department = @"";
    self.userType = UserTypeUserTypeNormal;
    self.userUpdated = 0;
  }
  return self;
}
static ClientUserInfo* defaultClientUserInfoInstance = nil;
+ (void) initialize {
  if (self == [ClientUserInfo class]) {
    defaultClientUserInfoInstance = [[ClientUserInfo alloc] init];
  }
}
+ (ClientUserInfo*) defaultInstance {
  return defaultClientUserInfoInstance;
}
- (ClientUserInfo*) defaultInstance {
  return defaultClientUserInfoInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasName) {
    return NO;
  }
  if (!self.hasNickName) {
    return NO;
  }
  if (!self.hasAvatarUrl) {
    return NO;
  }
  if (!self.hasDepartment) {
    return NO;
  }
  if (!self.hasUserType) {
    return NO;
  }
  if (!self.hasUserUpdated) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeString:1 value:self.userId];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  if (self.hasNickName) {
    [output writeString:3 value:self.nickName];
  }
  if (self.hasAvatarUrl) {
    [output writeString:4 value:self.avatarUrl];
  }
  if (self.hasDepartment) {
    [output writeString:5 value:self.department];
  }
  if (self.hasUserType) {
    [output writeEnum:6 value:self.userType];
  }
  if (self.hasUserUpdated) {
    [output writeUInt32:7 value:self.userUpdated];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeStringSize(1, self.userId);
  }
  if (self.hasName) {
    size_ += computeStringSize(2, self.name);
  }
  if (self.hasNickName) {
    size_ += computeStringSize(3, self.nickName);
  }
  if (self.hasAvatarUrl) {
    size_ += computeStringSize(4, self.avatarUrl);
  }
  if (self.hasDepartment) {
    size_ += computeStringSize(5, self.department);
  }
  if (self.hasUserType) {
    size_ += computeEnumSize(6, self.userType);
  }
  if (self.hasUserUpdated) {
    size_ += computeUInt32Size(7, self.userUpdated);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ClientUserInfo*) parseFromData:(NSData*) data {
  return (ClientUserInfo*)[[[ClientUserInfo builder] mergeFromData:data] build];
}
+ (ClientUserInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ClientUserInfo*)[[[ClientUserInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ClientUserInfo*) parseFromInputStream:(NSInputStream*) input {
  return (ClientUserInfo*)[[[ClientUserInfo builder] mergeFromInputStream:input] build];
}
+ (ClientUserInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ClientUserInfo*)[[[ClientUserInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ClientUserInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ClientUserInfo*)[[[ClientUserInfo builder] mergeFromCodedInputStream:input] build];
}
+ (ClientUserInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ClientUserInfo*)[[[ClientUserInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ClientUserInfoBuilder*) builder {
  return [[ClientUserInfoBuilder alloc] init];
}
+ (ClientUserInfoBuilder*) builderWithPrototype:(ClientUserInfo*) prototype {
  return [[ClientUserInfo builder] mergeFrom:prototype];
}
- (ClientUserInfoBuilder*) builder {
  return [ClientUserInfo builder];
}
- (ClientUserInfoBuilder*) toBuilder {
  return [ClientUserInfo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", self.userId];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasNickName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nickName", self.nickName];
  }
  if (self.hasAvatarUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"avatarUrl", self.avatarUrl];
  }
  if (self.hasDepartment) {
    [output appendFormat:@"%@%@: %@\n", indent, @"department", self.department];
  }
  if (self.hasUserType) {
    [output appendFormat:@"%@%@: %d\n", indent, @"userType", self.userType];
  }
  if (self.hasUserUpdated) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userUpdated", [NSNumber numberWithInteger:self.userUpdated]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ClientUserInfo class]]) {
    return NO;
  }
  ClientUserInfo *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || [self.userId isEqual:otherMessage.userId]) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasNickName == otherMessage.hasNickName &&
      (!self.hasNickName || [self.nickName isEqual:otherMessage.nickName]) &&
      self.hasAvatarUrl == otherMessage.hasAvatarUrl &&
      (!self.hasAvatarUrl || [self.avatarUrl isEqual:otherMessage.avatarUrl]) &&
      self.hasDepartment == otherMessage.hasDepartment &&
      (!self.hasDepartment || [self.department isEqual:otherMessage.department]) &&
      self.hasUserType == otherMessage.hasUserType &&
      (!self.hasUserType || self.userType == otherMessage.userType) &&
      self.hasUserUpdated == otherMessage.hasUserUpdated &&
      (!self.hasUserUpdated || self.userUpdated == otherMessage.userUpdated) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [self.userId hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasNickName) {
    hashCode = hashCode * 31 + [self.nickName hash];
  }
  if (self.hasAvatarUrl) {
    hashCode = hashCode * 31 + [self.avatarUrl hash];
  }
  if (self.hasDepartment) {
    hashCode = hashCode * 31 + [self.department hash];
  }
  if (self.hasUserType) {
    hashCode = hashCode * 31 + self.userType;
  }
  if (self.hasUserUpdated) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userUpdated] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ClientUserInfoBuilder()
@property (strong) ClientUserInfo* result;
@end

@implementation ClientUserInfoBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[ClientUserInfo alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (ClientUserInfoBuilder*) clear {
  self.result = [[ClientUserInfo alloc] init];
  return self;
}
- (ClientUserInfoBuilder*) clone {
  return [ClientUserInfo builderWithPrototype:result];
}
- (ClientUserInfo*) defaultInstance {
  return [ClientUserInfo defaultInstance];
}
- (ClientUserInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ClientUserInfo*) buildPartial {
  ClientUserInfo* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (ClientUserInfoBuilder*) mergeFrom:(ClientUserInfo*) other {
  if (other == [ClientUserInfo defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasNickName) {
    [self setNickName:other.nickName];
  }
  if (other.hasAvatarUrl) {
    [self setAvatarUrl:other.avatarUrl];
  }
  if (other.hasDepartment) {
    [self setDepartment:other.department];
  }
  if (other.hasUserType) {
    [self setUserType:other.userType];
  }
  if (other.hasUserUpdated) {
    [self setUserUpdated:other.userUpdated];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ClientUserInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ClientUserInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserId:[input readString]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 26: {
        [self setNickName:[input readString]];
        break;
      }
      case 34: {
        [self setAvatarUrl:[input readString]];
        break;
      }
      case 42: {
        [self setDepartment:[input readString]];
        break;
      }
      case 48: {
        UserType value = (UserType)[input readEnum];
        if (UserTypeIsValidValue(value)) {
          [self setUserType:value];
        } else {
          [unknownFields mergeVarintField:6 value:value];
        }
        break;
      }
      case 56: {
        [self setUserUpdated:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (NSString*) userId {
  return result.userId;
}
- (ClientUserInfoBuilder*) setUserId:(NSString*) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (ClientUserInfoBuilder*) clearUserId {
  result.hasUserId = NO;
  result.userId = @"";
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (ClientUserInfoBuilder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (ClientUserInfoBuilder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasNickName {
  return result.hasNickName;
}
- (NSString*) nickName {
  return result.nickName;
}
- (ClientUserInfoBuilder*) setNickName:(NSString*) value {
  result.hasNickName = YES;
  result.nickName = value;
  return self;
}
- (ClientUserInfoBuilder*) clearNickName {
  result.hasNickName = NO;
  result.nickName = @"";
  return self;
}
- (BOOL) hasAvatarUrl {
  return result.hasAvatarUrl;
}
- (NSString*) avatarUrl {
  return result.avatarUrl;
}
- (ClientUserInfoBuilder*) setAvatarUrl:(NSString*) value {
  result.hasAvatarUrl = YES;
  result.avatarUrl = value;
  return self;
}
- (ClientUserInfoBuilder*) clearAvatarUrl {
  result.hasAvatarUrl = NO;
  result.avatarUrl = @"";
  return self;
}
- (BOOL) hasDepartment {
  return result.hasDepartment;
}
- (NSString*) department {
  return result.department;
}
- (ClientUserInfoBuilder*) setDepartment:(NSString*) value {
  result.hasDepartment = YES;
  result.department = value;
  return self;
}
- (ClientUserInfoBuilder*) clearDepartment {
  result.hasDepartment = NO;
  result.department = @"";
  return self;
}
- (BOOL) hasUserType {
  return result.hasUserType;
}
- (UserType) userType {
  return result.userType;
}
- (ClientUserInfoBuilder*) setUserType:(UserType) value {
  result.hasUserType = YES;
  result.userType = value;
  return self;
}
- (ClientUserInfoBuilder*) clearUserType {
  result.hasUserType = NO;
  result.userType = UserTypeUserTypeNormal;
  return self;
}
- (BOOL) hasUserUpdated {
  return result.hasUserUpdated;
}
- (UInt32) userUpdated {
  return result.userUpdated;
}
- (ClientUserInfoBuilder*) setUserUpdated:(UInt32) value {
  result.hasUserUpdated = YES;
  result.userUpdated = value;
  return self;
}
- (ClientUserInfoBuilder*) clearUserUpdated {
  result.hasUserUpdated = NO;
  result.userUpdated = 0;
  return self;
}
@end

@interface ServerUserInfo ()
@property UInt32 userId;
@property (strong) NSString* name;
@property (strong) NSString* nickName;
@property (strong) NSString* avatarUrl;
@property (strong) NSString* department;
@property UInt32 userType;
@property UInt32 userUpdate;
@end

@implementation ServerUserInfo

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value_ {
  hasUserId_ = !!value_;
}
@synthesize userId;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value_ {
  hasName_ = !!value_;
}
@synthesize name;
- (BOOL) hasNickName {
  return !!hasNickName_;
}
- (void) setHasNickName:(BOOL) value_ {
  hasNickName_ = !!value_;
}
@synthesize nickName;
- (BOOL) hasAvatarUrl {
  return !!hasAvatarUrl_;
}
- (void) setHasAvatarUrl:(BOOL) value_ {
  hasAvatarUrl_ = !!value_;
}
@synthesize avatarUrl;
- (BOOL) hasDepartment {
  return !!hasDepartment_;
}
- (void) setHasDepartment:(BOOL) value_ {
  hasDepartment_ = !!value_;
}
@synthesize department;
- (BOOL) hasUserType {
  return !!hasUserType_;
}
- (void) setHasUserType:(BOOL) value_ {
  hasUserType_ = !!value_;
}
@synthesize userType;
- (BOOL) hasUserUpdate {
  return !!hasUserUpdate_;
}
- (void) setHasUserUpdate:(BOOL) value_ {
  hasUserUpdate_ = !!value_;
}
@synthesize userUpdate;
- (void) dealloc {
  self.name = nil;
  self.nickName = nil;
  self.avatarUrl = nil;
  self.department = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.name = @"";
    self.nickName = @"";
    self.avatarUrl = @"";
    self.department = @"";
    self.userType = 0;
    self.userUpdate = 0;
  }
  return self;
}
static ServerUserInfo* defaultServerUserInfoInstance = nil;
+ (void) initialize {
  if (self == [ServerUserInfo class]) {
    defaultServerUserInfoInstance = [[ServerUserInfo alloc] init];
  }
}
+ (ServerUserInfo*) defaultInstance {
  return defaultServerUserInfoInstance;
}
- (ServerUserInfo*) defaultInstance {
  return defaultServerUserInfoInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasName) {
    return NO;
  }
  if (!self.hasNickName) {
    return NO;
  }
  if (!self.hasAvatarUrl) {
    return NO;
  }
  if (!self.hasDepartment) {
    return NO;
  }
  if (!self.hasUserType) {
    return NO;
  }
  if (!self.hasUserUpdate) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  if (self.hasNickName) {
    [output writeString:3 value:self.nickName];
  }
  if (self.hasAvatarUrl) {
    [output writeString:4 value:self.avatarUrl];
  }
  if (self.hasDepartment) {
    [output writeString:5 value:self.department];
  }
  if (self.hasUserType) {
    [output writeUInt32:6 value:self.userType];
  }
  if (self.hasUserUpdate) {
    [output writeUInt32:7 value:self.userUpdate];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasName) {
    size_ += computeStringSize(2, self.name);
  }
  if (self.hasNickName) {
    size_ += computeStringSize(3, self.nickName);
  }
  if (self.hasAvatarUrl) {
    size_ += computeStringSize(4, self.avatarUrl);
  }
  if (self.hasDepartment) {
    size_ += computeStringSize(5, self.department);
  }
  if (self.hasUserType) {
    size_ += computeUInt32Size(6, self.userType);
  }
  if (self.hasUserUpdate) {
    size_ += computeUInt32Size(7, self.userUpdate);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ServerUserInfo*) parseFromData:(NSData*) data {
  return (ServerUserInfo*)[[[ServerUserInfo builder] mergeFromData:data] build];
}
+ (ServerUserInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ServerUserInfo*)[[[ServerUserInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ServerUserInfo*) parseFromInputStream:(NSInputStream*) input {
  return (ServerUserInfo*)[[[ServerUserInfo builder] mergeFromInputStream:input] build];
}
+ (ServerUserInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ServerUserInfo*)[[[ServerUserInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ServerUserInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ServerUserInfo*)[[[ServerUserInfo builder] mergeFromCodedInputStream:input] build];
}
+ (ServerUserInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ServerUserInfo*)[[[ServerUserInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ServerUserInfoBuilder*) builder {
  return [[ServerUserInfoBuilder alloc] init];
}
+ (ServerUserInfoBuilder*) builderWithPrototype:(ServerUserInfo*) prototype {
  return [[ServerUserInfo builder] mergeFrom:prototype];
}
- (ServerUserInfoBuilder*) builder {
  return [ServerUserInfo builder];
}
- (ServerUserInfoBuilder*) toBuilder {
  return [ServerUserInfo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasNickName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nickName", self.nickName];
  }
  if (self.hasAvatarUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"avatarUrl", self.avatarUrl];
  }
  if (self.hasDepartment) {
    [output appendFormat:@"%@%@: %@\n", indent, @"department", self.department];
  }
  if (self.hasUserType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userType", [NSNumber numberWithInteger:self.userType]];
  }
  if (self.hasUserUpdate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userUpdate", [NSNumber numberWithInteger:self.userUpdate]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ServerUserInfo class]]) {
    return NO;
  }
  ServerUserInfo *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasNickName == otherMessage.hasNickName &&
      (!self.hasNickName || [self.nickName isEqual:otherMessage.nickName]) &&
      self.hasAvatarUrl == otherMessage.hasAvatarUrl &&
      (!self.hasAvatarUrl || [self.avatarUrl isEqual:otherMessage.avatarUrl]) &&
      self.hasDepartment == otherMessage.hasDepartment &&
      (!self.hasDepartment || [self.department isEqual:otherMessage.department]) &&
      self.hasUserType == otherMessage.hasUserType &&
      (!self.hasUserType || self.userType == otherMessage.userType) &&
      self.hasUserUpdate == otherMessage.hasUserUpdate &&
      (!self.hasUserUpdate || self.userUpdate == otherMessage.userUpdate) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasNickName) {
    hashCode = hashCode * 31 + [self.nickName hash];
  }
  if (self.hasAvatarUrl) {
    hashCode = hashCode * 31 + [self.avatarUrl hash];
  }
  if (self.hasDepartment) {
    hashCode = hashCode * 31 + [self.department hash];
  }
  if (self.hasUserType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userType] hash];
  }
  if (self.hasUserUpdate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userUpdate] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ServerUserInfoBuilder()
@property (strong) ServerUserInfo* result;
@end

@implementation ServerUserInfoBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[ServerUserInfo alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (ServerUserInfoBuilder*) clear {
  self.result = [[ServerUserInfo alloc] init];
  return self;
}
- (ServerUserInfoBuilder*) clone {
  return [ServerUserInfo builderWithPrototype:result];
}
- (ServerUserInfo*) defaultInstance {
  return [ServerUserInfo defaultInstance];
}
- (ServerUserInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ServerUserInfo*) buildPartial {
  ServerUserInfo* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (ServerUserInfoBuilder*) mergeFrom:(ServerUserInfo*) other {
  if (other == [ServerUserInfo defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasNickName) {
    [self setNickName:other.nickName];
  }
  if (other.hasAvatarUrl) {
    [self setAvatarUrl:other.avatarUrl];
  }
  if (other.hasDepartment) {
    [self setDepartment:other.department];
  }
  if (other.hasUserType) {
    [self setUserType:other.userType];
  }
  if (other.hasUserUpdate) {
    [self setUserUpdate:other.userUpdate];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ServerUserInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ServerUserInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 26: {
        [self setNickName:[input readString]];
        break;
      }
      case 34: {
        [self setAvatarUrl:[input readString]];
        break;
      }
      case 42: {
        [self setDepartment:[input readString]];
        break;
      }
      case 48: {
        [self setUserType:[input readUInt32]];
        break;
      }
      case 56: {
        [self setUserUpdate:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (UInt32) userId {
  return result.userId;
}
- (ServerUserInfoBuilder*) setUserId:(UInt32) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (ServerUserInfoBuilder*) clearUserId {
  result.hasUserId = NO;
  result.userId = 0;
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (ServerUserInfoBuilder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (ServerUserInfoBuilder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasNickName {
  return result.hasNickName;
}
- (NSString*) nickName {
  return result.nickName;
}
- (ServerUserInfoBuilder*) setNickName:(NSString*) value {
  result.hasNickName = YES;
  result.nickName = value;
  return self;
}
- (ServerUserInfoBuilder*) clearNickName {
  result.hasNickName = NO;
  result.nickName = @"";
  return self;
}
- (BOOL) hasAvatarUrl {
  return result.hasAvatarUrl;
}
- (NSString*) avatarUrl {
  return result.avatarUrl;
}
- (ServerUserInfoBuilder*) setAvatarUrl:(NSString*) value {
  result.hasAvatarUrl = YES;
  result.avatarUrl = value;
  return self;
}
- (ServerUserInfoBuilder*) clearAvatarUrl {
  result.hasAvatarUrl = NO;
  result.avatarUrl = @"";
  return self;
}
- (BOOL) hasDepartment {
  return result.hasDepartment;
}
- (NSString*) department {
  return result.department;
}
- (ServerUserInfoBuilder*) setDepartment:(NSString*) value {
  result.hasDepartment = YES;
  result.department = value;
  return self;
}
- (ServerUserInfoBuilder*) clearDepartment {
  result.hasDepartment = NO;
  result.department = @"";
  return self;
}
- (BOOL) hasUserType {
  return result.hasUserType;
}
- (UInt32) userType {
  return result.userType;
}
- (ServerUserInfoBuilder*) setUserType:(UInt32) value {
  result.hasUserType = YES;
  result.userType = value;
  return self;
}
- (ServerUserInfoBuilder*) clearUserType {
  result.hasUserType = NO;
  result.userType = 0;
  return self;
}
- (BOOL) hasUserUpdate {
  return result.hasUserUpdate;
}
- (UInt32) userUpdate {
  return result.userUpdate;
}
- (ServerUserInfoBuilder*) setUserUpdate:(UInt32) value {
  result.hasUserUpdate = YES;
  result.userUpdate = value;
  return self;
}
- (ServerUserInfoBuilder*) clearUserUpdate {
  result.hasUserUpdate = NO;
  result.userUpdate = 0;
  return self;
}
@end

@interface ClientUserStat ()
@property (strong) NSString* userId;
@property UserStatType userStat;
@end

@implementation ClientUserStat

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value_ {
  hasUserId_ = !!value_;
}
@synthesize userId;
- (BOOL) hasUserStat {
  return !!hasUserStat_;
}
- (void) setHasUserStat:(BOOL) value_ {
  hasUserStat_ = !!value_;
}
@synthesize userStat;
- (void) dealloc {
  self.userId = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.userId = @"";
    self.userStat = UserStatTypeUserStatusOnline;
  }
  return self;
}
static ClientUserStat* defaultClientUserStatInstance = nil;
+ (void) initialize {
  if (self == [ClientUserStat class]) {
    defaultClientUserStatInstance = [[ClientUserStat alloc] init];
  }
}
+ (ClientUserStat*) defaultInstance {
  return defaultClientUserStatInstance;
}
- (ClientUserStat*) defaultInstance {
  return defaultClientUserStatInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasUserStat) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeString:1 value:self.userId];
  }
  if (self.hasUserStat) {
    [output writeEnum:2 value:self.userStat];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeStringSize(1, self.userId);
  }
  if (self.hasUserStat) {
    size_ += computeEnumSize(2, self.userStat);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ClientUserStat*) parseFromData:(NSData*) data {
  return (ClientUserStat*)[[[ClientUserStat builder] mergeFromData:data] build];
}
+ (ClientUserStat*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ClientUserStat*)[[[ClientUserStat builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ClientUserStat*) parseFromInputStream:(NSInputStream*) input {
  return (ClientUserStat*)[[[ClientUserStat builder] mergeFromInputStream:input] build];
}
+ (ClientUserStat*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ClientUserStat*)[[[ClientUserStat builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ClientUserStat*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ClientUserStat*)[[[ClientUserStat builder] mergeFromCodedInputStream:input] build];
}
+ (ClientUserStat*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ClientUserStat*)[[[ClientUserStat builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ClientUserStatBuilder*) builder {
  return [[ClientUserStatBuilder alloc] init];
}
+ (ClientUserStatBuilder*) builderWithPrototype:(ClientUserStat*) prototype {
  return [[ClientUserStat builder] mergeFrom:prototype];
}
- (ClientUserStatBuilder*) builder {
  return [ClientUserStat builder];
}
- (ClientUserStatBuilder*) toBuilder {
  return [ClientUserStat builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", self.userId];
  }
  if (self.hasUserStat) {
    [output appendFormat:@"%@%@: %d\n", indent, @"userStat", self.userStat];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ClientUserStat class]]) {
    return NO;
  }
  ClientUserStat *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || [self.userId isEqual:otherMessage.userId]) &&
      self.hasUserStat == otherMessage.hasUserStat &&
      (!self.hasUserStat || self.userStat == otherMessage.userStat) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [self.userId hash];
  }
  if (self.hasUserStat) {
    hashCode = hashCode * 31 + self.userStat;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ClientUserStatBuilder()
@property (strong) ClientUserStat* result;
@end

@implementation ClientUserStatBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[ClientUserStat alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (ClientUserStatBuilder*) clear {
  self.result = [[ClientUserStat alloc] init];
  return self;
}
- (ClientUserStatBuilder*) clone {
  return [ClientUserStat builderWithPrototype:result];
}
- (ClientUserStat*) defaultInstance {
  return [ClientUserStat defaultInstance];
}
- (ClientUserStat*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ClientUserStat*) buildPartial {
  ClientUserStat* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (ClientUserStatBuilder*) mergeFrom:(ClientUserStat*) other {
  if (other == [ClientUserStat defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasUserStat) {
    [self setUserStat:other.userStat];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ClientUserStatBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ClientUserStatBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserId:[input readString]];
        break;
      }
      case 16: {
        UserStatType value = (UserStatType)[input readEnum];
        if (UserStatTypeIsValidValue(value)) {
          [self setUserStat:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (NSString*) userId {
  return result.userId;
}
- (ClientUserStatBuilder*) setUserId:(NSString*) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (ClientUserStatBuilder*) clearUserId {
  result.hasUserId = NO;
  result.userId = @"";
  return self;
}
- (BOOL) hasUserStat {
  return result.hasUserStat;
}
- (UserStatType) userStat {
  return result.userStat;
}
- (ClientUserStatBuilder*) setUserStat:(UserStatType) value {
  result.hasUserStat = YES;
  result.userStat = value;
  return self;
}
- (ClientUserStatBuilder*) clearUserStat {
  result.hasUserStat = NO;
  result.userStat = UserStatTypeUserStatusOnline;
  return self;
}
@end

@interface ServerUserStat ()
@property UInt32 userId;
@property UserStatType userStat;
@end

@implementation ServerUserStat

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value_ {
  hasUserId_ = !!value_;
}
@synthesize userId;
- (BOOL) hasUserStat {
  return !!hasUserStat_;
}
- (void) setHasUserStat:(BOOL) value_ {
  hasUserStat_ = !!value_;
}
@synthesize userStat;
- (void) dealloc {
}
- (id) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.userStat = UserStatTypeUserStatusOnline;
  }
  return self;
}
static ServerUserStat* defaultServerUserStatInstance = nil;
+ (void) initialize {
  if (self == [ServerUserStat class]) {
    defaultServerUserStatInstance = [[ServerUserStat alloc] init];
  }
}
+ (ServerUserStat*) defaultInstance {
  return defaultServerUserStatInstance;
}
- (ServerUserStat*) defaultInstance {
  return defaultServerUserStatInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasUserStat) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasUserStat) {
    [output writeEnum:2 value:self.userStat];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasUserStat) {
    size_ += computeEnumSize(2, self.userStat);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ServerUserStat*) parseFromData:(NSData*) data {
  return (ServerUserStat*)[[[ServerUserStat builder] mergeFromData:data] build];
}
+ (ServerUserStat*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ServerUserStat*)[[[ServerUserStat builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ServerUserStat*) parseFromInputStream:(NSInputStream*) input {
  return (ServerUserStat*)[[[ServerUserStat builder] mergeFromInputStream:input] build];
}
+ (ServerUserStat*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ServerUserStat*)[[[ServerUserStat builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ServerUserStat*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ServerUserStat*)[[[ServerUserStat builder] mergeFromCodedInputStream:input] build];
}
+ (ServerUserStat*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ServerUserStat*)[[[ServerUserStat builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ServerUserStatBuilder*) builder {
  return [[ServerUserStatBuilder alloc] init];
}
+ (ServerUserStatBuilder*) builderWithPrototype:(ServerUserStat*) prototype {
  return [[ServerUserStat builder] mergeFrom:prototype];
}
- (ServerUserStatBuilder*) builder {
  return [ServerUserStat builder];
}
- (ServerUserStatBuilder*) toBuilder {
  return [ServerUserStat builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasUserStat) {
    [output appendFormat:@"%@%@: %d\n", indent, @"userStat", self.userStat];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ServerUserStat class]]) {
    return NO;
  }
  ServerUserStat *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasUserStat == otherMessage.hasUserStat &&
      (!self.hasUserStat || self.userStat == otherMessage.userStat) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasUserStat) {
    hashCode = hashCode * 31 + self.userStat;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ServerUserStatBuilder()
@property (strong) ServerUserStat* result;
@end

@implementation ServerUserStatBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[ServerUserStat alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (ServerUserStatBuilder*) clear {
  self.result = [[ServerUserStat alloc] init];
  return self;
}
- (ServerUserStatBuilder*) clone {
  return [ServerUserStat builderWithPrototype:result];
}
- (ServerUserStat*) defaultInstance {
  return [ServerUserStat defaultInstance];
}
- (ServerUserStat*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ServerUserStat*) buildPartial {
  ServerUserStat* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (ServerUserStatBuilder*) mergeFrom:(ServerUserStat*) other {
  if (other == [ServerUserStat defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasUserStat) {
    [self setUserStat:other.userStat];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ServerUserStatBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ServerUserStatBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 16: {
        UserStatType value = (UserStatType)[input readEnum];
        if (UserStatTypeIsValidValue(value)) {
          [self setUserStat:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (UInt32) userId {
  return result.userId;
}
- (ServerUserStatBuilder*) setUserId:(UInt32) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (ServerUserStatBuilder*) clearUserId {
  result.hasUserId = NO;
  result.userId = 0;
  return self;
}
- (BOOL) hasUserStat {
  return result.hasUserStat;
}
- (UserStatType) userStat {
  return result.userStat;
}
- (ServerUserStatBuilder*) setUserStat:(UserStatType) value {
  result.hasUserStat = YES;
  result.userStat = value;
  return self;
}
- (ServerUserStatBuilder*) clearUserStat {
  result.hasUserStat = NO;
  result.userStat = UserStatTypeUserStatusOnline;
  return self;
}
@end

@interface ClientUnReadInfo ()
@property (strong) NSString* userId;
@property UInt32 unreadCount;
@end

@implementation ClientUnReadInfo

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value_ {
  hasUserId_ = !!value_;
}
@synthesize userId;
- (BOOL) hasUnreadCount {
  return !!hasUnreadCount_;
}
- (void) setHasUnreadCount:(BOOL) value_ {
  hasUnreadCount_ = !!value_;
}
@synthesize unreadCount;
- (void) dealloc {
  self.userId = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.userId = @"";
    self.unreadCount = 0;
  }
  return self;
}
static ClientUnReadInfo* defaultClientUnReadInfoInstance = nil;
+ (void) initialize {
  if (self == [ClientUnReadInfo class]) {
    defaultClientUnReadInfoInstance = [[ClientUnReadInfo alloc] init];
  }
}
+ (ClientUnReadInfo*) defaultInstance {
  return defaultClientUnReadInfoInstance;
}
- (ClientUnReadInfo*) defaultInstance {
  return defaultClientUnReadInfoInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasUnreadCount) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeString:1 value:self.userId];
  }
  if (self.hasUnreadCount) {
    [output writeUInt32:2 value:self.unreadCount];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeStringSize(1, self.userId);
  }
  if (self.hasUnreadCount) {
    size_ += computeUInt32Size(2, self.unreadCount);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ClientUnReadInfo*) parseFromData:(NSData*) data {
  return (ClientUnReadInfo*)[[[ClientUnReadInfo builder] mergeFromData:data] build];
}
+ (ClientUnReadInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ClientUnReadInfo*)[[[ClientUnReadInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ClientUnReadInfo*) parseFromInputStream:(NSInputStream*) input {
  return (ClientUnReadInfo*)[[[ClientUnReadInfo builder] mergeFromInputStream:input] build];
}
+ (ClientUnReadInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ClientUnReadInfo*)[[[ClientUnReadInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ClientUnReadInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ClientUnReadInfo*)[[[ClientUnReadInfo builder] mergeFromCodedInputStream:input] build];
}
+ (ClientUnReadInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ClientUnReadInfo*)[[[ClientUnReadInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ClientUnReadInfoBuilder*) builder {
  return [[ClientUnReadInfoBuilder alloc] init];
}
+ (ClientUnReadInfoBuilder*) builderWithPrototype:(ClientUnReadInfo*) prototype {
  return [[ClientUnReadInfo builder] mergeFrom:prototype];
}
- (ClientUnReadInfoBuilder*) builder {
  return [ClientUnReadInfo builder];
}
- (ClientUnReadInfoBuilder*) toBuilder {
  return [ClientUnReadInfo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", self.userId];
  }
  if (self.hasUnreadCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"unreadCount", [NSNumber numberWithInteger:self.unreadCount]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ClientUnReadInfo class]]) {
    return NO;
  }
  ClientUnReadInfo *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || [self.userId isEqual:otherMessage.userId]) &&
      self.hasUnreadCount == otherMessage.hasUnreadCount &&
      (!self.hasUnreadCount || self.unreadCount == otherMessage.unreadCount) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [self.userId hash];
  }
  if (self.hasUnreadCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.unreadCount] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ClientUnReadInfoBuilder()
@property (strong) ClientUnReadInfo* result;
@end

@implementation ClientUnReadInfoBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[ClientUnReadInfo alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (ClientUnReadInfoBuilder*) clear {
  self.result = [[ClientUnReadInfo alloc] init];
  return self;
}
- (ClientUnReadInfoBuilder*) clone {
  return [ClientUnReadInfo builderWithPrototype:result];
}
- (ClientUnReadInfo*) defaultInstance {
  return [ClientUnReadInfo defaultInstance];
}
- (ClientUnReadInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ClientUnReadInfo*) buildPartial {
  ClientUnReadInfo* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (ClientUnReadInfoBuilder*) mergeFrom:(ClientUnReadInfo*) other {
  if (other == [ClientUnReadInfo defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasUnreadCount) {
    [self setUnreadCount:other.unreadCount];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ClientUnReadInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ClientUnReadInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserId:[input readString]];
        break;
      }
      case 16: {
        [self setUnreadCount:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (NSString*) userId {
  return result.userId;
}
- (ClientUnReadInfoBuilder*) setUserId:(NSString*) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (ClientUnReadInfoBuilder*) clearUserId {
  result.hasUserId = NO;
  result.userId = @"";
  return self;
}
- (BOOL) hasUnreadCount {
  return result.hasUnreadCount;
}
- (UInt32) unreadCount {
  return result.unreadCount;
}
- (ClientUnReadInfoBuilder*) setUnreadCount:(UInt32) value {
  result.hasUnreadCount = YES;
  result.unreadCount = value;
  return self;
}
- (ClientUnReadInfoBuilder*) clearUnreadCount {
  result.hasUnreadCount = NO;
  result.unreadCount = 0;
  return self;
}
@end

@interface ServerUnReadInfo ()
@property UInt32 userId;
@property UInt32 unreadCount;
@end

@implementation ServerUnReadInfo

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value_ {
  hasUserId_ = !!value_;
}
@synthesize userId;
- (BOOL) hasUnreadCount {
  return !!hasUnreadCount_;
}
- (void) setHasUnreadCount:(BOOL) value_ {
  hasUnreadCount_ = !!value_;
}
@synthesize unreadCount;
- (void) dealloc {
}
- (id) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.unreadCount = 0;
  }
  return self;
}
static ServerUnReadInfo* defaultServerUnReadInfoInstance = nil;
+ (void) initialize {
  if (self == [ServerUnReadInfo class]) {
    defaultServerUnReadInfoInstance = [[ServerUnReadInfo alloc] init];
  }
}
+ (ServerUnReadInfo*) defaultInstance {
  return defaultServerUnReadInfoInstance;
}
- (ServerUnReadInfo*) defaultInstance {
  return defaultServerUnReadInfoInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasUnreadCount) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt32:1 value:self.userId];
  }
  if (self.hasUnreadCount) {
    [output writeUInt32:2 value:self.unreadCount];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt32Size(1, self.userId);
  }
  if (self.hasUnreadCount) {
    size_ += computeUInt32Size(2, self.unreadCount);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ServerUnReadInfo*) parseFromData:(NSData*) data {
  return (ServerUnReadInfo*)[[[ServerUnReadInfo builder] mergeFromData:data] build];
}
+ (ServerUnReadInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ServerUnReadInfo*)[[[ServerUnReadInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ServerUnReadInfo*) parseFromInputStream:(NSInputStream*) input {
  return (ServerUnReadInfo*)[[[ServerUnReadInfo builder] mergeFromInputStream:input] build];
}
+ (ServerUnReadInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ServerUnReadInfo*)[[[ServerUnReadInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ServerUnReadInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ServerUnReadInfo*)[[[ServerUnReadInfo builder] mergeFromCodedInputStream:input] build];
}
+ (ServerUnReadInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ServerUnReadInfo*)[[[ServerUnReadInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ServerUnReadInfoBuilder*) builder {
  return [[ServerUnReadInfoBuilder alloc] init];
}
+ (ServerUnReadInfoBuilder*) builderWithPrototype:(ServerUnReadInfo*) prototype {
  return [[ServerUnReadInfo builder] mergeFrom:prototype];
}
- (ServerUnReadInfoBuilder*) builder {
  return [ServerUnReadInfo builder];
}
- (ServerUnReadInfoBuilder*) toBuilder {
  return [ServerUnReadInfo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasUnreadCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"unreadCount", [NSNumber numberWithInteger:self.unreadCount]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ServerUnReadInfo class]]) {
    return NO;
  }
  ServerUnReadInfo *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasUnreadCount == otherMessage.hasUnreadCount &&
      (!self.hasUnreadCount || self.unreadCount == otherMessage.unreadCount) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasUnreadCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.unreadCount] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ServerUnReadInfoBuilder()
@property (strong) ServerUnReadInfo* result;
@end

@implementation ServerUnReadInfoBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[ServerUnReadInfo alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (ServerUnReadInfoBuilder*) clear {
  self.result = [[ServerUnReadInfo alloc] init];
  return self;
}
- (ServerUnReadInfoBuilder*) clone {
  return [ServerUnReadInfo builderWithPrototype:result];
}
- (ServerUnReadInfo*) defaultInstance {
  return [ServerUnReadInfo defaultInstance];
}
- (ServerUnReadInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ServerUnReadInfo*) buildPartial {
  ServerUnReadInfo* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (ServerUnReadInfoBuilder*) mergeFrom:(ServerUnReadInfo*) other {
  if (other == [ServerUnReadInfo defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasUnreadCount) {
    [self setUnreadCount:other.unreadCount];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ServerUnReadInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ServerUnReadInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setUnreadCount:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (UInt32) userId {
  return result.userId;
}
- (ServerUnReadInfoBuilder*) setUserId:(UInt32) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (ServerUnReadInfoBuilder*) clearUserId {
  result.hasUserId = NO;
  result.userId = 0;
  return self;
}
- (BOOL) hasUnreadCount {
  return result.hasUnreadCount;
}
- (UInt32) unreadCount {
  return result.unreadCount;
}
- (ServerUnReadInfoBuilder*) setUnreadCount:(UInt32) value {
  result.hasUnreadCount = YES;
  result.unreadCount = value;
  return self;
}
- (ServerUnReadInfoBuilder*) clearUnreadCount {
  result.hasUnreadCount = NO;
  result.unreadCount = 0;
  return self;
}
@end

@interface ClientMsgInfo ()
@property (strong) NSString* fromUserId;
@property (strong) NSString* fromUserName;
@property (strong) NSString* fromUserNickName;
@property (strong) NSString* fromUserAvatarUrl;
@property UInt32 createTime;
@property UInt32 msgType;
@property (strong) NSString* msgContent;
@end

@implementation ClientMsgInfo

- (BOOL) hasFromUserId {
  return !!hasFromUserId_;
}
- (void) setHasFromUserId:(BOOL) value_ {
  hasFromUserId_ = !!value_;
}
@synthesize fromUserId;
- (BOOL) hasFromUserName {
  return !!hasFromUserName_;
}
- (void) setHasFromUserName:(BOOL) value_ {
  hasFromUserName_ = !!value_;
}
@synthesize fromUserName;
- (BOOL) hasFromUserNickName {
  return !!hasFromUserNickName_;
}
- (void) setHasFromUserNickName:(BOOL) value_ {
  hasFromUserNickName_ = !!value_;
}
@synthesize fromUserNickName;
- (BOOL) hasFromUserAvatarUrl {
  return !!hasFromUserAvatarUrl_;
}
- (void) setHasFromUserAvatarUrl:(BOOL) value_ {
  hasFromUserAvatarUrl_ = !!value_;
}
@synthesize fromUserAvatarUrl;
- (BOOL) hasCreateTime {
  return !!hasCreateTime_;
}
- (void) setHasCreateTime:(BOOL) value_ {
  hasCreateTime_ = !!value_;
}
@synthesize createTime;
- (BOOL) hasMsgType {
  return !!hasMsgType_;
}
- (void) setHasMsgType:(BOOL) value_ {
  hasMsgType_ = !!value_;
}
@synthesize msgType;
- (BOOL) hasMsgContent {
  return !!hasMsgContent_;
}
- (void) setHasMsgContent:(BOOL) value_ {
  hasMsgContent_ = !!value_;
}
@synthesize msgContent;
- (void) dealloc {
  self.fromUserId = nil;
  self.fromUserName = nil;
  self.fromUserNickName = nil;
  self.fromUserAvatarUrl = nil;
  self.msgContent = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.fromUserId = @"";
    self.fromUserName = @"";
    self.fromUserNickName = @"";
    self.fromUserAvatarUrl = @"";
    self.createTime = 0;
    self.msgType = 0;
    self.msgContent = @"";
  }
  return self;
}
static ClientMsgInfo* defaultClientMsgInfoInstance = nil;
+ (void) initialize {
  if (self == [ClientMsgInfo class]) {
    defaultClientMsgInfoInstance = [[ClientMsgInfo alloc] init];
  }
}
+ (ClientMsgInfo*) defaultInstance {
  return defaultClientMsgInfoInstance;
}
- (ClientMsgInfo*) defaultInstance {
  return defaultClientMsgInfoInstance;
}
- (BOOL) isInitialized {
  if (!self.hasFromUserId) {
    return NO;
  }
  if (!self.hasFromUserName) {
    return NO;
  }
  if (!self.hasFromUserNickName) {
    return NO;
  }
  if (!self.hasFromUserAvatarUrl) {
    return NO;
  }
  if (!self.hasCreateTime) {
    return NO;
  }
  if (!self.hasMsgType) {
    return NO;
  }
  if (!self.hasMsgContent) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasFromUserId) {
    [output writeString:1 value:self.fromUserId];
  }
  if (self.hasFromUserName) {
    [output writeString:2 value:self.fromUserName];
  }
  if (self.hasFromUserNickName) {
    [output writeString:3 value:self.fromUserNickName];
  }
  if (self.hasFromUserAvatarUrl) {
    [output writeString:4 value:self.fromUserAvatarUrl];
  }
  if (self.hasCreateTime) {
    [output writeUInt32:5 value:self.createTime];
  }
  if (self.hasMsgType) {
    [output writeUInt32:6 value:self.msgType];
  }
  if (self.hasMsgContent) {
    [output writeString:7 value:self.msgContent];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasFromUserId) {
    size_ += computeStringSize(1, self.fromUserId);
  }
  if (self.hasFromUserName) {
    size_ += computeStringSize(2, self.fromUserName);
  }
  if (self.hasFromUserNickName) {
    size_ += computeStringSize(3, self.fromUserNickName);
  }
  if (self.hasFromUserAvatarUrl) {
    size_ += computeStringSize(4, self.fromUserAvatarUrl);
  }
  if (self.hasCreateTime) {
    size_ += computeUInt32Size(5, self.createTime);
  }
  if (self.hasMsgType) {
    size_ += computeUInt32Size(6, self.msgType);
  }
  if (self.hasMsgContent) {
    size_ += computeStringSize(7, self.msgContent);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ClientMsgInfo*) parseFromData:(NSData*) data {
  return (ClientMsgInfo*)[[[ClientMsgInfo builder] mergeFromData:data] build];
}
+ (ClientMsgInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ClientMsgInfo*)[[[ClientMsgInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ClientMsgInfo*) parseFromInputStream:(NSInputStream*) input {
  return (ClientMsgInfo*)[[[ClientMsgInfo builder] mergeFromInputStream:input] build];
}
+ (ClientMsgInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ClientMsgInfo*)[[[ClientMsgInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ClientMsgInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ClientMsgInfo*)[[[ClientMsgInfo builder] mergeFromCodedInputStream:input] build];
}
+ (ClientMsgInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ClientMsgInfo*)[[[ClientMsgInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ClientMsgInfoBuilder*) builder {
  return [[ClientMsgInfoBuilder alloc] init];
}
+ (ClientMsgInfoBuilder*) builderWithPrototype:(ClientMsgInfo*) prototype {
  return [[ClientMsgInfo builder] mergeFrom:prototype];
}
- (ClientMsgInfoBuilder*) builder {
  return [ClientMsgInfo builder];
}
- (ClientMsgInfoBuilder*) toBuilder {
  return [ClientMsgInfo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasFromUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromUserId", self.fromUserId];
  }
  if (self.hasFromUserName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromUserName", self.fromUserName];
  }
  if (self.hasFromUserNickName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromUserNickName", self.fromUserNickName];
  }
  if (self.hasFromUserAvatarUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromUserAvatarUrl", self.fromUserAvatarUrl];
  }
  if (self.hasCreateTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createTime", [NSNumber numberWithInteger:self.createTime]];
  }
  if (self.hasMsgType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msgType", [NSNumber numberWithInteger:self.msgType]];
  }
  if (self.hasMsgContent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msgContent", self.msgContent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ClientMsgInfo class]]) {
    return NO;
  }
  ClientMsgInfo *otherMessage = other;
  return
      self.hasFromUserId == otherMessage.hasFromUserId &&
      (!self.hasFromUserId || [self.fromUserId isEqual:otherMessage.fromUserId]) &&
      self.hasFromUserName == otherMessage.hasFromUserName &&
      (!self.hasFromUserName || [self.fromUserName isEqual:otherMessage.fromUserName]) &&
      self.hasFromUserNickName == otherMessage.hasFromUserNickName &&
      (!self.hasFromUserNickName || [self.fromUserNickName isEqual:otherMessage.fromUserNickName]) &&
      self.hasFromUserAvatarUrl == otherMessage.hasFromUserAvatarUrl &&
      (!self.hasFromUserAvatarUrl || [self.fromUserAvatarUrl isEqual:otherMessage.fromUserAvatarUrl]) &&
      self.hasCreateTime == otherMessage.hasCreateTime &&
      (!self.hasCreateTime || self.createTime == otherMessage.createTime) &&
      self.hasMsgType == otherMessage.hasMsgType &&
      (!self.hasMsgType || self.msgType == otherMessage.msgType) &&
      self.hasMsgContent == otherMessage.hasMsgContent &&
      (!self.hasMsgContent || [self.msgContent isEqual:otherMessage.msgContent]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasFromUserId) {
    hashCode = hashCode * 31 + [self.fromUserId hash];
  }
  if (self.hasFromUserName) {
    hashCode = hashCode * 31 + [self.fromUserName hash];
  }
  if (self.hasFromUserNickName) {
    hashCode = hashCode * 31 + [self.fromUserNickName hash];
  }
  if (self.hasFromUserAvatarUrl) {
    hashCode = hashCode * 31 + [self.fromUserAvatarUrl hash];
  }
  if (self.hasCreateTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.createTime] hash];
  }
  if (self.hasMsgType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.msgType] hash];
  }
  if (self.hasMsgContent) {
    hashCode = hashCode * 31 + [self.msgContent hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ClientMsgInfoBuilder()
@property (strong) ClientMsgInfo* result;
@end

@implementation ClientMsgInfoBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[ClientMsgInfo alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (ClientMsgInfoBuilder*) clear {
  self.result = [[ClientMsgInfo alloc] init];
  return self;
}
- (ClientMsgInfoBuilder*) clone {
  return [ClientMsgInfo builderWithPrototype:result];
}
- (ClientMsgInfo*) defaultInstance {
  return [ClientMsgInfo defaultInstance];
}
- (ClientMsgInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ClientMsgInfo*) buildPartial {
  ClientMsgInfo* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (ClientMsgInfoBuilder*) mergeFrom:(ClientMsgInfo*) other {
  if (other == [ClientMsgInfo defaultInstance]) {
    return self;
  }
  if (other.hasFromUserId) {
    [self setFromUserId:other.fromUserId];
  }
  if (other.hasFromUserName) {
    [self setFromUserName:other.fromUserName];
  }
  if (other.hasFromUserNickName) {
    [self setFromUserNickName:other.fromUserNickName];
  }
  if (other.hasFromUserAvatarUrl) {
    [self setFromUserAvatarUrl:other.fromUserAvatarUrl];
  }
  if (other.hasCreateTime) {
    [self setCreateTime:other.createTime];
  }
  if (other.hasMsgType) {
    [self setMsgType:other.msgType];
  }
  if (other.hasMsgContent) {
    [self setMsgContent:other.msgContent];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ClientMsgInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ClientMsgInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setFromUserId:[input readString]];
        break;
      }
      case 18: {
        [self setFromUserName:[input readString]];
        break;
      }
      case 26: {
        [self setFromUserNickName:[input readString]];
        break;
      }
      case 34: {
        [self setFromUserAvatarUrl:[input readString]];
        break;
      }
      case 40: {
        [self setCreateTime:[input readUInt32]];
        break;
      }
      case 48: {
        [self setMsgType:[input readUInt32]];
        break;
      }
      case 58: {
        [self setMsgContent:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasFromUserId {
  return result.hasFromUserId;
}
- (NSString*) fromUserId {
  return result.fromUserId;
}
- (ClientMsgInfoBuilder*) setFromUserId:(NSString*) value {
  result.hasFromUserId = YES;
  result.fromUserId = value;
  return self;
}
- (ClientMsgInfoBuilder*) clearFromUserId {
  result.hasFromUserId = NO;
  result.fromUserId = @"";
  return self;
}
- (BOOL) hasFromUserName {
  return result.hasFromUserName;
}
- (NSString*) fromUserName {
  return result.fromUserName;
}
- (ClientMsgInfoBuilder*) setFromUserName:(NSString*) value {
  result.hasFromUserName = YES;
  result.fromUserName = value;
  return self;
}
- (ClientMsgInfoBuilder*) clearFromUserName {
  result.hasFromUserName = NO;
  result.fromUserName = @"";
  return self;
}
- (BOOL) hasFromUserNickName {
  return result.hasFromUserNickName;
}
- (NSString*) fromUserNickName {
  return result.fromUserNickName;
}
- (ClientMsgInfoBuilder*) setFromUserNickName:(NSString*) value {
  result.hasFromUserNickName = YES;
  result.fromUserNickName = value;
  return self;
}
- (ClientMsgInfoBuilder*) clearFromUserNickName {
  result.hasFromUserNickName = NO;
  result.fromUserNickName = @"";
  return self;
}
- (BOOL) hasFromUserAvatarUrl {
  return result.hasFromUserAvatarUrl;
}
- (NSString*) fromUserAvatarUrl {
  return result.fromUserAvatarUrl;
}
- (ClientMsgInfoBuilder*) setFromUserAvatarUrl:(NSString*) value {
  result.hasFromUserAvatarUrl = YES;
  result.fromUserAvatarUrl = value;
  return self;
}
- (ClientMsgInfoBuilder*) clearFromUserAvatarUrl {
  result.hasFromUserAvatarUrl = NO;
  result.fromUserAvatarUrl = @"";
  return self;
}
- (BOOL) hasCreateTime {
  return result.hasCreateTime;
}
- (UInt32) createTime {
  return result.createTime;
}
- (ClientMsgInfoBuilder*) setCreateTime:(UInt32) value {
  result.hasCreateTime = YES;
  result.createTime = value;
  return self;
}
- (ClientMsgInfoBuilder*) clearCreateTime {
  result.hasCreateTime = NO;
  result.createTime = 0;
  return self;
}
- (BOOL) hasMsgType {
  return result.hasMsgType;
}
- (UInt32) msgType {
  return result.msgType;
}
- (ClientMsgInfoBuilder*) setMsgType:(UInt32) value {
  result.hasMsgType = YES;
  result.msgType = value;
  return self;
}
- (ClientMsgInfoBuilder*) clearMsgType {
  result.hasMsgType = NO;
  result.msgType = 0;
  return self;
}
- (BOOL) hasMsgContent {
  return result.hasMsgContent;
}
- (NSString*) msgContent {
  return result.msgContent;
}
- (ClientMsgInfoBuilder*) setMsgContent:(NSString*) value {
  result.hasMsgContent = YES;
  result.msgContent = value;
  return self;
}
- (ClientMsgInfoBuilder*) clearMsgContent {
  result.hasMsgContent = NO;
  result.msgContent = @"";
  return self;
}
@end

@interface ServerMsgInfo ()
@property UInt32 fromUserId;
@property (strong) NSString* fromUserName;
@property (strong) NSString* fromUserNickName;
@property (strong) NSString* fromUserAvatarUrl;
@property UInt32 createTime;
@property UInt32 msgType;
@property (strong) NSString* msgContent;
@end

@implementation ServerMsgInfo

- (BOOL) hasFromUserId {
  return !!hasFromUserId_;
}
- (void) setHasFromUserId:(BOOL) value_ {
  hasFromUserId_ = !!value_;
}
@synthesize fromUserId;
- (BOOL) hasFromUserName {
  return !!hasFromUserName_;
}
- (void) setHasFromUserName:(BOOL) value_ {
  hasFromUserName_ = !!value_;
}
@synthesize fromUserName;
- (BOOL) hasFromUserNickName {
  return !!hasFromUserNickName_;
}
- (void) setHasFromUserNickName:(BOOL) value_ {
  hasFromUserNickName_ = !!value_;
}
@synthesize fromUserNickName;
- (BOOL) hasFromUserAvatarUrl {
  return !!hasFromUserAvatarUrl_;
}
- (void) setHasFromUserAvatarUrl:(BOOL) value_ {
  hasFromUserAvatarUrl_ = !!value_;
}
@synthesize fromUserAvatarUrl;
- (BOOL) hasCreateTime {
  return !!hasCreateTime_;
}
- (void) setHasCreateTime:(BOOL) value_ {
  hasCreateTime_ = !!value_;
}
@synthesize createTime;
- (BOOL) hasMsgType {
  return !!hasMsgType_;
}
- (void) setHasMsgType:(BOOL) value_ {
  hasMsgType_ = !!value_;
}
@synthesize msgType;
- (BOOL) hasMsgContent {
  return !!hasMsgContent_;
}
- (void) setHasMsgContent:(BOOL) value_ {
  hasMsgContent_ = !!value_;
}
@synthesize msgContent;
- (void) dealloc {
  self.fromUserName = nil;
  self.fromUserNickName = nil;
  self.fromUserAvatarUrl = nil;
  self.msgContent = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.fromUserId = 0;
    self.fromUserName = @"";
    self.fromUserNickName = @"";
    self.fromUserAvatarUrl = @"";
    self.createTime = 0;
    self.msgType = 0;
    self.msgContent = @"";
  }
  return self;
}
static ServerMsgInfo* defaultServerMsgInfoInstance = nil;
+ (void) initialize {
  if (self == [ServerMsgInfo class]) {
    defaultServerMsgInfoInstance = [[ServerMsgInfo alloc] init];
  }
}
+ (ServerMsgInfo*) defaultInstance {
  return defaultServerMsgInfoInstance;
}
- (ServerMsgInfo*) defaultInstance {
  return defaultServerMsgInfoInstance;
}
- (BOOL) isInitialized {
  if (!self.hasFromUserId) {
    return NO;
  }
  if (!self.hasFromUserName) {
    return NO;
  }
  if (!self.hasFromUserNickName) {
    return NO;
  }
  if (!self.hasFromUserAvatarUrl) {
    return NO;
  }
  if (!self.hasCreateTime) {
    return NO;
  }
  if (!self.hasMsgType) {
    return NO;
  }
  if (!self.hasMsgContent) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasFromUserId) {
    [output writeUInt32:1 value:self.fromUserId];
  }
  if (self.hasFromUserName) {
    [output writeString:2 value:self.fromUserName];
  }
  if (self.hasFromUserNickName) {
    [output writeString:3 value:self.fromUserNickName];
  }
  if (self.hasFromUserAvatarUrl) {
    [output writeString:4 value:self.fromUserAvatarUrl];
  }
  if (self.hasCreateTime) {
    [output writeUInt32:5 value:self.createTime];
  }
  if (self.hasMsgType) {
    [output writeUInt32:6 value:self.msgType];
  }
  if (self.hasMsgContent) {
    [output writeString:7 value:self.msgContent];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasFromUserId) {
    size_ += computeUInt32Size(1, self.fromUserId);
  }
  if (self.hasFromUserName) {
    size_ += computeStringSize(2, self.fromUserName);
  }
  if (self.hasFromUserNickName) {
    size_ += computeStringSize(3, self.fromUserNickName);
  }
  if (self.hasFromUserAvatarUrl) {
    size_ += computeStringSize(4, self.fromUserAvatarUrl);
  }
  if (self.hasCreateTime) {
    size_ += computeUInt32Size(5, self.createTime);
  }
  if (self.hasMsgType) {
    size_ += computeUInt32Size(6, self.msgType);
  }
  if (self.hasMsgContent) {
    size_ += computeStringSize(7, self.msgContent);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ServerMsgInfo*) parseFromData:(NSData*) data {
  return (ServerMsgInfo*)[[[ServerMsgInfo builder] mergeFromData:data] build];
}
+ (ServerMsgInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ServerMsgInfo*)[[[ServerMsgInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ServerMsgInfo*) parseFromInputStream:(NSInputStream*) input {
  return (ServerMsgInfo*)[[[ServerMsgInfo builder] mergeFromInputStream:input] build];
}
+ (ServerMsgInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ServerMsgInfo*)[[[ServerMsgInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ServerMsgInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ServerMsgInfo*)[[[ServerMsgInfo builder] mergeFromCodedInputStream:input] build];
}
+ (ServerMsgInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ServerMsgInfo*)[[[ServerMsgInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ServerMsgInfoBuilder*) builder {
  return [[ServerMsgInfoBuilder alloc] init];
}
+ (ServerMsgInfoBuilder*) builderWithPrototype:(ServerMsgInfo*) prototype {
  return [[ServerMsgInfo builder] mergeFrom:prototype];
}
- (ServerMsgInfoBuilder*) builder {
  return [ServerMsgInfo builder];
}
- (ServerMsgInfoBuilder*) toBuilder {
  return [ServerMsgInfo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasFromUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromUserId", [NSNumber numberWithInteger:self.fromUserId]];
  }
  if (self.hasFromUserName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromUserName", self.fromUserName];
  }
  if (self.hasFromUserNickName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromUserNickName", self.fromUserNickName];
  }
  if (self.hasFromUserAvatarUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromUserAvatarUrl", self.fromUserAvatarUrl];
  }
  if (self.hasCreateTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createTime", [NSNumber numberWithInteger:self.createTime]];
  }
  if (self.hasMsgType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msgType", [NSNumber numberWithInteger:self.msgType]];
  }
  if (self.hasMsgContent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msgContent", self.msgContent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ServerMsgInfo class]]) {
    return NO;
  }
  ServerMsgInfo *otherMessage = other;
  return
      self.hasFromUserId == otherMessage.hasFromUserId &&
      (!self.hasFromUserId || self.fromUserId == otherMessage.fromUserId) &&
      self.hasFromUserName == otherMessage.hasFromUserName &&
      (!self.hasFromUserName || [self.fromUserName isEqual:otherMessage.fromUserName]) &&
      self.hasFromUserNickName == otherMessage.hasFromUserNickName &&
      (!self.hasFromUserNickName || [self.fromUserNickName isEqual:otherMessage.fromUserNickName]) &&
      self.hasFromUserAvatarUrl == otherMessage.hasFromUserAvatarUrl &&
      (!self.hasFromUserAvatarUrl || [self.fromUserAvatarUrl isEqual:otherMessage.fromUserAvatarUrl]) &&
      self.hasCreateTime == otherMessage.hasCreateTime &&
      (!self.hasCreateTime || self.createTime == otherMessage.createTime) &&
      self.hasMsgType == otherMessage.hasMsgType &&
      (!self.hasMsgType || self.msgType == otherMessage.msgType) &&
      self.hasMsgContent == otherMessage.hasMsgContent &&
      (!self.hasMsgContent || [self.msgContent isEqual:otherMessage.msgContent]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasFromUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.fromUserId] hash];
  }
  if (self.hasFromUserName) {
    hashCode = hashCode * 31 + [self.fromUserName hash];
  }
  if (self.hasFromUserNickName) {
    hashCode = hashCode * 31 + [self.fromUserNickName hash];
  }
  if (self.hasFromUserAvatarUrl) {
    hashCode = hashCode * 31 + [self.fromUserAvatarUrl hash];
  }
  if (self.hasCreateTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.createTime] hash];
  }
  if (self.hasMsgType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.msgType] hash];
  }
  if (self.hasMsgContent) {
    hashCode = hashCode * 31 + [self.msgContent hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ServerMsgInfoBuilder()
@property (strong) ServerMsgInfo* result;
@end

@implementation ServerMsgInfoBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[ServerMsgInfo alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (ServerMsgInfoBuilder*) clear {
  self.result = [[ServerMsgInfo alloc] init];
  return self;
}
- (ServerMsgInfoBuilder*) clone {
  return [ServerMsgInfo builderWithPrototype:result];
}
- (ServerMsgInfo*) defaultInstance {
  return [ServerMsgInfo defaultInstance];
}
- (ServerMsgInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ServerMsgInfo*) buildPartial {
  ServerMsgInfo* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (ServerMsgInfoBuilder*) mergeFrom:(ServerMsgInfo*) other {
  if (other == [ServerMsgInfo defaultInstance]) {
    return self;
  }
  if (other.hasFromUserId) {
    [self setFromUserId:other.fromUserId];
  }
  if (other.hasFromUserName) {
    [self setFromUserName:other.fromUserName];
  }
  if (other.hasFromUserNickName) {
    [self setFromUserNickName:other.fromUserNickName];
  }
  if (other.hasFromUserAvatarUrl) {
    [self setFromUserAvatarUrl:other.fromUserAvatarUrl];
  }
  if (other.hasCreateTime) {
    [self setCreateTime:other.createTime];
  }
  if (other.hasMsgType) {
    [self setMsgType:other.msgType];
  }
  if (other.hasMsgContent) {
    [self setMsgContent:other.msgContent];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ServerMsgInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ServerMsgInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setFromUserId:[input readUInt32]];
        break;
      }
      case 18: {
        [self setFromUserName:[input readString]];
        break;
      }
      case 26: {
        [self setFromUserNickName:[input readString]];
        break;
      }
      case 34: {
        [self setFromUserAvatarUrl:[input readString]];
        break;
      }
      case 40: {
        [self setCreateTime:[input readUInt32]];
        break;
      }
      case 48: {
        [self setMsgType:[input readUInt32]];
        break;
      }
      case 58: {
        [self setMsgContent:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasFromUserId {
  return result.hasFromUserId;
}
- (UInt32) fromUserId {
  return result.fromUserId;
}
- (ServerMsgInfoBuilder*) setFromUserId:(UInt32) value {
  result.hasFromUserId = YES;
  result.fromUserId = value;
  return self;
}
- (ServerMsgInfoBuilder*) clearFromUserId {
  result.hasFromUserId = NO;
  result.fromUserId = 0;
  return self;
}
- (BOOL) hasFromUserName {
  return result.hasFromUserName;
}
- (NSString*) fromUserName {
  return result.fromUserName;
}
- (ServerMsgInfoBuilder*) setFromUserName:(NSString*) value {
  result.hasFromUserName = YES;
  result.fromUserName = value;
  return self;
}
- (ServerMsgInfoBuilder*) clearFromUserName {
  result.hasFromUserName = NO;
  result.fromUserName = @"";
  return self;
}
- (BOOL) hasFromUserNickName {
  return result.hasFromUserNickName;
}
- (NSString*) fromUserNickName {
  return result.fromUserNickName;
}
- (ServerMsgInfoBuilder*) setFromUserNickName:(NSString*) value {
  result.hasFromUserNickName = YES;
  result.fromUserNickName = value;
  return self;
}
- (ServerMsgInfoBuilder*) clearFromUserNickName {
  result.hasFromUserNickName = NO;
  result.fromUserNickName = @"";
  return self;
}
- (BOOL) hasFromUserAvatarUrl {
  return result.hasFromUserAvatarUrl;
}
- (NSString*) fromUserAvatarUrl {
  return result.fromUserAvatarUrl;
}
- (ServerMsgInfoBuilder*) setFromUserAvatarUrl:(NSString*) value {
  result.hasFromUserAvatarUrl = YES;
  result.fromUserAvatarUrl = value;
  return self;
}
- (ServerMsgInfoBuilder*) clearFromUserAvatarUrl {
  result.hasFromUserAvatarUrl = NO;
  result.fromUserAvatarUrl = @"";
  return self;
}
- (BOOL) hasCreateTime {
  return result.hasCreateTime;
}
- (UInt32) createTime {
  return result.createTime;
}
- (ServerMsgInfoBuilder*) setCreateTime:(UInt32) value {
  result.hasCreateTime = YES;
  result.createTime = value;
  return self;
}
- (ServerMsgInfoBuilder*) clearCreateTime {
  result.hasCreateTime = NO;
  result.createTime = 0;
  return self;
}
- (BOOL) hasMsgType {
  return result.hasMsgType;
}
- (UInt32) msgType {
  return result.msgType;
}
- (ServerMsgInfoBuilder*) setMsgType:(UInt32) value {
  result.hasMsgType = YES;
  result.msgType = value;
  return self;
}
- (ServerMsgInfoBuilder*) clearMsgType {
  result.hasMsgType = NO;
  result.msgType = 0;
  return self;
}
- (BOOL) hasMsgContent {
  return result.hasMsgContent;
}
- (NSString*) msgContent {
  return result.msgContent;
}
- (ServerMsgInfoBuilder*) setMsgContent:(NSString*) value {
  result.hasMsgContent = YES;
  result.msgContent = value;
  return self;
}
- (ServerMsgInfoBuilder*) clearMsgContent {
  result.hasMsgContent = NO;
  result.msgContent = @"";
  return self;
}
@end

@interface ClientGroupInfo ()
@property (strong) NSString* groupId;
@property (strong) NSString* groupName;
@property (strong) NSString* groupAvatar;
@property (strong) NSString* groupCreatorId;
@property GroupType groupType;
@property UInt32 groupUpdated;
@property (strong) NSMutableArray * groupMemberListArray;
@end

@implementation ClientGroupInfo

- (BOOL) hasGroupId {
  return !!hasGroupId_;
}
- (void) setHasGroupId:(BOOL) value_ {
  hasGroupId_ = !!value_;
}
@synthesize groupId;
- (BOOL) hasGroupName {
  return !!hasGroupName_;
}
- (void) setHasGroupName:(BOOL) value_ {
  hasGroupName_ = !!value_;
}
@synthesize groupName;
- (BOOL) hasGroupAvatar {
  return !!hasGroupAvatar_;
}
- (void) setHasGroupAvatar:(BOOL) value_ {
  hasGroupAvatar_ = !!value_;
}
@synthesize groupAvatar;
- (BOOL) hasGroupCreatorId {
  return !!hasGroupCreatorId_;
}
- (void) setHasGroupCreatorId:(BOOL) value_ {
  hasGroupCreatorId_ = !!value_;
}
@synthesize groupCreatorId;
- (BOOL) hasGroupType {
  return !!hasGroupType_;
}
- (void) setHasGroupType:(BOOL) value_ {
  hasGroupType_ = !!value_;
}
@synthesize groupType;
- (BOOL) hasGroupUpdated {
  return !!hasGroupUpdated_;
}
- (void) setHasGroupUpdated:(BOOL) value_ {
  hasGroupUpdated_ = !!value_;
}
@synthesize groupUpdated;
@synthesize groupMemberListArray;
@dynamic groupMemberList;
- (void) dealloc {
  self.groupId = nil;
  self.groupName = nil;
  self.groupAvatar = nil;
  self.groupCreatorId = nil;
  self.groupMemberListArray = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.groupId = @"";
    self.groupName = @"";
    self.groupAvatar = @"";
    self.groupCreatorId = @"";
    self.groupType = GroupTypeNormalGroup;
    self.groupUpdated = 0;
  }
  return self;
}
static ClientGroupInfo* defaultClientGroupInfoInstance = nil;
+ (void) initialize {
  if (self == [ClientGroupInfo class]) {
    defaultClientGroupInfoInstance = [[ClientGroupInfo alloc] init];
  }
}
+ (ClientGroupInfo*) defaultInstance {
  return defaultClientGroupInfoInstance;
}
- (ClientGroupInfo*) defaultInstance {
  return defaultClientGroupInfoInstance;
}
- (NSArray *)groupMemberList {
  return groupMemberListArray;
}
- (NSString*)groupMemberListAtIndex:(NSUInteger)index {
  return [groupMemberListArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasGroupId) {
    return NO;
  }
  if (!self.hasGroupName) {
    return NO;
  }
  if (!self.hasGroupAvatar) {
    return NO;
  }
  if (!self.hasGroupCreatorId) {
    return NO;
  }
  if (!self.hasGroupType) {
    return NO;
  }
  if (!self.hasGroupUpdated) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasGroupId) {
    [output writeString:1 value:self.groupId];
  }
  if (self.hasGroupName) {
    [output writeString:2 value:self.groupName];
  }
  if (self.hasGroupAvatar) {
    [output writeString:3 value:self.groupAvatar];
  }
  if (self.hasGroupCreatorId) {
    [output writeString:4 value:self.groupCreatorId];
  }
  if (self.hasGroupType) {
    [output writeEnum:5 value:self.groupType];
  }
  if (self.hasGroupUpdated) {
    [output writeUInt32:6 value:self.groupUpdated];
  }
  [self.groupMemberListArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:7 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasGroupId) {
    size_ += computeStringSize(1, self.groupId);
  }
  if (self.hasGroupName) {
    size_ += computeStringSize(2, self.groupName);
  }
  if (self.hasGroupAvatar) {
    size_ += computeStringSize(3, self.groupAvatar);
  }
  if (self.hasGroupCreatorId) {
    size_ += computeStringSize(4, self.groupCreatorId);
  }
  if (self.hasGroupType) {
    size_ += computeEnumSize(5, self.groupType);
  }
  if (self.hasGroupUpdated) {
    size_ += computeUInt32Size(6, self.groupUpdated);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.groupMemberListArray.count;
    [self.groupMemberListArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ClientGroupInfo*) parseFromData:(NSData*) data {
  return (ClientGroupInfo*)[[[ClientGroupInfo builder] mergeFromData:data] build];
}
+ (ClientGroupInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ClientGroupInfo*)[[[ClientGroupInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ClientGroupInfo*) parseFromInputStream:(NSInputStream*) input {
  return (ClientGroupInfo*)[[[ClientGroupInfo builder] mergeFromInputStream:input] build];
}
+ (ClientGroupInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ClientGroupInfo*)[[[ClientGroupInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ClientGroupInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ClientGroupInfo*)[[[ClientGroupInfo builder] mergeFromCodedInputStream:input] build];
}
+ (ClientGroupInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ClientGroupInfo*)[[[ClientGroupInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ClientGroupInfoBuilder*) builder {
  return [[ClientGroupInfoBuilder alloc] init];
}
+ (ClientGroupInfoBuilder*) builderWithPrototype:(ClientGroupInfo*) prototype {
  return [[ClientGroupInfo builder] mergeFrom:prototype];
}
- (ClientGroupInfoBuilder*) builder {
  return [ClientGroupInfo builder];
}
- (ClientGroupInfoBuilder*) toBuilder {
  return [ClientGroupInfo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasGroupId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"groupId", self.groupId];
  }
  if (self.hasGroupName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"groupName", self.groupName];
  }
  if (self.hasGroupAvatar) {
    [output appendFormat:@"%@%@: %@\n", indent, @"groupAvatar", self.groupAvatar];
  }
  if (self.hasGroupCreatorId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"groupCreatorId", self.groupCreatorId];
  }
  if (self.hasGroupType) {
    [output appendFormat:@"%@%@: %d\n", indent, @"groupType", self.groupType];
  }
  if (self.hasGroupUpdated) {
    [output appendFormat:@"%@%@: %@\n", indent, @"groupUpdated", [NSNumber numberWithInteger:self.groupUpdated]];
  }
  [self.groupMemberListArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"groupMemberList", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ClientGroupInfo class]]) {
    return NO;
  }
  ClientGroupInfo *otherMessage = other;
  return
      self.hasGroupId == otherMessage.hasGroupId &&
      (!self.hasGroupId || [self.groupId isEqual:otherMessage.groupId]) &&
      self.hasGroupName == otherMessage.hasGroupName &&
      (!self.hasGroupName || [self.groupName isEqual:otherMessage.groupName]) &&
      self.hasGroupAvatar == otherMessage.hasGroupAvatar &&
      (!self.hasGroupAvatar || [self.groupAvatar isEqual:otherMessage.groupAvatar]) &&
      self.hasGroupCreatorId == otherMessage.hasGroupCreatorId &&
      (!self.hasGroupCreatorId || [self.groupCreatorId isEqual:otherMessage.groupCreatorId]) &&
      self.hasGroupType == otherMessage.hasGroupType &&
      (!self.hasGroupType || self.groupType == otherMessage.groupType) &&
      self.hasGroupUpdated == otherMessage.hasGroupUpdated &&
      (!self.hasGroupUpdated || self.groupUpdated == otherMessage.groupUpdated) &&
      [self.groupMemberListArray isEqualToArray:otherMessage.groupMemberListArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasGroupId) {
    hashCode = hashCode * 31 + [self.groupId hash];
  }
  if (self.hasGroupName) {
    hashCode = hashCode * 31 + [self.groupName hash];
  }
  if (self.hasGroupAvatar) {
    hashCode = hashCode * 31 + [self.groupAvatar hash];
  }
  if (self.hasGroupCreatorId) {
    hashCode = hashCode * 31 + [self.groupCreatorId hash];
  }
  if (self.hasGroupType) {
    hashCode = hashCode * 31 + self.groupType;
  }
  if (self.hasGroupUpdated) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.groupUpdated] hash];
  }
  [self.groupMemberListArray enumerateObjectsUsingBlock:^(id element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ClientGroupInfoBuilder()
@property (strong) ClientGroupInfo* result;
@end

@implementation ClientGroupInfoBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[ClientGroupInfo alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (ClientGroupInfoBuilder*) clear {
  self.result = [[ClientGroupInfo alloc] init];
  return self;
}
- (ClientGroupInfoBuilder*) clone {
  return [ClientGroupInfo builderWithPrototype:result];
}
- (ClientGroupInfo*) defaultInstance {
  return [ClientGroupInfo defaultInstance];
}
- (ClientGroupInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ClientGroupInfo*) buildPartial {
  ClientGroupInfo* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (ClientGroupInfoBuilder*) mergeFrom:(ClientGroupInfo*) other {
  if (other == [ClientGroupInfo defaultInstance]) {
    return self;
  }
  if (other.hasGroupId) {
    [self setGroupId:other.groupId];
  }
  if (other.hasGroupName) {
    [self setGroupName:other.groupName];
  }
  if (other.hasGroupAvatar) {
    [self setGroupAvatar:other.groupAvatar];
  }
  if (other.hasGroupCreatorId) {
    [self setGroupCreatorId:other.groupCreatorId];
  }
  if (other.hasGroupType) {
    [self setGroupType:other.groupType];
  }
  if (other.hasGroupUpdated) {
    [self setGroupUpdated:other.groupUpdated];
  }
  if (other.groupMemberListArray.count > 0) {
    if (result.groupMemberListArray == nil) {
      result.groupMemberListArray = [[NSMutableArray alloc] initWithArray:other.groupMemberListArray];
    } else {
      [result.groupMemberListArray addObjectsFromArray:other.groupMemberListArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ClientGroupInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ClientGroupInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setGroupId:[input readString]];
        break;
      }
      case 18: {
        [self setGroupName:[input readString]];
        break;
      }
      case 26: {
        [self setGroupAvatar:[input readString]];
        break;
      }
      case 34: {
        [self setGroupCreatorId:[input readString]];
        break;
      }
      case 40: {
        GroupType value = (GroupType)[input readEnum];
        if (GroupTypeIsValidValue(value)) {
          [self setGroupType:value];
        } else {
          [unknownFields mergeVarintField:5 value:value];
        }
        break;
      }
      case 48: {
        [self setGroupUpdated:[input readUInt32]];
        break;
      }
      case 58: {
        [self addGroupMemberList:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasGroupId {
  return result.hasGroupId;
}
- (NSString*) groupId {
  return result.groupId;
}
- (ClientGroupInfoBuilder*) setGroupId:(NSString*) value {
  result.hasGroupId = YES;
  result.groupId = value;
  return self;
}
- (ClientGroupInfoBuilder*) clearGroupId {
  result.hasGroupId = NO;
  result.groupId = @"";
  return self;
}
- (BOOL) hasGroupName {
  return result.hasGroupName;
}
- (NSString*) groupName {
  return result.groupName;
}
- (ClientGroupInfoBuilder*) setGroupName:(NSString*) value {
  result.hasGroupName = YES;
  result.groupName = value;
  return self;
}
- (ClientGroupInfoBuilder*) clearGroupName {
  result.hasGroupName = NO;
  result.groupName = @"";
  return self;
}
- (BOOL) hasGroupAvatar {
  return result.hasGroupAvatar;
}
- (NSString*) groupAvatar {
  return result.groupAvatar;
}
- (ClientGroupInfoBuilder*) setGroupAvatar:(NSString*) value {
  result.hasGroupAvatar = YES;
  result.groupAvatar = value;
  return self;
}
- (ClientGroupInfoBuilder*) clearGroupAvatar {
  result.hasGroupAvatar = NO;
  result.groupAvatar = @"";
  return self;
}
- (BOOL) hasGroupCreatorId {
  return result.hasGroupCreatorId;
}
- (NSString*) groupCreatorId {
  return result.groupCreatorId;
}
- (ClientGroupInfoBuilder*) setGroupCreatorId:(NSString*) value {
  result.hasGroupCreatorId = YES;
  result.groupCreatorId = value;
  return self;
}
- (ClientGroupInfoBuilder*) clearGroupCreatorId {
  result.hasGroupCreatorId = NO;
  result.groupCreatorId = @"";
  return self;
}
- (BOOL) hasGroupType {
  return result.hasGroupType;
}
- (GroupType) groupType {
  return result.groupType;
}
- (ClientGroupInfoBuilder*) setGroupType:(GroupType) value {
  result.hasGroupType = YES;
  result.groupType = value;
  return self;
}
- (ClientGroupInfoBuilder*) clearGroupType {
  result.hasGroupType = NO;
  result.groupType = GroupTypeNormalGroup;
  return self;
}
- (BOOL) hasGroupUpdated {
  return result.hasGroupUpdated;
}
- (UInt32) groupUpdated {
  return result.groupUpdated;
}
- (ClientGroupInfoBuilder*) setGroupUpdated:(UInt32) value {
  result.hasGroupUpdated = YES;
  result.groupUpdated = value;
  return self;
}
- (ClientGroupInfoBuilder*) clearGroupUpdated {
  result.hasGroupUpdated = NO;
  result.groupUpdated = 0;
  return self;
}
- (NSMutableArray *)groupMemberList {
  return result.groupMemberListArray;
}
- (NSString*)groupMemberListAtIndex:(NSUInteger)index {
  return [result groupMemberListAtIndex:index];
}
- (ClientGroupInfoBuilder *)addGroupMemberList:(NSString*)value {
  if (result.groupMemberListArray == nil) {
    result.groupMemberListArray = [[NSMutableArray alloc]init];
  }
  [result.groupMemberListArray addObject:value];
  return self;
}
- (ClientGroupInfoBuilder *)setGroupMemberListArray:(NSArray *)array {
  result.groupMemberListArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (ClientGroupInfoBuilder *)clearGroupMemberList {
  result.groupMemberListArray = nil;
  return self;
}
@end

@interface ServerGroupInfo ()
@property UInt32 groupId;
@property (strong) NSString* groupName;
@property (strong) NSString* groupAvatar;
@property UInt32 groupCreatorId;
@property GroupType groupType;
@property UInt32 groupUpdated;
@property (strong) PBAppendableArray * groupMemberListArray;
@end

@implementation ServerGroupInfo

- (BOOL) hasGroupId {
  return !!hasGroupId_;
}
- (void) setHasGroupId:(BOOL) value_ {
  hasGroupId_ = !!value_;
}
@synthesize groupId;
- (BOOL) hasGroupName {
  return !!hasGroupName_;
}
- (void) setHasGroupName:(BOOL) value_ {
  hasGroupName_ = !!value_;
}
@synthesize groupName;
- (BOOL) hasGroupAvatar {
  return !!hasGroupAvatar_;
}
- (void) setHasGroupAvatar:(BOOL) value_ {
  hasGroupAvatar_ = !!value_;
}
@synthesize groupAvatar;
- (BOOL) hasGroupCreatorId {
  return !!hasGroupCreatorId_;
}
- (void) setHasGroupCreatorId:(BOOL) value_ {
  hasGroupCreatorId_ = !!value_;
}
@synthesize groupCreatorId;
- (BOOL) hasGroupType {
  return !!hasGroupType_;
}
- (void) setHasGroupType:(BOOL) value_ {
  hasGroupType_ = !!value_;
}
@synthesize groupType;
- (BOOL) hasGroupUpdated {
  return !!hasGroupUpdated_;
}
- (void) setHasGroupUpdated:(BOOL) value_ {
  hasGroupUpdated_ = !!value_;
}
@synthesize groupUpdated;
@synthesize groupMemberListArray;
@dynamic groupMemberList;
- (void) dealloc {
  self.groupName = nil;
  self.groupAvatar = nil;
  self.groupMemberListArray = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.groupId = 0;
    self.groupName = @"";
    self.groupAvatar = @"";
    self.groupCreatorId = 0;
    self.groupType = GroupTypeNormalGroup;
    self.groupUpdated = 0;
  }
  return self;
}
static ServerGroupInfo* defaultServerGroupInfoInstance = nil;
+ (void) initialize {
  if (self == [ServerGroupInfo class]) {
    defaultServerGroupInfoInstance = [[ServerGroupInfo alloc] init];
  }
}
+ (ServerGroupInfo*) defaultInstance {
  return defaultServerGroupInfoInstance;
}
- (ServerGroupInfo*) defaultInstance {
  return defaultServerGroupInfoInstance;
}
- (PBArray *)groupMemberList {
  return groupMemberListArray;
}
- (UInt32)groupMemberListAtIndex:(NSUInteger)index {
  return [groupMemberListArray uint32AtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasGroupId) {
    return NO;
  }
  if (!self.hasGroupName) {
    return NO;
  }
  if (!self.hasGroupAvatar) {
    return NO;
  }
  if (!self.hasGroupCreatorId) {
    return NO;
  }
  if (!self.hasGroupType) {
    return NO;
  }
  if (!self.hasGroupUpdated) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasGroupId) {
    [output writeUInt32:1 value:self.groupId];
  }
  if (self.hasGroupName) {
    [output writeString:2 value:self.groupName];
  }
  if (self.hasGroupAvatar) {
    [output writeString:3 value:self.groupAvatar];
  }
  if (self.hasGroupCreatorId) {
    [output writeUInt32:4 value:self.groupCreatorId];
  }
  if (self.hasGroupType) {
    [output writeEnum:5 value:self.groupType];
  }
  if (self.hasGroupUpdated) {
    [output writeUInt32:6 value:self.groupUpdated];
  }
  const NSUInteger groupMemberListArrayCount = self.groupMemberListArray.count;
  if (groupMemberListArrayCount > 0) {
    const UInt32 *values = (const UInt32 *)self.groupMemberListArray.data;
    for (NSUInteger i = 0; i < groupMemberListArrayCount; ++i) {
      [output writeUInt32:7 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasGroupId) {
    size_ += computeUInt32Size(1, self.groupId);
  }
  if (self.hasGroupName) {
    size_ += computeStringSize(2, self.groupName);
  }
  if (self.hasGroupAvatar) {
    size_ += computeStringSize(3, self.groupAvatar);
  }
  if (self.hasGroupCreatorId) {
    size_ += computeUInt32Size(4, self.groupCreatorId);
  }
  if (self.hasGroupType) {
    size_ += computeEnumSize(5, self.groupType);
  }
  if (self.hasGroupUpdated) {
    size_ += computeUInt32Size(6, self.groupUpdated);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.groupMemberListArray.count;
    const UInt32 *values = (const UInt32 *)self.groupMemberListArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ServerGroupInfo*) parseFromData:(NSData*) data {
  return (ServerGroupInfo*)[[[ServerGroupInfo builder] mergeFromData:data] build];
}
+ (ServerGroupInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ServerGroupInfo*)[[[ServerGroupInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ServerGroupInfo*) parseFromInputStream:(NSInputStream*) input {
  return (ServerGroupInfo*)[[[ServerGroupInfo builder] mergeFromInputStream:input] build];
}
+ (ServerGroupInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ServerGroupInfo*)[[[ServerGroupInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ServerGroupInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ServerGroupInfo*)[[[ServerGroupInfo builder] mergeFromCodedInputStream:input] build];
}
+ (ServerGroupInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ServerGroupInfo*)[[[ServerGroupInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ServerGroupInfoBuilder*) builder {
  return [[ServerGroupInfoBuilder alloc] init];
}
+ (ServerGroupInfoBuilder*) builderWithPrototype:(ServerGroupInfo*) prototype {
  return [[ServerGroupInfo builder] mergeFrom:prototype];
}
- (ServerGroupInfoBuilder*) builder {
  return [ServerGroupInfo builder];
}
- (ServerGroupInfoBuilder*) toBuilder {
  return [ServerGroupInfo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasGroupId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"groupId", [NSNumber numberWithInteger:self.groupId]];
  }
  if (self.hasGroupName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"groupName", self.groupName];
  }
  if (self.hasGroupAvatar) {
    [output appendFormat:@"%@%@: %@\n", indent, @"groupAvatar", self.groupAvatar];
  }
  if (self.hasGroupCreatorId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"groupCreatorId", [NSNumber numberWithInteger:self.groupCreatorId]];
  }
  if (self.hasGroupType) {
    [output appendFormat:@"%@%@: %d\n", indent, @"groupType", self.groupType];
  }
  if (self.hasGroupUpdated) {
    [output appendFormat:@"%@%@: %@\n", indent, @"groupUpdated", [NSNumber numberWithInteger:self.groupUpdated]];
  }
  [self.groupMemberListArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"groupMemberList", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ServerGroupInfo class]]) {
    return NO;
  }
  ServerGroupInfo *otherMessage = other;
  return
      self.hasGroupId == otherMessage.hasGroupId &&
      (!self.hasGroupId || self.groupId == otherMessage.groupId) &&
      self.hasGroupName == otherMessage.hasGroupName &&
      (!self.hasGroupName || [self.groupName isEqual:otherMessage.groupName]) &&
      self.hasGroupAvatar == otherMessage.hasGroupAvatar &&
      (!self.hasGroupAvatar || [self.groupAvatar isEqual:otherMessage.groupAvatar]) &&
      self.hasGroupCreatorId == otherMessage.hasGroupCreatorId &&
      (!self.hasGroupCreatorId || self.groupCreatorId == otherMessage.groupCreatorId) &&
      self.hasGroupType == otherMessage.hasGroupType &&
      (!self.hasGroupType || self.groupType == otherMessage.groupType) &&
      self.hasGroupUpdated == otherMessage.hasGroupUpdated &&
      (!self.hasGroupUpdated || self.groupUpdated == otherMessage.groupUpdated) &&
      [self.groupMemberListArray isEqualToArray:otherMessage.groupMemberListArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasGroupId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.groupId] hash];
  }
  if (self.hasGroupName) {
    hashCode = hashCode * 31 + [self.groupName hash];
  }
  if (self.hasGroupAvatar) {
    hashCode = hashCode * 31 + [self.groupAvatar hash];
  }
  if (self.hasGroupCreatorId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.groupCreatorId] hash];
  }
  if (self.hasGroupType) {
    hashCode = hashCode * 31 + self.groupType;
  }
  if (self.hasGroupUpdated) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.groupUpdated] hash];
  }
  [self.groupMemberListArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ServerGroupInfoBuilder()
@property (strong) ServerGroupInfo* result;
@end

@implementation ServerGroupInfoBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[ServerGroupInfo alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (ServerGroupInfoBuilder*) clear {
  self.result = [[ServerGroupInfo alloc] init];
  return self;
}
- (ServerGroupInfoBuilder*) clone {
  return [ServerGroupInfo builderWithPrototype:result];
}
- (ServerGroupInfo*) defaultInstance {
  return [ServerGroupInfo defaultInstance];
}
- (ServerGroupInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ServerGroupInfo*) buildPartial {
  ServerGroupInfo* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (ServerGroupInfoBuilder*) mergeFrom:(ServerGroupInfo*) other {
  if (other == [ServerGroupInfo defaultInstance]) {
    return self;
  }
  if (other.hasGroupId) {
    [self setGroupId:other.groupId];
  }
  if (other.hasGroupName) {
    [self setGroupName:other.groupName];
  }
  if (other.hasGroupAvatar) {
    [self setGroupAvatar:other.groupAvatar];
  }
  if (other.hasGroupCreatorId) {
    [self setGroupCreatorId:other.groupCreatorId];
  }
  if (other.hasGroupType) {
    [self setGroupType:other.groupType];
  }
  if (other.hasGroupUpdated) {
    [self setGroupUpdated:other.groupUpdated];
  }
  if (other.groupMemberListArray.count > 0) {
    if (result.groupMemberListArray == nil) {
      result.groupMemberListArray = [other.groupMemberListArray copy];
    } else {
      [result.groupMemberListArray appendArray:other.groupMemberListArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ServerGroupInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ServerGroupInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setGroupId:[input readUInt32]];
        break;
      }
      case 18: {
        [self setGroupName:[input readString]];
        break;
      }
      case 26: {
        [self setGroupAvatar:[input readString]];
        break;
      }
      case 32: {
        [self setGroupCreatorId:[input readUInt32]];
        break;
      }
      case 40: {
        GroupType value = (GroupType)[input readEnum];
        if (GroupTypeIsValidValue(value)) {
          [self setGroupType:value];
        } else {
          [unknownFields mergeVarintField:5 value:value];
        }
        break;
      }
      case 48: {
        [self setGroupUpdated:[input readUInt32]];
        break;
      }
      case 56: {
        [self addGroupMemberList:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasGroupId {
  return result.hasGroupId;
}
- (UInt32) groupId {
  return result.groupId;
}
- (ServerGroupInfoBuilder*) setGroupId:(UInt32) value {
  result.hasGroupId = YES;
  result.groupId = value;
  return self;
}
- (ServerGroupInfoBuilder*) clearGroupId {
  result.hasGroupId = NO;
  result.groupId = 0;
  return self;
}
- (BOOL) hasGroupName {
  return result.hasGroupName;
}
- (NSString*) groupName {
  return result.groupName;
}
- (ServerGroupInfoBuilder*) setGroupName:(NSString*) value {
  result.hasGroupName = YES;
  result.groupName = value;
  return self;
}
- (ServerGroupInfoBuilder*) clearGroupName {
  result.hasGroupName = NO;
  result.groupName = @"";
  return self;
}
- (BOOL) hasGroupAvatar {
  return result.hasGroupAvatar;
}
- (NSString*) groupAvatar {
  return result.groupAvatar;
}
- (ServerGroupInfoBuilder*) setGroupAvatar:(NSString*) value {
  result.hasGroupAvatar = YES;
  result.groupAvatar = value;
  return self;
}
- (ServerGroupInfoBuilder*) clearGroupAvatar {
  result.hasGroupAvatar = NO;
  result.groupAvatar = @"";
  return self;
}
- (BOOL) hasGroupCreatorId {
  return result.hasGroupCreatorId;
}
- (UInt32) groupCreatorId {
  return result.groupCreatorId;
}
- (ServerGroupInfoBuilder*) setGroupCreatorId:(UInt32) value {
  result.hasGroupCreatorId = YES;
  result.groupCreatorId = value;
  return self;
}
- (ServerGroupInfoBuilder*) clearGroupCreatorId {
  result.hasGroupCreatorId = NO;
  result.groupCreatorId = 0;
  return self;
}
- (BOOL) hasGroupType {
  return result.hasGroupType;
}
- (GroupType) groupType {
  return result.groupType;
}
- (ServerGroupInfoBuilder*) setGroupType:(GroupType) value {
  result.hasGroupType = YES;
  result.groupType = value;
  return self;
}
- (ServerGroupInfoBuilder*) clearGroupType {
  result.hasGroupType = NO;
  result.groupType = GroupTypeNormalGroup;
  return self;
}
- (BOOL) hasGroupUpdated {
  return result.hasGroupUpdated;
}
- (UInt32) groupUpdated {
  return result.groupUpdated;
}
- (ServerGroupInfoBuilder*) setGroupUpdated:(UInt32) value {
  result.hasGroupUpdated = YES;
  result.groupUpdated = value;
  return self;
}
- (ServerGroupInfoBuilder*) clearGroupUpdated {
  result.hasGroupUpdated = NO;
  result.groupUpdated = 0;
  return self;
}
- (PBAppendableArray *)groupMemberList {
  return result.groupMemberListArray;
}
- (UInt32)groupMemberListAtIndex:(NSUInteger)index {
  return [result groupMemberListAtIndex:index];
}
- (ServerGroupInfoBuilder *)addGroupMemberList:(UInt32)value {
  if (result.groupMemberListArray == nil) {
    result.groupMemberListArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [result.groupMemberListArray addUint32:value];
  return self;
}
- (ServerGroupInfoBuilder *)setGroupMemberListArray:(NSArray *)array {
  result.groupMemberListArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (ServerGroupInfoBuilder *)setGroupMemberListValues:(const UInt32 *)values count:(NSUInteger)count {
  result.groupMemberListArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (ServerGroupInfoBuilder *)clearGroupMemberList {
  result.groupMemberListArray = nil;
  return self;
}
@end

@interface ClientGroupUnReadCnt ()
@property (strong) NSString* groupId;
@property UInt32 unreadCnt;
@end

@implementation ClientGroupUnReadCnt

- (BOOL) hasGroupId {
  return !!hasGroupId_;
}
- (void) setHasGroupId:(BOOL) value_ {
  hasGroupId_ = !!value_;
}
@synthesize groupId;
- (BOOL) hasUnreadCnt {
  return !!hasUnreadCnt_;
}
- (void) setHasUnreadCnt:(BOOL) value_ {
  hasUnreadCnt_ = !!value_;
}
@synthesize unreadCnt;
- (void) dealloc {
  self.groupId = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.groupId = @"";
    self.unreadCnt = 0;
  }
  return self;
}
static ClientGroupUnReadCnt* defaultClientGroupUnReadCntInstance = nil;
+ (void) initialize {
  if (self == [ClientGroupUnReadCnt class]) {
    defaultClientGroupUnReadCntInstance = [[ClientGroupUnReadCnt alloc] init];
  }
}
+ (ClientGroupUnReadCnt*) defaultInstance {
  return defaultClientGroupUnReadCntInstance;
}
- (ClientGroupUnReadCnt*) defaultInstance {
  return defaultClientGroupUnReadCntInstance;
}
- (BOOL) isInitialized {
  if (!self.hasGroupId) {
    return NO;
  }
  if (!self.hasUnreadCnt) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasGroupId) {
    [output writeString:1 value:self.groupId];
  }
  if (self.hasUnreadCnt) {
    [output writeUInt32:2 value:self.unreadCnt];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasGroupId) {
    size_ += computeStringSize(1, self.groupId);
  }
  if (self.hasUnreadCnt) {
    size_ += computeUInt32Size(2, self.unreadCnt);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ClientGroupUnReadCnt*) parseFromData:(NSData*) data {
  return (ClientGroupUnReadCnt*)[[[ClientGroupUnReadCnt builder] mergeFromData:data] build];
}
+ (ClientGroupUnReadCnt*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ClientGroupUnReadCnt*)[[[ClientGroupUnReadCnt builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ClientGroupUnReadCnt*) parseFromInputStream:(NSInputStream*) input {
  return (ClientGroupUnReadCnt*)[[[ClientGroupUnReadCnt builder] mergeFromInputStream:input] build];
}
+ (ClientGroupUnReadCnt*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ClientGroupUnReadCnt*)[[[ClientGroupUnReadCnt builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ClientGroupUnReadCnt*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ClientGroupUnReadCnt*)[[[ClientGroupUnReadCnt builder] mergeFromCodedInputStream:input] build];
}
+ (ClientGroupUnReadCnt*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ClientGroupUnReadCnt*)[[[ClientGroupUnReadCnt builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ClientGroupUnReadCntBuilder*) builder {
  return [[ClientGroupUnReadCntBuilder alloc] init];
}
+ (ClientGroupUnReadCntBuilder*) builderWithPrototype:(ClientGroupUnReadCnt*) prototype {
  return [[ClientGroupUnReadCnt builder] mergeFrom:prototype];
}
- (ClientGroupUnReadCntBuilder*) builder {
  return [ClientGroupUnReadCnt builder];
}
- (ClientGroupUnReadCntBuilder*) toBuilder {
  return [ClientGroupUnReadCnt builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasGroupId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"groupId", self.groupId];
  }
  if (self.hasUnreadCnt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"unreadCnt", [NSNumber numberWithInteger:self.unreadCnt]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ClientGroupUnReadCnt class]]) {
    return NO;
  }
  ClientGroupUnReadCnt *otherMessage = other;
  return
      self.hasGroupId == otherMessage.hasGroupId &&
      (!self.hasGroupId || [self.groupId isEqual:otherMessage.groupId]) &&
      self.hasUnreadCnt == otherMessage.hasUnreadCnt &&
      (!self.hasUnreadCnt || self.unreadCnt == otherMessage.unreadCnt) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasGroupId) {
    hashCode = hashCode * 31 + [self.groupId hash];
  }
  if (self.hasUnreadCnt) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.unreadCnt] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ClientGroupUnReadCntBuilder()
@property (strong) ClientGroupUnReadCnt* result;
@end

@implementation ClientGroupUnReadCntBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[ClientGroupUnReadCnt alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (ClientGroupUnReadCntBuilder*) clear {
  self.result = [[ClientGroupUnReadCnt alloc] init];
  return self;
}
- (ClientGroupUnReadCntBuilder*) clone {
  return [ClientGroupUnReadCnt builderWithPrototype:result];
}
- (ClientGroupUnReadCnt*) defaultInstance {
  return [ClientGroupUnReadCnt defaultInstance];
}
- (ClientGroupUnReadCnt*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ClientGroupUnReadCnt*) buildPartial {
  ClientGroupUnReadCnt* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (ClientGroupUnReadCntBuilder*) mergeFrom:(ClientGroupUnReadCnt*) other {
  if (other == [ClientGroupUnReadCnt defaultInstance]) {
    return self;
  }
  if (other.hasGroupId) {
    [self setGroupId:other.groupId];
  }
  if (other.hasUnreadCnt) {
    [self setUnreadCnt:other.unreadCnt];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ClientGroupUnReadCntBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ClientGroupUnReadCntBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setGroupId:[input readString]];
        break;
      }
      case 16: {
        [self setUnreadCnt:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasGroupId {
  return result.hasGroupId;
}
- (NSString*) groupId {
  return result.groupId;
}
- (ClientGroupUnReadCntBuilder*) setGroupId:(NSString*) value {
  result.hasGroupId = YES;
  result.groupId = value;
  return self;
}
- (ClientGroupUnReadCntBuilder*) clearGroupId {
  result.hasGroupId = NO;
  result.groupId = @"";
  return self;
}
- (BOOL) hasUnreadCnt {
  return result.hasUnreadCnt;
}
- (UInt32) unreadCnt {
  return result.unreadCnt;
}
- (ClientGroupUnReadCntBuilder*) setUnreadCnt:(UInt32) value {
  result.hasUnreadCnt = YES;
  result.unreadCnt = value;
  return self;
}
- (ClientGroupUnReadCntBuilder*) clearUnreadCnt {
  result.hasUnreadCnt = NO;
  result.unreadCnt = 0;
  return self;
}
@end

@interface ServerGroupUnReadCnt ()
@property UInt32 groupId;
@property UInt32 unreadCnt;
@end

@implementation ServerGroupUnReadCnt

- (BOOL) hasGroupId {
  return !!hasGroupId_;
}
- (void) setHasGroupId:(BOOL) value_ {
  hasGroupId_ = !!value_;
}
@synthesize groupId;
- (BOOL) hasUnreadCnt {
  return !!hasUnreadCnt_;
}
- (void) setHasUnreadCnt:(BOOL) value_ {
  hasUnreadCnt_ = !!value_;
}
@synthesize unreadCnt;
- (void) dealloc {
}
- (id) init {
  if ((self = [super init])) {
    self.groupId = 0;
    self.unreadCnt = 0;
  }
  return self;
}
static ServerGroupUnReadCnt* defaultServerGroupUnReadCntInstance = nil;
+ (void) initialize {
  if (self == [ServerGroupUnReadCnt class]) {
    defaultServerGroupUnReadCntInstance = [[ServerGroupUnReadCnt alloc] init];
  }
}
+ (ServerGroupUnReadCnt*) defaultInstance {
  return defaultServerGroupUnReadCntInstance;
}
- (ServerGroupUnReadCnt*) defaultInstance {
  return defaultServerGroupUnReadCntInstance;
}
- (BOOL) isInitialized {
  if (!self.hasGroupId) {
    return NO;
  }
  if (!self.hasUnreadCnt) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasGroupId) {
    [output writeUInt32:1 value:self.groupId];
  }
  if (self.hasUnreadCnt) {
    [output writeUInt32:2 value:self.unreadCnt];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasGroupId) {
    size_ += computeUInt32Size(1, self.groupId);
  }
  if (self.hasUnreadCnt) {
    size_ += computeUInt32Size(2, self.unreadCnt);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ServerGroupUnReadCnt*) parseFromData:(NSData*) data {
  return (ServerGroupUnReadCnt*)[[[ServerGroupUnReadCnt builder] mergeFromData:data] build];
}
+ (ServerGroupUnReadCnt*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ServerGroupUnReadCnt*)[[[ServerGroupUnReadCnt builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ServerGroupUnReadCnt*) parseFromInputStream:(NSInputStream*) input {
  return (ServerGroupUnReadCnt*)[[[ServerGroupUnReadCnt builder] mergeFromInputStream:input] build];
}
+ (ServerGroupUnReadCnt*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ServerGroupUnReadCnt*)[[[ServerGroupUnReadCnt builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ServerGroupUnReadCnt*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ServerGroupUnReadCnt*)[[[ServerGroupUnReadCnt builder] mergeFromCodedInputStream:input] build];
}
+ (ServerGroupUnReadCnt*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ServerGroupUnReadCnt*)[[[ServerGroupUnReadCnt builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ServerGroupUnReadCntBuilder*) builder {
  return [[ServerGroupUnReadCntBuilder alloc] init];
}
+ (ServerGroupUnReadCntBuilder*) builderWithPrototype:(ServerGroupUnReadCnt*) prototype {
  return [[ServerGroupUnReadCnt builder] mergeFrom:prototype];
}
- (ServerGroupUnReadCntBuilder*) builder {
  return [ServerGroupUnReadCnt builder];
}
- (ServerGroupUnReadCntBuilder*) toBuilder {
  return [ServerGroupUnReadCnt builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasGroupId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"groupId", [NSNumber numberWithInteger:self.groupId]];
  }
  if (self.hasUnreadCnt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"unreadCnt", [NSNumber numberWithInteger:self.unreadCnt]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ServerGroupUnReadCnt class]]) {
    return NO;
  }
  ServerGroupUnReadCnt *otherMessage = other;
  return
      self.hasGroupId == otherMessage.hasGroupId &&
      (!self.hasGroupId || self.groupId == otherMessage.groupId) &&
      self.hasUnreadCnt == otherMessage.hasUnreadCnt &&
      (!self.hasUnreadCnt || self.unreadCnt == otherMessage.unreadCnt) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasGroupId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.groupId] hash];
  }
  if (self.hasUnreadCnt) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.unreadCnt] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ServerGroupUnReadCntBuilder()
@property (strong) ServerGroupUnReadCnt* result;
@end

@implementation ServerGroupUnReadCntBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[ServerGroupUnReadCnt alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (ServerGroupUnReadCntBuilder*) clear {
  self.result = [[ServerGroupUnReadCnt alloc] init];
  return self;
}
- (ServerGroupUnReadCntBuilder*) clone {
  return [ServerGroupUnReadCnt builderWithPrototype:result];
}
- (ServerGroupUnReadCnt*) defaultInstance {
  return [ServerGroupUnReadCnt defaultInstance];
}
- (ServerGroupUnReadCnt*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ServerGroupUnReadCnt*) buildPartial {
  ServerGroupUnReadCnt* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (ServerGroupUnReadCntBuilder*) mergeFrom:(ServerGroupUnReadCnt*) other {
  if (other == [ServerGroupUnReadCnt defaultInstance]) {
    return self;
  }
  if (other.hasGroupId) {
    [self setGroupId:other.groupId];
  }
  if (other.hasUnreadCnt) {
    [self setUnreadCnt:other.unreadCnt];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ServerGroupUnReadCntBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ServerGroupUnReadCntBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setGroupId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setUnreadCnt:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasGroupId {
  return result.hasGroupId;
}
- (UInt32) groupId {
  return result.groupId;
}
- (ServerGroupUnReadCntBuilder*) setGroupId:(UInt32) value {
  result.hasGroupId = YES;
  result.groupId = value;
  return self;
}
- (ServerGroupUnReadCntBuilder*) clearGroupId {
  result.hasGroupId = NO;
  result.groupId = 0;
  return self;
}
- (BOOL) hasUnreadCnt {
  return result.hasUnreadCnt;
}
- (UInt32) unreadCnt {
  return result.unreadCnt;
}
- (ServerGroupUnReadCntBuilder*) setUnreadCnt:(UInt32) value {
  result.hasUnreadCnt = YES;
  result.unreadCnt = value;
  return self;
}
- (ServerGroupUnReadCntBuilder*) clearUnreadCnt {
  result.hasUnreadCnt = NO;
  result.unreadCnt = 0;
  return self;
}
@end

@interface ClientGroupMsg ()
@property (strong) NSString* fromUserId;
@property UInt32 createTime;
@property (strong) NSString* msgContent;
@end

@implementation ClientGroupMsg

- (BOOL) hasFromUserId {
  return !!hasFromUserId_;
}
- (void) setHasFromUserId:(BOOL) value_ {
  hasFromUserId_ = !!value_;
}
@synthesize fromUserId;
- (BOOL) hasCreateTime {
  return !!hasCreateTime_;
}
- (void) setHasCreateTime:(BOOL) value_ {
  hasCreateTime_ = !!value_;
}
@synthesize createTime;
- (BOOL) hasMsgContent {
  return !!hasMsgContent_;
}
- (void) setHasMsgContent:(BOOL) value_ {
  hasMsgContent_ = !!value_;
}
@synthesize msgContent;
- (void) dealloc {
  self.fromUserId = nil;
  self.msgContent = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.fromUserId = @"";
    self.createTime = 0;
    self.msgContent = @"";
  }
  return self;
}
static ClientGroupMsg* defaultClientGroupMsgInstance = nil;
+ (void) initialize {
  if (self == [ClientGroupMsg class]) {
    defaultClientGroupMsgInstance = [[ClientGroupMsg alloc] init];
  }
}
+ (ClientGroupMsg*) defaultInstance {
  return defaultClientGroupMsgInstance;
}
- (ClientGroupMsg*) defaultInstance {
  return defaultClientGroupMsgInstance;
}
- (BOOL) isInitialized {
  if (!self.hasFromUserId) {
    return NO;
  }
  if (!self.hasCreateTime) {
    return NO;
  }
  if (!self.hasMsgContent) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasFromUserId) {
    [output writeString:1 value:self.fromUserId];
  }
  if (self.hasCreateTime) {
    [output writeUInt32:2 value:self.createTime];
  }
  if (self.hasMsgContent) {
    [output writeString:3 value:self.msgContent];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasFromUserId) {
    size_ += computeStringSize(1, self.fromUserId);
  }
  if (self.hasCreateTime) {
    size_ += computeUInt32Size(2, self.createTime);
  }
  if (self.hasMsgContent) {
    size_ += computeStringSize(3, self.msgContent);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ClientGroupMsg*) parseFromData:(NSData*) data {
  return (ClientGroupMsg*)[[[ClientGroupMsg builder] mergeFromData:data] build];
}
+ (ClientGroupMsg*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ClientGroupMsg*)[[[ClientGroupMsg builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ClientGroupMsg*) parseFromInputStream:(NSInputStream*) input {
  return (ClientGroupMsg*)[[[ClientGroupMsg builder] mergeFromInputStream:input] build];
}
+ (ClientGroupMsg*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ClientGroupMsg*)[[[ClientGroupMsg builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ClientGroupMsg*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ClientGroupMsg*)[[[ClientGroupMsg builder] mergeFromCodedInputStream:input] build];
}
+ (ClientGroupMsg*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ClientGroupMsg*)[[[ClientGroupMsg builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ClientGroupMsgBuilder*) builder {
  return [[ClientGroupMsgBuilder alloc] init];
}
+ (ClientGroupMsgBuilder*) builderWithPrototype:(ClientGroupMsg*) prototype {
  return [[ClientGroupMsg builder] mergeFrom:prototype];
}
- (ClientGroupMsgBuilder*) builder {
  return [ClientGroupMsg builder];
}
- (ClientGroupMsgBuilder*) toBuilder {
  return [ClientGroupMsg builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasFromUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromUserId", self.fromUserId];
  }
  if (self.hasCreateTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createTime", [NSNumber numberWithInteger:self.createTime]];
  }
  if (self.hasMsgContent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msgContent", self.msgContent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ClientGroupMsg class]]) {
    return NO;
  }
  ClientGroupMsg *otherMessage = other;
  return
      self.hasFromUserId == otherMessage.hasFromUserId &&
      (!self.hasFromUserId || [self.fromUserId isEqual:otherMessage.fromUserId]) &&
      self.hasCreateTime == otherMessage.hasCreateTime &&
      (!self.hasCreateTime || self.createTime == otherMessage.createTime) &&
      self.hasMsgContent == otherMessage.hasMsgContent &&
      (!self.hasMsgContent || [self.msgContent isEqual:otherMessage.msgContent]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasFromUserId) {
    hashCode = hashCode * 31 + [self.fromUserId hash];
  }
  if (self.hasCreateTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.createTime] hash];
  }
  if (self.hasMsgContent) {
    hashCode = hashCode * 31 + [self.msgContent hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ClientGroupMsgBuilder()
@property (strong) ClientGroupMsg* result;
@end

@implementation ClientGroupMsgBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[ClientGroupMsg alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (ClientGroupMsgBuilder*) clear {
  self.result = [[ClientGroupMsg alloc] init];
  return self;
}
- (ClientGroupMsgBuilder*) clone {
  return [ClientGroupMsg builderWithPrototype:result];
}
- (ClientGroupMsg*) defaultInstance {
  return [ClientGroupMsg defaultInstance];
}
- (ClientGroupMsg*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ClientGroupMsg*) buildPartial {
  ClientGroupMsg* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (ClientGroupMsgBuilder*) mergeFrom:(ClientGroupMsg*) other {
  if (other == [ClientGroupMsg defaultInstance]) {
    return self;
  }
  if (other.hasFromUserId) {
    [self setFromUserId:other.fromUserId];
  }
  if (other.hasCreateTime) {
    [self setCreateTime:other.createTime];
  }
  if (other.hasMsgContent) {
    [self setMsgContent:other.msgContent];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ClientGroupMsgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ClientGroupMsgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setFromUserId:[input readString]];
        break;
      }
      case 16: {
        [self setCreateTime:[input readUInt32]];
        break;
      }
      case 26: {
        [self setMsgContent:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasFromUserId {
  return result.hasFromUserId;
}
- (NSString*) fromUserId {
  return result.fromUserId;
}
- (ClientGroupMsgBuilder*) setFromUserId:(NSString*) value {
  result.hasFromUserId = YES;
  result.fromUserId = value;
  return self;
}
- (ClientGroupMsgBuilder*) clearFromUserId {
  result.hasFromUserId = NO;
  result.fromUserId = @"";
  return self;
}
- (BOOL) hasCreateTime {
  return result.hasCreateTime;
}
- (UInt32) createTime {
  return result.createTime;
}
- (ClientGroupMsgBuilder*) setCreateTime:(UInt32) value {
  result.hasCreateTime = YES;
  result.createTime = value;
  return self;
}
- (ClientGroupMsgBuilder*) clearCreateTime {
  result.hasCreateTime = NO;
  result.createTime = 0;
  return self;
}
- (BOOL) hasMsgContent {
  return result.hasMsgContent;
}
- (NSString*) msgContent {
  return result.msgContent;
}
- (ClientGroupMsgBuilder*) setMsgContent:(NSString*) value {
  result.hasMsgContent = YES;
  result.msgContent = value;
  return self;
}
- (ClientGroupMsgBuilder*) clearMsgContent {
  result.hasMsgContent = NO;
  result.msgContent = @"";
  return self;
}
@end

@interface ServerGroupMsg ()
@property UInt32 fromUserId;
@property UInt32 createTime;
@property (strong) NSString* msgContent;
@end

@implementation ServerGroupMsg

- (BOOL) hasFromUserId {
  return !!hasFromUserId_;
}
- (void) setHasFromUserId:(BOOL) value_ {
  hasFromUserId_ = !!value_;
}
@synthesize fromUserId;
- (BOOL) hasCreateTime {
  return !!hasCreateTime_;
}
- (void) setHasCreateTime:(BOOL) value_ {
  hasCreateTime_ = !!value_;
}
@synthesize createTime;
- (BOOL) hasMsgContent {
  return !!hasMsgContent_;
}
- (void) setHasMsgContent:(BOOL) value_ {
  hasMsgContent_ = !!value_;
}
@synthesize msgContent;
- (void) dealloc {
  self.msgContent = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.fromUserId = 0;
    self.createTime = 0;
    self.msgContent = @"";
  }
  return self;
}
static ServerGroupMsg* defaultServerGroupMsgInstance = nil;
+ (void) initialize {
  if (self == [ServerGroupMsg class]) {
    defaultServerGroupMsgInstance = [[ServerGroupMsg alloc] init];
  }
}
+ (ServerGroupMsg*) defaultInstance {
  return defaultServerGroupMsgInstance;
}
- (ServerGroupMsg*) defaultInstance {
  return defaultServerGroupMsgInstance;
}
- (BOOL) isInitialized {
  if (!self.hasFromUserId) {
    return NO;
  }
  if (!self.hasCreateTime) {
    return NO;
  }
  if (!self.hasMsgContent) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasFromUserId) {
    [output writeUInt32:1 value:self.fromUserId];
  }
  if (self.hasCreateTime) {
    [output writeUInt32:2 value:self.createTime];
  }
  if (self.hasMsgContent) {
    [output writeString:3 value:self.msgContent];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasFromUserId) {
    size_ += computeUInt32Size(1, self.fromUserId);
  }
  if (self.hasCreateTime) {
    size_ += computeUInt32Size(2, self.createTime);
  }
  if (self.hasMsgContent) {
    size_ += computeStringSize(3, self.msgContent);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ServerGroupMsg*) parseFromData:(NSData*) data {
  return (ServerGroupMsg*)[[[ServerGroupMsg builder] mergeFromData:data] build];
}
+ (ServerGroupMsg*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ServerGroupMsg*)[[[ServerGroupMsg builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ServerGroupMsg*) parseFromInputStream:(NSInputStream*) input {
  return (ServerGroupMsg*)[[[ServerGroupMsg builder] mergeFromInputStream:input] build];
}
+ (ServerGroupMsg*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ServerGroupMsg*)[[[ServerGroupMsg builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ServerGroupMsg*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ServerGroupMsg*)[[[ServerGroupMsg builder] mergeFromCodedInputStream:input] build];
}
+ (ServerGroupMsg*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ServerGroupMsg*)[[[ServerGroupMsg builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ServerGroupMsgBuilder*) builder {
  return [[ServerGroupMsgBuilder alloc] init];
}
+ (ServerGroupMsgBuilder*) builderWithPrototype:(ServerGroupMsg*) prototype {
  return [[ServerGroupMsg builder] mergeFrom:prototype];
}
- (ServerGroupMsgBuilder*) builder {
  return [ServerGroupMsg builder];
}
- (ServerGroupMsgBuilder*) toBuilder {
  return [ServerGroupMsg builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasFromUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromUserId", [NSNumber numberWithInteger:self.fromUserId]];
  }
  if (self.hasCreateTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createTime", [NSNumber numberWithInteger:self.createTime]];
  }
  if (self.hasMsgContent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msgContent", self.msgContent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ServerGroupMsg class]]) {
    return NO;
  }
  ServerGroupMsg *otherMessage = other;
  return
      self.hasFromUserId == otherMessage.hasFromUserId &&
      (!self.hasFromUserId || self.fromUserId == otherMessage.fromUserId) &&
      self.hasCreateTime == otherMessage.hasCreateTime &&
      (!self.hasCreateTime || self.createTime == otherMessage.createTime) &&
      self.hasMsgContent == otherMessage.hasMsgContent &&
      (!self.hasMsgContent || [self.msgContent isEqual:otherMessage.msgContent]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasFromUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.fromUserId] hash];
  }
  if (self.hasCreateTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.createTime] hash];
  }
  if (self.hasMsgContent) {
    hashCode = hashCode * 31 + [self.msgContent hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ServerGroupMsgBuilder()
@property (strong) ServerGroupMsg* result;
@end

@implementation ServerGroupMsgBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[ServerGroupMsg alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (ServerGroupMsgBuilder*) clear {
  self.result = [[ServerGroupMsg alloc] init];
  return self;
}
- (ServerGroupMsgBuilder*) clone {
  return [ServerGroupMsg builderWithPrototype:result];
}
- (ServerGroupMsg*) defaultInstance {
  return [ServerGroupMsg defaultInstance];
}
- (ServerGroupMsg*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ServerGroupMsg*) buildPartial {
  ServerGroupMsg* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (ServerGroupMsgBuilder*) mergeFrom:(ServerGroupMsg*) other {
  if (other == [ServerGroupMsg defaultInstance]) {
    return self;
  }
  if (other.hasFromUserId) {
    [self setFromUserId:other.fromUserId];
  }
  if (other.hasCreateTime) {
    [self setCreateTime:other.createTime];
  }
  if (other.hasMsgContent) {
    [self setMsgContent:other.msgContent];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ServerGroupMsgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ServerGroupMsgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setFromUserId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setCreateTime:[input readUInt32]];
        break;
      }
      case 26: {
        [self setMsgContent:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasFromUserId {
  return result.hasFromUserId;
}
- (UInt32) fromUserId {
  return result.fromUserId;
}
- (ServerGroupMsgBuilder*) setFromUserId:(UInt32) value {
  result.hasFromUserId = YES;
  result.fromUserId = value;
  return self;
}
- (ServerGroupMsgBuilder*) clearFromUserId {
  result.hasFromUserId = NO;
  result.fromUserId = 0;
  return self;
}
- (BOOL) hasCreateTime {
  return result.hasCreateTime;
}
- (UInt32) createTime {
  return result.createTime;
}
- (ServerGroupMsgBuilder*) setCreateTime:(UInt32) value {
  result.hasCreateTime = YES;
  result.createTime = value;
  return self;
}
- (ServerGroupMsgBuilder*) clearCreateTime {
  result.hasCreateTime = NO;
  result.createTime = 0;
  return self;
}
- (BOOL) hasMsgContent {
  return result.hasMsgContent;
}
- (NSString*) msgContent {
  return result.msgContent;
}
- (ServerGroupMsgBuilder*) setMsgContent:(NSString*) value {
  result.hasMsgContent = YES;
  result.msgContent = value;
  return self;
}
- (ServerGroupMsgBuilder*) clearMsgContent {
  result.hasMsgContent = NO;
  result.msgContent = @"";
  return self;
}
@end

@interface ClientOfflineFileInfo ()
@property (strong) NSString* fromUserId;
@property UInt32 fileId;
@property UInt32 fileSize;
@property (strong) NSString* filePath;
@end

@implementation ClientOfflineFileInfo

- (BOOL) hasFromUserId {
  return !!hasFromUserId_;
}
- (void) setHasFromUserId:(BOOL) value_ {
  hasFromUserId_ = !!value_;
}
@synthesize fromUserId;
- (BOOL) hasFileId {
  return !!hasFileId_;
}
- (void) setHasFileId:(BOOL) value_ {
  hasFileId_ = !!value_;
}
@synthesize fileId;
- (BOOL) hasFileSize {
  return !!hasFileSize_;
}
- (void) setHasFileSize:(BOOL) value_ {
  hasFileSize_ = !!value_;
}
@synthesize fileSize;
- (BOOL) hasFilePath {
  return !!hasFilePath_;
}
- (void) setHasFilePath:(BOOL) value_ {
  hasFilePath_ = !!value_;
}
@synthesize filePath;
- (void) dealloc {
  self.fromUserId = nil;
  self.filePath = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.fromUserId = @"";
    self.fileId = 0;
    self.fileSize = 0;
    self.filePath = @"";
  }
  return self;
}
static ClientOfflineFileInfo* defaultClientOfflineFileInfoInstance = nil;
+ (void) initialize {
  if (self == [ClientOfflineFileInfo class]) {
    defaultClientOfflineFileInfoInstance = [[ClientOfflineFileInfo alloc] init];
  }
}
+ (ClientOfflineFileInfo*) defaultInstance {
  return defaultClientOfflineFileInfoInstance;
}
- (ClientOfflineFileInfo*) defaultInstance {
  return defaultClientOfflineFileInfoInstance;
}
- (BOOL) isInitialized {
  if (!self.hasFromUserId) {
    return NO;
  }
  if (!self.hasFileId) {
    return NO;
  }
  if (!self.hasFileSize) {
    return NO;
  }
  if (!self.hasFilePath) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasFromUserId) {
    [output writeString:1 value:self.fromUserId];
  }
  if (self.hasFileId) {
    [output writeUInt32:2 value:self.fileId];
  }
  if (self.hasFileSize) {
    [output writeUInt32:3 value:self.fileSize];
  }
  if (self.hasFilePath) {
    [output writeString:4 value:self.filePath];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasFromUserId) {
    size_ += computeStringSize(1, self.fromUserId);
  }
  if (self.hasFileId) {
    size_ += computeUInt32Size(2, self.fileId);
  }
  if (self.hasFileSize) {
    size_ += computeUInt32Size(3, self.fileSize);
  }
  if (self.hasFilePath) {
    size_ += computeStringSize(4, self.filePath);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ClientOfflineFileInfo*) parseFromData:(NSData*) data {
  return (ClientOfflineFileInfo*)[[[ClientOfflineFileInfo builder] mergeFromData:data] build];
}
+ (ClientOfflineFileInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ClientOfflineFileInfo*)[[[ClientOfflineFileInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ClientOfflineFileInfo*) parseFromInputStream:(NSInputStream*) input {
  return (ClientOfflineFileInfo*)[[[ClientOfflineFileInfo builder] mergeFromInputStream:input] build];
}
+ (ClientOfflineFileInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ClientOfflineFileInfo*)[[[ClientOfflineFileInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ClientOfflineFileInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ClientOfflineFileInfo*)[[[ClientOfflineFileInfo builder] mergeFromCodedInputStream:input] build];
}
+ (ClientOfflineFileInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ClientOfflineFileInfo*)[[[ClientOfflineFileInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ClientOfflineFileInfoBuilder*) builder {
  return [[ClientOfflineFileInfoBuilder alloc] init];
}
+ (ClientOfflineFileInfoBuilder*) builderWithPrototype:(ClientOfflineFileInfo*) prototype {
  return [[ClientOfflineFileInfo builder] mergeFrom:prototype];
}
- (ClientOfflineFileInfoBuilder*) builder {
  return [ClientOfflineFileInfo builder];
}
- (ClientOfflineFileInfoBuilder*) toBuilder {
  return [ClientOfflineFileInfo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasFromUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromUserId", self.fromUserId];
  }
  if (self.hasFileId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fileId", [NSNumber numberWithInteger:self.fileId]];
  }
  if (self.hasFileSize) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fileSize", [NSNumber numberWithInteger:self.fileSize]];
  }
  if (self.hasFilePath) {
    [output appendFormat:@"%@%@: %@\n", indent, @"filePath", self.filePath];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ClientOfflineFileInfo class]]) {
    return NO;
  }
  ClientOfflineFileInfo *otherMessage = other;
  return
      self.hasFromUserId == otherMessage.hasFromUserId &&
      (!self.hasFromUserId || [self.fromUserId isEqual:otherMessage.fromUserId]) &&
      self.hasFileId == otherMessage.hasFileId &&
      (!self.hasFileId || self.fileId == otherMessage.fileId) &&
      self.hasFileSize == otherMessage.hasFileSize &&
      (!self.hasFileSize || self.fileSize == otherMessage.fileSize) &&
      self.hasFilePath == otherMessage.hasFilePath &&
      (!self.hasFilePath || [self.filePath isEqual:otherMessage.filePath]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasFromUserId) {
    hashCode = hashCode * 31 + [self.fromUserId hash];
  }
  if (self.hasFileId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.fileId] hash];
  }
  if (self.hasFileSize) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.fileSize] hash];
  }
  if (self.hasFilePath) {
    hashCode = hashCode * 31 + [self.filePath hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ClientOfflineFileInfoBuilder()
@property (strong) ClientOfflineFileInfo* result;
@end

@implementation ClientOfflineFileInfoBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[ClientOfflineFileInfo alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (ClientOfflineFileInfoBuilder*) clear {
  self.result = [[ClientOfflineFileInfo alloc] init];
  return self;
}
- (ClientOfflineFileInfoBuilder*) clone {
  return [ClientOfflineFileInfo builderWithPrototype:result];
}
- (ClientOfflineFileInfo*) defaultInstance {
  return [ClientOfflineFileInfo defaultInstance];
}
- (ClientOfflineFileInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ClientOfflineFileInfo*) buildPartial {
  ClientOfflineFileInfo* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (ClientOfflineFileInfoBuilder*) mergeFrom:(ClientOfflineFileInfo*) other {
  if (other == [ClientOfflineFileInfo defaultInstance]) {
    return self;
  }
  if (other.hasFromUserId) {
    [self setFromUserId:other.fromUserId];
  }
  if (other.hasFileId) {
    [self setFileId:other.fileId];
  }
  if (other.hasFileSize) {
    [self setFileSize:other.fileSize];
  }
  if (other.hasFilePath) {
    [self setFilePath:other.filePath];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ClientOfflineFileInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ClientOfflineFileInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setFromUserId:[input readString]];
        break;
      }
      case 16: {
        [self setFileId:[input readUInt32]];
        break;
      }
      case 24: {
        [self setFileSize:[input readUInt32]];
        break;
      }
      case 34: {
        [self setFilePath:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasFromUserId {
  return result.hasFromUserId;
}
- (NSString*) fromUserId {
  return result.fromUserId;
}
- (ClientOfflineFileInfoBuilder*) setFromUserId:(NSString*) value {
  result.hasFromUserId = YES;
  result.fromUserId = value;
  return self;
}
- (ClientOfflineFileInfoBuilder*) clearFromUserId {
  result.hasFromUserId = NO;
  result.fromUserId = @"";
  return self;
}
- (BOOL) hasFileId {
  return result.hasFileId;
}
- (UInt32) fileId {
  return result.fileId;
}
- (ClientOfflineFileInfoBuilder*) setFileId:(UInt32) value {
  result.hasFileId = YES;
  result.fileId = value;
  return self;
}
- (ClientOfflineFileInfoBuilder*) clearFileId {
  result.hasFileId = NO;
  result.fileId = 0;
  return self;
}
- (BOOL) hasFileSize {
  return result.hasFileSize;
}
- (UInt32) fileSize {
  return result.fileSize;
}
- (ClientOfflineFileInfoBuilder*) setFileSize:(UInt32) value {
  result.hasFileSize = YES;
  result.fileSize = value;
  return self;
}
- (ClientOfflineFileInfoBuilder*) clearFileSize {
  result.hasFileSize = NO;
  result.fileSize = 0;
  return self;
}
- (BOOL) hasFilePath {
  return result.hasFilePath;
}
- (NSString*) filePath {
  return result.filePath;
}
- (ClientOfflineFileInfoBuilder*) setFilePath:(NSString*) value {
  result.hasFilePath = YES;
  result.filePath = value;
  return self;
}
- (ClientOfflineFileInfoBuilder*) clearFilePath {
  result.hasFilePath = NO;
  result.filePath = @"";
  return self;
}
@end

@interface ServerOfflineFileInfo ()
@property UInt32 fromUserId;
@property UInt32 fileId;
@property UInt32 fileSize;
@property (strong) NSString* filePath;
@end

@implementation ServerOfflineFileInfo

- (BOOL) hasFromUserId {
  return !!hasFromUserId_;
}
- (void) setHasFromUserId:(BOOL) value_ {
  hasFromUserId_ = !!value_;
}
@synthesize fromUserId;
- (BOOL) hasFileId {
  return !!hasFileId_;
}
- (void) setHasFileId:(BOOL) value_ {
  hasFileId_ = !!value_;
}
@synthesize fileId;
- (BOOL) hasFileSize {
  return !!hasFileSize_;
}
- (void) setHasFileSize:(BOOL) value_ {
  hasFileSize_ = !!value_;
}
@synthesize fileSize;
- (BOOL) hasFilePath {
  return !!hasFilePath_;
}
- (void) setHasFilePath:(BOOL) value_ {
  hasFilePath_ = !!value_;
}
@synthesize filePath;
- (void) dealloc {
  self.filePath = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.fromUserId = 0;
    self.fileId = 0;
    self.fileSize = 0;
    self.filePath = @"";
  }
  return self;
}
static ServerOfflineFileInfo* defaultServerOfflineFileInfoInstance = nil;
+ (void) initialize {
  if (self == [ServerOfflineFileInfo class]) {
    defaultServerOfflineFileInfoInstance = [[ServerOfflineFileInfo alloc] init];
  }
}
+ (ServerOfflineFileInfo*) defaultInstance {
  return defaultServerOfflineFileInfoInstance;
}
- (ServerOfflineFileInfo*) defaultInstance {
  return defaultServerOfflineFileInfoInstance;
}
- (BOOL) isInitialized {
  if (!self.hasFromUserId) {
    return NO;
  }
  if (!self.hasFileId) {
    return NO;
  }
  if (!self.hasFileSize) {
    return NO;
  }
  if (!self.hasFilePath) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasFromUserId) {
    [output writeUInt32:1 value:self.fromUserId];
  }
  if (self.hasFileId) {
    [output writeUInt32:2 value:self.fileId];
  }
  if (self.hasFileSize) {
    [output writeUInt32:3 value:self.fileSize];
  }
  if (self.hasFilePath) {
    [output writeString:4 value:self.filePath];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasFromUserId) {
    size_ += computeUInt32Size(1, self.fromUserId);
  }
  if (self.hasFileId) {
    size_ += computeUInt32Size(2, self.fileId);
  }
  if (self.hasFileSize) {
    size_ += computeUInt32Size(3, self.fileSize);
  }
  if (self.hasFilePath) {
    size_ += computeStringSize(4, self.filePath);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ServerOfflineFileInfo*) parseFromData:(NSData*) data {
  return (ServerOfflineFileInfo*)[[[ServerOfflineFileInfo builder] mergeFromData:data] build];
}
+ (ServerOfflineFileInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ServerOfflineFileInfo*)[[[ServerOfflineFileInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ServerOfflineFileInfo*) parseFromInputStream:(NSInputStream*) input {
  return (ServerOfflineFileInfo*)[[[ServerOfflineFileInfo builder] mergeFromInputStream:input] build];
}
+ (ServerOfflineFileInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ServerOfflineFileInfo*)[[[ServerOfflineFileInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ServerOfflineFileInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ServerOfflineFileInfo*)[[[ServerOfflineFileInfo builder] mergeFromCodedInputStream:input] build];
}
+ (ServerOfflineFileInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ServerOfflineFileInfo*)[[[ServerOfflineFileInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ServerOfflineFileInfoBuilder*) builder {
  return [[ServerOfflineFileInfoBuilder alloc] init];
}
+ (ServerOfflineFileInfoBuilder*) builderWithPrototype:(ServerOfflineFileInfo*) prototype {
  return [[ServerOfflineFileInfo builder] mergeFrom:prototype];
}
- (ServerOfflineFileInfoBuilder*) builder {
  return [ServerOfflineFileInfo builder];
}
- (ServerOfflineFileInfoBuilder*) toBuilder {
  return [ServerOfflineFileInfo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasFromUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromUserId", [NSNumber numberWithInteger:self.fromUserId]];
  }
  if (self.hasFileId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fileId", [NSNumber numberWithInteger:self.fileId]];
  }
  if (self.hasFileSize) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fileSize", [NSNumber numberWithInteger:self.fileSize]];
  }
  if (self.hasFilePath) {
    [output appendFormat:@"%@%@: %@\n", indent, @"filePath", self.filePath];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ServerOfflineFileInfo class]]) {
    return NO;
  }
  ServerOfflineFileInfo *otherMessage = other;
  return
      self.hasFromUserId == otherMessage.hasFromUserId &&
      (!self.hasFromUserId || self.fromUserId == otherMessage.fromUserId) &&
      self.hasFileId == otherMessage.hasFileId &&
      (!self.hasFileId || self.fileId == otherMessage.fileId) &&
      self.hasFileSize == otherMessage.hasFileSize &&
      (!self.hasFileSize || self.fileSize == otherMessage.fileSize) &&
      self.hasFilePath == otherMessage.hasFilePath &&
      (!self.hasFilePath || [self.filePath isEqual:otherMessage.filePath]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasFromUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.fromUserId] hash];
  }
  if (self.hasFileId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.fileId] hash];
  }
  if (self.hasFileSize) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.fileSize] hash];
  }
  if (self.hasFilePath) {
    hashCode = hashCode * 31 + [self.filePath hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ServerOfflineFileInfoBuilder()
@property (strong) ServerOfflineFileInfo* result;
@end

@implementation ServerOfflineFileInfoBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[ServerOfflineFileInfo alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (ServerOfflineFileInfoBuilder*) clear {
  self.result = [[ServerOfflineFileInfo alloc] init];
  return self;
}
- (ServerOfflineFileInfoBuilder*) clone {
  return [ServerOfflineFileInfo builderWithPrototype:result];
}
- (ServerOfflineFileInfo*) defaultInstance {
  return [ServerOfflineFileInfo defaultInstance];
}
- (ServerOfflineFileInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ServerOfflineFileInfo*) buildPartial {
  ServerOfflineFileInfo* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (ServerOfflineFileInfoBuilder*) mergeFrom:(ServerOfflineFileInfo*) other {
  if (other == [ServerOfflineFileInfo defaultInstance]) {
    return self;
  }
  if (other.hasFromUserId) {
    [self setFromUserId:other.fromUserId];
  }
  if (other.hasFileId) {
    [self setFileId:other.fileId];
  }
  if (other.hasFileSize) {
    [self setFileSize:other.fileSize];
  }
  if (other.hasFilePath) {
    [self setFilePath:other.filePath];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ServerOfflineFileInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ServerOfflineFileInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setFromUserId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setFileId:[input readUInt32]];
        break;
      }
      case 24: {
        [self setFileSize:[input readUInt32]];
        break;
      }
      case 34: {
        [self setFilePath:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasFromUserId {
  return result.hasFromUserId;
}
- (UInt32) fromUserId {
  return result.fromUserId;
}
- (ServerOfflineFileInfoBuilder*) setFromUserId:(UInt32) value {
  result.hasFromUserId = YES;
  result.fromUserId = value;
  return self;
}
- (ServerOfflineFileInfoBuilder*) clearFromUserId {
  result.hasFromUserId = NO;
  result.fromUserId = 0;
  return self;
}
- (BOOL) hasFileId {
  return result.hasFileId;
}
- (UInt32) fileId {
  return result.fileId;
}
- (ServerOfflineFileInfoBuilder*) setFileId:(UInt32) value {
  result.hasFileId = YES;
  result.fileId = value;
  return self;
}
- (ServerOfflineFileInfoBuilder*) clearFileId {
  result.hasFileId = NO;
  result.fileId = 0;
  return self;
}
- (BOOL) hasFileSize {
  return result.hasFileSize;
}
- (UInt32) fileSize {
  return result.fileSize;
}
- (ServerOfflineFileInfoBuilder*) setFileSize:(UInt32) value {
  result.hasFileSize = YES;
  result.fileSize = value;
  return self;
}
- (ServerOfflineFileInfoBuilder*) clearFileSize {
  result.hasFileSize = NO;
  result.fileSize = 0;
  return self;
}
- (BOOL) hasFilePath {
  return result.hasFilePath;
}
- (NSString*) filePath {
  return result.filePath;
}
- (ServerOfflineFileInfoBuilder*) setFilePath:(NSString*) value {
  result.hasFilePath = YES;
  result.filePath = value;
  return self;
}
- (ServerOfflineFileInfoBuilder*) clearFilePath {
  result.hasFilePath = NO;
  result.filePath = @"";
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
