// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.BaseDefine.proto

#ifndef PROTOBUF_IM_2eBaseDefine_2eproto__INCLUDED
#define PROTOBUF_IM_2eBaseDefine_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace IM {
namespace BaseDefine {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_IM_2eBaseDefine_2eproto();
void protobuf_AssignDesc_IM_2eBaseDefine_2eproto();
void protobuf_ShutdownFile_IM_2eBaseDefine_2eproto();

class IpAddr;
class ClientUserInfo;
class ServerUserInfo;
class ClientUserStat;
class ServerUserStat;
class ClientUnReadInfo;
class ServerUnReadInfo;
class ClientMsgInfo;
class ServerMsgInfo;
class ClientGroupInfo;
class ServerGroupInfo;
class ClientGroupUnReadCnt;
class ServerGroupUnReadCnt;
class ClientGroupMsg;
class ServerGroupMsg;
class ClientOfflineFileInfo;
class ServerOfflineFileInfo;

enum ResultType {
  REFUSE_REASON_NONE = 0,
  REFUSE_REASON_NO_MSG_SERVER = 1,
  REFUSE_REASON_MSG_SERVER_FULL = 2,
  REFUSE_REASON_NO_DB_SERVER = 3,
  REFUSE_REASON_NO_LOGIN_SERVER = 4,
  REFUSE_REASON_NO_ROUTE_SERVER = 5,
  REFUSE_REASON_DB_VALIDATE_FAILED = 6,
  RESUSE_REASON_VERSION_TOO_OLD = 7
};
bool ResultType_IsValid(int value);
const ResultType ResultType_MIN = REFUSE_REASON_NONE;
const ResultType ResultType_MAX = RESUSE_REASON_VERSION_TOO_OLD;
const int ResultType_ARRAYSIZE = ResultType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResultType_descriptor();
inline const ::std::string& ResultType_Name(ResultType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResultType_descriptor(), value);
}
inline bool ResultType_Parse(
    const ::std::string& name, ResultType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResultType>(
    ResultType_descriptor(), name, value);
}
enum UserType {
  USER_TYPE_NORMAL = 0
};
bool UserType_IsValid(int value);
const UserType UserType_MIN = USER_TYPE_NORMAL;
const UserType UserType_MAX = USER_TYPE_NORMAL;
const int UserType_ARRAYSIZE = UserType_MAX + 1;

const ::google::protobuf::EnumDescriptor* UserType_descriptor();
inline const ::std::string& UserType_Name(UserType value) {
  return ::google::protobuf::internal::NameOfEnum(
    UserType_descriptor(), value);
}
inline bool UserType_Parse(
    const ::std::string& name, UserType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UserType>(
    UserType_descriptor(), name, value);
}
enum KickReasonType {
  KICK_REASON_DUPLICATE_USER = 1
};
bool KickReasonType_IsValid(int value);
const KickReasonType KickReasonType_MIN = KICK_REASON_DUPLICATE_USER;
const KickReasonType KickReasonType_MAX = KICK_REASON_DUPLICATE_USER;
const int KickReasonType_ARRAYSIZE = KickReasonType_MAX + 1;

const ::google::protobuf::EnumDescriptor* KickReasonType_descriptor();
inline const ::std::string& KickReasonType_Name(KickReasonType value) {
  return ::google::protobuf::internal::NameOfEnum(
    KickReasonType_descriptor(), value);
}
inline bool KickReasonType_Parse(
    const ::std::string& name, KickReasonType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<KickReasonType>(
    KickReasonType_descriptor(), name, value);
}
enum OnlineListType {
  ONLINE_LIST_TYPE_FRIEND_LIST = 1
};
bool OnlineListType_IsValid(int value);
const OnlineListType OnlineListType_MIN = ONLINE_LIST_TYPE_FRIEND_LIST;
const OnlineListType OnlineListType_MAX = ONLINE_LIST_TYPE_FRIEND_LIST;
const int OnlineListType_ARRAYSIZE = OnlineListType_MAX + 1;

const ::google::protobuf::EnumDescriptor* OnlineListType_descriptor();
inline const ::std::string& OnlineListType_Name(OnlineListType value) {
  return ::google::protobuf::internal::NameOfEnum(
    OnlineListType_descriptor(), value);
}
inline bool OnlineListType_Parse(
    const ::std::string& name, OnlineListType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OnlineListType>(
    OnlineListType_descriptor(), name, value);
}
enum UserStatType {
  USER_STATUS_ONLINE = 1,
  USER_STATUS_OFFLINE = 2,
  USER_STATUS_LEAVE = 3
};
bool UserStatType_IsValid(int value);
const UserStatType UserStatType_MIN = USER_STATUS_ONLINE;
const UserStatType UserStatType_MAX = USER_STATUS_LEAVE;
const int UserStatType_ARRAYSIZE = UserStatType_MAX + 1;

const ::google::protobuf::EnumDescriptor* UserStatType_descriptor();
inline const ::std::string& UserStatType_Name(UserStatType value) {
  return ::google::protobuf::internal::NameOfEnum(
    UserStatType_descriptor(), value);
}
inline bool UserStatType_Parse(
    const ::std::string& name, UserStatType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UserStatType>(
    UserStatType_descriptor(), name, value);
}
enum SessionType {
  SESSION_TYPE_SINGLE = 1,
  SESSION_TYPE_GROUP = 2,
  SESSION_TYPE_TEMP_GROUP = 3
};
bool SessionType_IsValid(int value);
const SessionType SessionType_MIN = SESSION_TYPE_SINGLE;
const SessionType SessionType_MAX = SESSION_TYPE_TEMP_GROUP;
const int SessionType_ARRAYSIZE = SessionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SessionType_descriptor();
inline const ::std::string& SessionType_Name(SessionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SessionType_descriptor(), value);
}
inline bool SessionType_Parse(
    const ::std::string& name, SessionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SessionType>(
    SessionType_descriptor(), name, value);
}
enum GroupType {
  NORMAL_GROUP = 0,
  TEMPORARY_GROUP = 1
};
bool GroupType_IsValid(int value);
const GroupType GroupType_MIN = NORMAL_GROUP;
const GroupType GroupType_MAX = TEMPORARY_GROUP;
const int GroupType_ARRAYSIZE = GroupType_MAX + 1;

const ::google::protobuf::EnumDescriptor* GroupType_descriptor();
inline const ::std::string& GroupType_Name(GroupType value) {
  return ::google::protobuf::internal::NameOfEnum(
    GroupType_descriptor(), value);
}
inline bool GroupType_Parse(
    const ::std::string& name, GroupType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GroupType>(
    GroupType_descriptor(), name, value);
}
// ===================================================================

class IpAddr : public ::google::protobuf::Message {
 public:
  IpAddr();
  virtual ~IpAddr();

  IpAddr(const IpAddr& from);

  inline IpAddr& operator=(const IpAddr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IpAddr& default_instance();

  void Swap(IpAddr* other);

  // implements Message ----------------------------------------------

  IpAddr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IpAddr& from);
  void MergeFrom(const IpAddr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ip = 1;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 1;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required uint32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IM.BaseDefine.IpAddr)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ip_;
  ::google::protobuf::uint32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_IM_2eBaseDefine_2eproto();
  friend void protobuf_AssignDesc_IM_2eBaseDefine_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBaseDefine_2eproto();

  void InitAsDefaultInstance();
  static IpAddr* default_instance_;
};
// -------------------------------------------------------------------

class ClientUserInfo : public ::google::protobuf::Message {
 public:
  ClientUserInfo();
  virtual ~ClientUserInfo();

  ClientUserInfo(const ClientUserInfo& from);

  inline ClientUserInfo& operator=(const ClientUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientUserInfo& default_instance();

  void Swap(ClientUserInfo* other);

  // implements Message ----------------------------------------------

  ClientUserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientUserInfo& from);
  void MergeFrom(const ClientUserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline const ::std::string& user_id() const;
  inline void set_user_id(const ::std::string& value);
  inline void set_user_id(const char* value);
  inline void set_user_id(const char* value, size_t size);
  inline ::std::string* mutable_user_id();
  inline ::std::string* release_user_id();
  inline void set_allocated_user_id(::std::string* user_id);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string nick_name = 3;
  inline bool has_nick_name() const;
  inline void clear_nick_name();
  static const int kNickNameFieldNumber = 3;
  inline const ::std::string& nick_name() const;
  inline void set_nick_name(const ::std::string& value);
  inline void set_nick_name(const char* value);
  inline void set_nick_name(const char* value, size_t size);
  inline ::std::string* mutable_nick_name();
  inline ::std::string* release_nick_name();
  inline void set_allocated_nick_name(::std::string* nick_name);

  // required string avatar_url = 4;
  inline bool has_avatar_url() const;
  inline void clear_avatar_url();
  static const int kAvatarUrlFieldNumber = 4;
  inline const ::std::string& avatar_url() const;
  inline void set_avatar_url(const ::std::string& value);
  inline void set_avatar_url(const char* value);
  inline void set_avatar_url(const char* value, size_t size);
  inline ::std::string* mutable_avatar_url();
  inline ::std::string* release_avatar_url();
  inline void set_allocated_avatar_url(::std::string* avatar_url);

  // required string department = 5;
  inline bool has_department() const;
  inline void clear_department();
  static const int kDepartmentFieldNumber = 5;
  inline const ::std::string& department() const;
  inline void set_department(const ::std::string& value);
  inline void set_department(const char* value);
  inline void set_department(const char* value, size_t size);
  inline ::std::string* mutable_department();
  inline ::std::string* release_department();
  inline void set_allocated_department(::std::string* department);

  // required .IM.BaseDefine.UserType user_type = 6;
  inline bool has_user_type() const;
  inline void clear_user_type();
  static const int kUserTypeFieldNumber = 6;
  inline ::IM::BaseDefine::UserType user_type() const;
  inline void set_user_type(::IM::BaseDefine::UserType value);

  // required uint32 user_updated = 7;
  inline bool has_user_updated() const;
  inline void clear_user_updated();
  static const int kUserUpdatedFieldNumber = 7;
  inline ::google::protobuf::uint32 user_updated() const;
  inline void set_user_updated(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IM.BaseDefine.ClientUserInfo)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_nick_name();
  inline void clear_has_nick_name();
  inline void set_has_avatar_url();
  inline void clear_has_avatar_url();
  inline void set_has_department();
  inline void clear_has_department();
  inline void set_has_user_type();
  inline void clear_has_user_type();
  inline void set_has_user_updated();
  inline void clear_has_user_updated();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* user_id_;
  ::std::string* name_;
  ::std::string* nick_name_;
  ::std::string* avatar_url_;
  ::std::string* department_;
  int user_type_;
  ::google::protobuf::uint32 user_updated_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_IM_2eBaseDefine_2eproto();
  friend void protobuf_AssignDesc_IM_2eBaseDefine_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBaseDefine_2eproto();

  void InitAsDefaultInstance();
  static ClientUserInfo* default_instance_;
};
// -------------------------------------------------------------------

class ServerUserInfo : public ::google::protobuf::Message {
 public:
  ServerUserInfo();
  virtual ~ServerUserInfo();

  ServerUserInfo(const ServerUserInfo& from);

  inline ServerUserInfo& operator=(const ServerUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerUserInfo& default_instance();

  void Swap(ServerUserInfo* other);

  // implements Message ----------------------------------------------

  ServerUserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerUserInfo& from);
  void MergeFrom(const ServerUserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string nick_name = 3;
  inline bool has_nick_name() const;
  inline void clear_nick_name();
  static const int kNickNameFieldNumber = 3;
  inline const ::std::string& nick_name() const;
  inline void set_nick_name(const ::std::string& value);
  inline void set_nick_name(const char* value);
  inline void set_nick_name(const char* value, size_t size);
  inline ::std::string* mutable_nick_name();
  inline ::std::string* release_nick_name();
  inline void set_allocated_nick_name(::std::string* nick_name);

  // required string avatar_url = 4;
  inline bool has_avatar_url() const;
  inline void clear_avatar_url();
  static const int kAvatarUrlFieldNumber = 4;
  inline const ::std::string& avatar_url() const;
  inline void set_avatar_url(const ::std::string& value);
  inline void set_avatar_url(const char* value);
  inline void set_avatar_url(const char* value, size_t size);
  inline ::std::string* mutable_avatar_url();
  inline ::std::string* release_avatar_url();
  inline void set_allocated_avatar_url(::std::string* avatar_url);

  // required string department = 5;
  inline bool has_department() const;
  inline void clear_department();
  static const int kDepartmentFieldNumber = 5;
  inline const ::std::string& department() const;
  inline void set_department(const ::std::string& value);
  inline void set_department(const char* value);
  inline void set_department(const char* value, size_t size);
  inline ::std::string* mutable_department();
  inline ::std::string* release_department();
  inline void set_allocated_department(::std::string* department);

  // required uint32 user_type = 6;
  inline bool has_user_type() const;
  inline void clear_user_type();
  static const int kUserTypeFieldNumber = 6;
  inline ::google::protobuf::uint32 user_type() const;
  inline void set_user_type(::google::protobuf::uint32 value);

  // required uint32 user_update = 7;
  inline bool has_user_update() const;
  inline void clear_user_update();
  static const int kUserUpdateFieldNumber = 7;
  inline ::google::protobuf::uint32 user_update() const;
  inline void set_user_update(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IM.BaseDefine.ServerUserInfo)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_nick_name();
  inline void clear_has_nick_name();
  inline void set_has_avatar_url();
  inline void clear_has_avatar_url();
  inline void set_has_department();
  inline void clear_has_department();
  inline void set_has_user_type();
  inline void clear_has_user_type();
  inline void set_has_user_update();
  inline void clear_has_user_update();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* nick_name_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 user_type_;
  ::std::string* avatar_url_;
  ::std::string* department_;
  ::google::protobuf::uint32 user_update_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_IM_2eBaseDefine_2eproto();
  friend void protobuf_AssignDesc_IM_2eBaseDefine_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBaseDefine_2eproto();

  void InitAsDefaultInstance();
  static ServerUserInfo* default_instance_;
};
// -------------------------------------------------------------------

class ClientUserStat : public ::google::protobuf::Message {
 public:
  ClientUserStat();
  virtual ~ClientUserStat();

  ClientUserStat(const ClientUserStat& from);

  inline ClientUserStat& operator=(const ClientUserStat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientUserStat& default_instance();

  void Swap(ClientUserStat* other);

  // implements Message ----------------------------------------------

  ClientUserStat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientUserStat& from);
  void MergeFrom(const ClientUserStat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline const ::std::string& user_id() const;
  inline void set_user_id(const ::std::string& value);
  inline void set_user_id(const char* value);
  inline void set_user_id(const char* value, size_t size);
  inline ::std::string* mutable_user_id();
  inline ::std::string* release_user_id();
  inline void set_allocated_user_id(::std::string* user_id);

  // required .IM.BaseDefine.UserStatType user_stat = 2;
  inline bool has_user_stat() const;
  inline void clear_user_stat();
  static const int kUserStatFieldNumber = 2;
  inline ::IM::BaseDefine::UserStatType user_stat() const;
  inline void set_user_stat(::IM::BaseDefine::UserStatType value);

  // @@protoc_insertion_point(class_scope:IM.BaseDefine.ClientUserStat)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_user_stat();
  inline void clear_has_user_stat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* user_id_;
  int user_stat_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_IM_2eBaseDefine_2eproto();
  friend void protobuf_AssignDesc_IM_2eBaseDefine_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBaseDefine_2eproto();

  void InitAsDefaultInstance();
  static ClientUserStat* default_instance_;
};
// -------------------------------------------------------------------

class ServerUserStat : public ::google::protobuf::Message {
 public:
  ServerUserStat();
  virtual ~ServerUserStat();

  ServerUserStat(const ServerUserStat& from);

  inline ServerUserStat& operator=(const ServerUserStat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerUserStat& default_instance();

  void Swap(ServerUserStat* other);

  // implements Message ----------------------------------------------

  ServerUserStat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerUserStat& from);
  void MergeFrom(const ServerUserStat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.UserStatType user_stat = 2;
  inline bool has_user_stat() const;
  inline void clear_user_stat();
  static const int kUserStatFieldNumber = 2;
  inline ::IM::BaseDefine::UserStatType user_stat() const;
  inline void set_user_stat(::IM::BaseDefine::UserStatType value);

  // @@protoc_insertion_point(class_scope:IM.BaseDefine.ServerUserStat)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_user_stat();
  inline void clear_has_user_stat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 user_id_;
  int user_stat_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_IM_2eBaseDefine_2eproto();
  friend void protobuf_AssignDesc_IM_2eBaseDefine_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBaseDefine_2eproto();

  void InitAsDefaultInstance();
  static ServerUserStat* default_instance_;
};
// -------------------------------------------------------------------

class ClientUnReadInfo : public ::google::protobuf::Message {
 public:
  ClientUnReadInfo();
  virtual ~ClientUnReadInfo();

  ClientUnReadInfo(const ClientUnReadInfo& from);

  inline ClientUnReadInfo& operator=(const ClientUnReadInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientUnReadInfo& default_instance();

  void Swap(ClientUnReadInfo* other);

  // implements Message ----------------------------------------------

  ClientUnReadInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientUnReadInfo& from);
  void MergeFrom(const ClientUnReadInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline const ::std::string& user_id() const;
  inline void set_user_id(const ::std::string& value);
  inline void set_user_id(const char* value);
  inline void set_user_id(const char* value, size_t size);
  inline ::std::string* mutable_user_id();
  inline ::std::string* release_user_id();
  inline void set_allocated_user_id(::std::string* user_id);

  // required uint32 unread_count = 2;
  inline bool has_unread_count() const;
  inline void clear_unread_count();
  static const int kUnreadCountFieldNumber = 2;
  inline ::google::protobuf::uint32 unread_count() const;
  inline void set_unread_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IM.BaseDefine.ClientUnReadInfo)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_unread_count();
  inline void clear_has_unread_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* user_id_;
  ::google::protobuf::uint32 unread_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_IM_2eBaseDefine_2eproto();
  friend void protobuf_AssignDesc_IM_2eBaseDefine_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBaseDefine_2eproto();

  void InitAsDefaultInstance();
  static ClientUnReadInfo* default_instance_;
};
// -------------------------------------------------------------------

class ServerUnReadInfo : public ::google::protobuf::Message {
 public:
  ServerUnReadInfo();
  virtual ~ServerUnReadInfo();

  ServerUnReadInfo(const ServerUnReadInfo& from);

  inline ServerUnReadInfo& operator=(const ServerUnReadInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerUnReadInfo& default_instance();

  void Swap(ServerUnReadInfo* other);

  // implements Message ----------------------------------------------

  ServerUnReadInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerUnReadInfo& from);
  void MergeFrom(const ServerUnReadInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 unread_count = 2;
  inline bool has_unread_count() const;
  inline void clear_unread_count();
  static const int kUnreadCountFieldNumber = 2;
  inline ::google::protobuf::uint32 unread_count() const;
  inline void set_unread_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IM.BaseDefine.ServerUnReadInfo)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_unread_count();
  inline void clear_has_unread_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 unread_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_IM_2eBaseDefine_2eproto();
  friend void protobuf_AssignDesc_IM_2eBaseDefine_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBaseDefine_2eproto();

  void InitAsDefaultInstance();
  static ServerUnReadInfo* default_instance_;
};
// -------------------------------------------------------------------

class ClientMsgInfo : public ::google::protobuf::Message {
 public:
  ClientMsgInfo();
  virtual ~ClientMsgInfo();

  ClientMsgInfo(const ClientMsgInfo& from);

  inline ClientMsgInfo& operator=(const ClientMsgInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientMsgInfo& default_instance();

  void Swap(ClientMsgInfo* other);

  // implements Message ----------------------------------------------

  ClientMsgInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientMsgInfo& from);
  void MergeFrom(const ClientMsgInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string from_user_id = 1;
  inline bool has_from_user_id() const;
  inline void clear_from_user_id();
  static const int kFromUserIdFieldNumber = 1;
  inline const ::std::string& from_user_id() const;
  inline void set_from_user_id(const ::std::string& value);
  inline void set_from_user_id(const char* value);
  inline void set_from_user_id(const char* value, size_t size);
  inline ::std::string* mutable_from_user_id();
  inline ::std::string* release_from_user_id();
  inline void set_allocated_from_user_id(::std::string* from_user_id);

  // required string from_user_name = 2;
  inline bool has_from_user_name() const;
  inline void clear_from_user_name();
  static const int kFromUserNameFieldNumber = 2;
  inline const ::std::string& from_user_name() const;
  inline void set_from_user_name(const ::std::string& value);
  inline void set_from_user_name(const char* value);
  inline void set_from_user_name(const char* value, size_t size);
  inline ::std::string* mutable_from_user_name();
  inline ::std::string* release_from_user_name();
  inline void set_allocated_from_user_name(::std::string* from_user_name);

  // required string from_user_nick_name = 3;
  inline bool has_from_user_nick_name() const;
  inline void clear_from_user_nick_name();
  static const int kFromUserNickNameFieldNumber = 3;
  inline const ::std::string& from_user_nick_name() const;
  inline void set_from_user_nick_name(const ::std::string& value);
  inline void set_from_user_nick_name(const char* value);
  inline void set_from_user_nick_name(const char* value, size_t size);
  inline ::std::string* mutable_from_user_nick_name();
  inline ::std::string* release_from_user_nick_name();
  inline void set_allocated_from_user_nick_name(::std::string* from_user_nick_name);

  // required string from_user_avatar_url = 4;
  inline bool has_from_user_avatar_url() const;
  inline void clear_from_user_avatar_url();
  static const int kFromUserAvatarUrlFieldNumber = 4;
  inline const ::std::string& from_user_avatar_url() const;
  inline void set_from_user_avatar_url(const ::std::string& value);
  inline void set_from_user_avatar_url(const char* value);
  inline void set_from_user_avatar_url(const char* value, size_t size);
  inline ::std::string* mutable_from_user_avatar_url();
  inline ::std::string* release_from_user_avatar_url();
  inline void set_allocated_from_user_avatar_url(::std::string* from_user_avatar_url);

  // required uint32 create_time = 5;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 create_time() const;
  inline void set_create_time(::google::protobuf::uint32 value);

  // required uint32 msg_type = 6;
  inline bool has_msg_type() const;
  inline void clear_msg_type();
  static const int kMsgTypeFieldNumber = 6;
  inline ::google::protobuf::uint32 msg_type() const;
  inline void set_msg_type(::google::protobuf::uint32 value);

  // required string msg_content = 7;
  inline bool has_msg_content() const;
  inline void clear_msg_content();
  static const int kMsgContentFieldNumber = 7;
  inline const ::std::string& msg_content() const;
  inline void set_msg_content(const ::std::string& value);
  inline void set_msg_content(const char* value);
  inline void set_msg_content(const char* value, size_t size);
  inline ::std::string* mutable_msg_content();
  inline ::std::string* release_msg_content();
  inline void set_allocated_msg_content(::std::string* msg_content);

  // @@protoc_insertion_point(class_scope:IM.BaseDefine.ClientMsgInfo)
 private:
  inline void set_has_from_user_id();
  inline void clear_has_from_user_id();
  inline void set_has_from_user_name();
  inline void clear_has_from_user_name();
  inline void set_has_from_user_nick_name();
  inline void clear_has_from_user_nick_name();
  inline void set_has_from_user_avatar_url();
  inline void clear_has_from_user_avatar_url();
  inline void set_has_create_time();
  inline void clear_has_create_time();
  inline void set_has_msg_type();
  inline void clear_has_msg_type();
  inline void set_has_msg_content();
  inline void clear_has_msg_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* from_user_id_;
  ::std::string* from_user_name_;
  ::std::string* from_user_nick_name_;
  ::std::string* from_user_avatar_url_;
  ::google::protobuf::uint32 create_time_;
  ::google::protobuf::uint32 msg_type_;
  ::std::string* msg_content_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_IM_2eBaseDefine_2eproto();
  friend void protobuf_AssignDesc_IM_2eBaseDefine_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBaseDefine_2eproto();

  void InitAsDefaultInstance();
  static ClientMsgInfo* default_instance_;
};
// -------------------------------------------------------------------

class ServerMsgInfo : public ::google::protobuf::Message {
 public:
  ServerMsgInfo();
  virtual ~ServerMsgInfo();

  ServerMsgInfo(const ServerMsgInfo& from);

  inline ServerMsgInfo& operator=(const ServerMsgInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerMsgInfo& default_instance();

  void Swap(ServerMsgInfo* other);

  // implements Message ----------------------------------------------

  ServerMsgInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerMsgInfo& from);
  void MergeFrom(const ServerMsgInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 from_user_id = 1;
  inline bool has_from_user_id() const;
  inline void clear_from_user_id();
  static const int kFromUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 from_user_id() const;
  inline void set_from_user_id(::google::protobuf::uint32 value);

  // required string from_user_name = 2;
  inline bool has_from_user_name() const;
  inline void clear_from_user_name();
  static const int kFromUserNameFieldNumber = 2;
  inline const ::std::string& from_user_name() const;
  inline void set_from_user_name(const ::std::string& value);
  inline void set_from_user_name(const char* value);
  inline void set_from_user_name(const char* value, size_t size);
  inline ::std::string* mutable_from_user_name();
  inline ::std::string* release_from_user_name();
  inline void set_allocated_from_user_name(::std::string* from_user_name);

  // required string from_user_nick_name = 3;
  inline bool has_from_user_nick_name() const;
  inline void clear_from_user_nick_name();
  static const int kFromUserNickNameFieldNumber = 3;
  inline const ::std::string& from_user_nick_name() const;
  inline void set_from_user_nick_name(const ::std::string& value);
  inline void set_from_user_nick_name(const char* value);
  inline void set_from_user_nick_name(const char* value, size_t size);
  inline ::std::string* mutable_from_user_nick_name();
  inline ::std::string* release_from_user_nick_name();
  inline void set_allocated_from_user_nick_name(::std::string* from_user_nick_name);

  // required string from_user_avatar_url = 4;
  inline bool has_from_user_avatar_url() const;
  inline void clear_from_user_avatar_url();
  static const int kFromUserAvatarUrlFieldNumber = 4;
  inline const ::std::string& from_user_avatar_url() const;
  inline void set_from_user_avatar_url(const ::std::string& value);
  inline void set_from_user_avatar_url(const char* value);
  inline void set_from_user_avatar_url(const char* value, size_t size);
  inline ::std::string* mutable_from_user_avatar_url();
  inline ::std::string* release_from_user_avatar_url();
  inline void set_allocated_from_user_avatar_url(::std::string* from_user_avatar_url);

  // required uint32 create_time = 5;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 create_time() const;
  inline void set_create_time(::google::protobuf::uint32 value);

  // required uint32 msg_type = 6;
  inline bool has_msg_type() const;
  inline void clear_msg_type();
  static const int kMsgTypeFieldNumber = 6;
  inline ::google::protobuf::uint32 msg_type() const;
  inline void set_msg_type(::google::protobuf::uint32 value);

  // required string msg_content = 7;
  inline bool has_msg_content() const;
  inline void clear_msg_content();
  static const int kMsgContentFieldNumber = 7;
  inline const ::std::string& msg_content() const;
  inline void set_msg_content(const ::std::string& value);
  inline void set_msg_content(const char* value);
  inline void set_msg_content(const char* value, size_t size);
  inline ::std::string* mutable_msg_content();
  inline ::std::string* release_msg_content();
  inline void set_allocated_msg_content(::std::string* msg_content);

  // @@protoc_insertion_point(class_scope:IM.BaseDefine.ServerMsgInfo)
 private:
  inline void set_has_from_user_id();
  inline void clear_has_from_user_id();
  inline void set_has_from_user_name();
  inline void clear_has_from_user_name();
  inline void set_has_from_user_nick_name();
  inline void clear_has_from_user_nick_name();
  inline void set_has_from_user_avatar_url();
  inline void clear_has_from_user_avatar_url();
  inline void set_has_create_time();
  inline void clear_has_create_time();
  inline void set_has_msg_type();
  inline void clear_has_msg_type();
  inline void set_has_msg_content();
  inline void clear_has_msg_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* from_user_name_;
  ::std::string* from_user_nick_name_;
  ::google::protobuf::uint32 from_user_id_;
  ::google::protobuf::uint32 create_time_;
  ::std::string* from_user_avatar_url_;
  ::std::string* msg_content_;
  ::google::protobuf::uint32 msg_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_IM_2eBaseDefine_2eproto();
  friend void protobuf_AssignDesc_IM_2eBaseDefine_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBaseDefine_2eproto();

  void InitAsDefaultInstance();
  static ServerMsgInfo* default_instance_;
};
// -------------------------------------------------------------------

class ClientGroupInfo : public ::google::protobuf::Message {
 public:
  ClientGroupInfo();
  virtual ~ClientGroupInfo();

  ClientGroupInfo(const ClientGroupInfo& from);

  inline ClientGroupInfo& operator=(const ClientGroupInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientGroupInfo& default_instance();

  void Swap(ClientGroupInfo* other);

  // implements Message ----------------------------------------------

  ClientGroupInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientGroupInfo& from);
  void MergeFrom(const ClientGroupInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline const ::std::string& group_id() const;
  inline void set_group_id(const ::std::string& value);
  inline void set_group_id(const char* value);
  inline void set_group_id(const char* value, size_t size);
  inline ::std::string* mutable_group_id();
  inline ::std::string* release_group_id();
  inline void set_allocated_group_id(::std::string* group_id);

  // required string group_name = 2;
  inline bool has_group_name() const;
  inline void clear_group_name();
  static const int kGroupNameFieldNumber = 2;
  inline const ::std::string& group_name() const;
  inline void set_group_name(const ::std::string& value);
  inline void set_group_name(const char* value);
  inline void set_group_name(const char* value, size_t size);
  inline ::std::string* mutable_group_name();
  inline ::std::string* release_group_name();
  inline void set_allocated_group_name(::std::string* group_name);

  // required string group_avatar = 3;
  inline bool has_group_avatar() const;
  inline void clear_group_avatar();
  static const int kGroupAvatarFieldNumber = 3;
  inline const ::std::string& group_avatar() const;
  inline void set_group_avatar(const ::std::string& value);
  inline void set_group_avatar(const char* value);
  inline void set_group_avatar(const char* value, size_t size);
  inline ::std::string* mutable_group_avatar();
  inline ::std::string* release_group_avatar();
  inline void set_allocated_group_avatar(::std::string* group_avatar);

  // required string group_creator_id = 4;
  inline bool has_group_creator_id() const;
  inline void clear_group_creator_id();
  static const int kGroupCreatorIdFieldNumber = 4;
  inline const ::std::string& group_creator_id() const;
  inline void set_group_creator_id(const ::std::string& value);
  inline void set_group_creator_id(const char* value);
  inline void set_group_creator_id(const char* value, size_t size);
  inline ::std::string* mutable_group_creator_id();
  inline ::std::string* release_group_creator_id();
  inline void set_allocated_group_creator_id(::std::string* group_creator_id);

  // required .IM.BaseDefine.GroupType group_type = 5;
  inline bool has_group_type() const;
  inline void clear_group_type();
  static const int kGroupTypeFieldNumber = 5;
  inline ::IM::BaseDefine::GroupType group_type() const;
  inline void set_group_type(::IM::BaseDefine::GroupType value);

  // required uint32 group_updated = 6;
  inline bool has_group_updated() const;
  inline void clear_group_updated();
  static const int kGroupUpdatedFieldNumber = 6;
  inline ::google::protobuf::uint32 group_updated() const;
  inline void set_group_updated(::google::protobuf::uint32 value);

  // repeated string group_member_list = 7;
  inline int group_member_list_size() const;
  inline void clear_group_member_list();
  static const int kGroupMemberListFieldNumber = 7;
  inline const ::std::string& group_member_list(int index) const;
  inline ::std::string* mutable_group_member_list(int index);
  inline void set_group_member_list(int index, const ::std::string& value);
  inline void set_group_member_list(int index, const char* value);
  inline void set_group_member_list(int index, const char* value, size_t size);
  inline ::std::string* add_group_member_list();
  inline void add_group_member_list(const ::std::string& value);
  inline void add_group_member_list(const char* value);
  inline void add_group_member_list(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& group_member_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_group_member_list();

  // @@protoc_insertion_point(class_scope:IM.BaseDefine.ClientGroupInfo)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_group_name();
  inline void clear_has_group_name();
  inline void set_has_group_avatar();
  inline void clear_has_group_avatar();
  inline void set_has_group_creator_id();
  inline void clear_has_group_creator_id();
  inline void set_has_group_type();
  inline void clear_has_group_type();
  inline void set_has_group_updated();
  inline void clear_has_group_updated();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* group_id_;
  ::std::string* group_name_;
  ::std::string* group_avatar_;
  ::std::string* group_creator_id_;
  int group_type_;
  ::google::protobuf::uint32 group_updated_;
  ::google::protobuf::RepeatedPtrField< ::std::string> group_member_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_IM_2eBaseDefine_2eproto();
  friend void protobuf_AssignDesc_IM_2eBaseDefine_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBaseDefine_2eproto();

  void InitAsDefaultInstance();
  static ClientGroupInfo* default_instance_;
};
// -------------------------------------------------------------------

class ServerGroupInfo : public ::google::protobuf::Message {
 public:
  ServerGroupInfo();
  virtual ~ServerGroupInfo();

  ServerGroupInfo(const ServerGroupInfo& from);

  inline ServerGroupInfo& operator=(const ServerGroupInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerGroupInfo& default_instance();

  void Swap(ServerGroupInfo* other);

  // implements Message ----------------------------------------------

  ServerGroupInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerGroupInfo& from);
  void MergeFrom(const ServerGroupInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required string group_name = 2;
  inline bool has_group_name() const;
  inline void clear_group_name();
  static const int kGroupNameFieldNumber = 2;
  inline const ::std::string& group_name() const;
  inline void set_group_name(const ::std::string& value);
  inline void set_group_name(const char* value);
  inline void set_group_name(const char* value, size_t size);
  inline ::std::string* mutable_group_name();
  inline ::std::string* release_group_name();
  inline void set_allocated_group_name(::std::string* group_name);

  // required string group_avatar = 3;
  inline bool has_group_avatar() const;
  inline void clear_group_avatar();
  static const int kGroupAvatarFieldNumber = 3;
  inline const ::std::string& group_avatar() const;
  inline void set_group_avatar(const ::std::string& value);
  inline void set_group_avatar(const char* value);
  inline void set_group_avatar(const char* value, size_t size);
  inline ::std::string* mutable_group_avatar();
  inline ::std::string* release_group_avatar();
  inline void set_allocated_group_avatar(::std::string* group_avatar);

  // required uint32 group_creator_id = 4;
  inline bool has_group_creator_id() const;
  inline void clear_group_creator_id();
  static const int kGroupCreatorIdFieldNumber = 4;
  inline ::google::protobuf::uint32 group_creator_id() const;
  inline void set_group_creator_id(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.GroupType group_type = 5;
  inline bool has_group_type() const;
  inline void clear_group_type();
  static const int kGroupTypeFieldNumber = 5;
  inline ::IM::BaseDefine::GroupType group_type() const;
  inline void set_group_type(::IM::BaseDefine::GroupType value);

  // required uint32 group_updated = 6;
  inline bool has_group_updated() const;
  inline void clear_group_updated();
  static const int kGroupUpdatedFieldNumber = 6;
  inline ::google::protobuf::uint32 group_updated() const;
  inline void set_group_updated(::google::protobuf::uint32 value);

  // repeated uint32 group_member_list = 7;
  inline int group_member_list_size() const;
  inline void clear_group_member_list();
  static const int kGroupMemberListFieldNumber = 7;
  inline ::google::protobuf::uint32 group_member_list(int index) const;
  inline void set_group_member_list(int index, ::google::protobuf::uint32 value);
  inline void add_group_member_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      group_member_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_group_member_list();

  // @@protoc_insertion_point(class_scope:IM.BaseDefine.ServerGroupInfo)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_group_name();
  inline void clear_has_group_name();
  inline void set_has_group_avatar();
  inline void clear_has_group_avatar();
  inline void set_has_group_creator_id();
  inline void clear_has_group_creator_id();
  inline void set_has_group_type();
  inline void clear_has_group_type();
  inline void set_has_group_updated();
  inline void clear_has_group_updated();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* group_name_;
  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::uint32 group_creator_id_;
  ::std::string* group_avatar_;
  int group_type_;
  ::google::protobuf::uint32 group_updated_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > group_member_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_IM_2eBaseDefine_2eproto();
  friend void protobuf_AssignDesc_IM_2eBaseDefine_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBaseDefine_2eproto();

  void InitAsDefaultInstance();
  static ServerGroupInfo* default_instance_;
};
// -------------------------------------------------------------------

class ClientGroupUnReadCnt : public ::google::protobuf::Message {
 public:
  ClientGroupUnReadCnt();
  virtual ~ClientGroupUnReadCnt();

  ClientGroupUnReadCnt(const ClientGroupUnReadCnt& from);

  inline ClientGroupUnReadCnt& operator=(const ClientGroupUnReadCnt& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientGroupUnReadCnt& default_instance();

  void Swap(ClientGroupUnReadCnt* other);

  // implements Message ----------------------------------------------

  ClientGroupUnReadCnt* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientGroupUnReadCnt& from);
  void MergeFrom(const ClientGroupUnReadCnt& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline const ::std::string& group_id() const;
  inline void set_group_id(const ::std::string& value);
  inline void set_group_id(const char* value);
  inline void set_group_id(const char* value, size_t size);
  inline ::std::string* mutable_group_id();
  inline ::std::string* release_group_id();
  inline void set_allocated_group_id(::std::string* group_id);

  // required uint32 unread_cnt = 2;
  inline bool has_unread_cnt() const;
  inline void clear_unread_cnt();
  static const int kUnreadCntFieldNumber = 2;
  inline ::google::protobuf::uint32 unread_cnt() const;
  inline void set_unread_cnt(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IM.BaseDefine.ClientGroupUnReadCnt)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_unread_cnt();
  inline void clear_has_unread_cnt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* group_id_;
  ::google::protobuf::uint32 unread_cnt_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_IM_2eBaseDefine_2eproto();
  friend void protobuf_AssignDesc_IM_2eBaseDefine_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBaseDefine_2eproto();

  void InitAsDefaultInstance();
  static ClientGroupUnReadCnt* default_instance_;
};
// -------------------------------------------------------------------

class ServerGroupUnReadCnt : public ::google::protobuf::Message {
 public:
  ServerGroupUnReadCnt();
  virtual ~ServerGroupUnReadCnt();

  ServerGroupUnReadCnt(const ServerGroupUnReadCnt& from);

  inline ServerGroupUnReadCnt& operator=(const ServerGroupUnReadCnt& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerGroupUnReadCnt& default_instance();

  void Swap(ServerGroupUnReadCnt* other);

  // implements Message ----------------------------------------------

  ServerGroupUnReadCnt* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerGroupUnReadCnt& from);
  void MergeFrom(const ServerGroupUnReadCnt& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required uint32 unread_cnt = 2;
  inline bool has_unread_cnt() const;
  inline void clear_unread_cnt();
  static const int kUnreadCntFieldNumber = 2;
  inline ::google::protobuf::uint32 unread_cnt() const;
  inline void set_unread_cnt(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IM.BaseDefine.ServerGroupUnReadCnt)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_unread_cnt();
  inline void clear_has_unread_cnt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::uint32 unread_cnt_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_IM_2eBaseDefine_2eproto();
  friend void protobuf_AssignDesc_IM_2eBaseDefine_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBaseDefine_2eproto();

  void InitAsDefaultInstance();
  static ServerGroupUnReadCnt* default_instance_;
};
// -------------------------------------------------------------------

class ClientGroupMsg : public ::google::protobuf::Message {
 public:
  ClientGroupMsg();
  virtual ~ClientGroupMsg();

  ClientGroupMsg(const ClientGroupMsg& from);

  inline ClientGroupMsg& operator=(const ClientGroupMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientGroupMsg& default_instance();

  void Swap(ClientGroupMsg* other);

  // implements Message ----------------------------------------------

  ClientGroupMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientGroupMsg& from);
  void MergeFrom(const ClientGroupMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string from_user_id = 1;
  inline bool has_from_user_id() const;
  inline void clear_from_user_id();
  static const int kFromUserIdFieldNumber = 1;
  inline const ::std::string& from_user_id() const;
  inline void set_from_user_id(const ::std::string& value);
  inline void set_from_user_id(const char* value);
  inline void set_from_user_id(const char* value, size_t size);
  inline ::std::string* mutable_from_user_id();
  inline ::std::string* release_from_user_id();
  inline void set_allocated_from_user_id(::std::string* from_user_id);

  // required uint32 create_time = 2;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 create_time() const;
  inline void set_create_time(::google::protobuf::uint32 value);

  // required string msg_content = 3;
  inline bool has_msg_content() const;
  inline void clear_msg_content();
  static const int kMsgContentFieldNumber = 3;
  inline const ::std::string& msg_content() const;
  inline void set_msg_content(const ::std::string& value);
  inline void set_msg_content(const char* value);
  inline void set_msg_content(const char* value, size_t size);
  inline ::std::string* mutable_msg_content();
  inline ::std::string* release_msg_content();
  inline void set_allocated_msg_content(::std::string* msg_content);

  // @@protoc_insertion_point(class_scope:IM.BaseDefine.ClientGroupMsg)
 private:
  inline void set_has_from_user_id();
  inline void clear_has_from_user_id();
  inline void set_has_create_time();
  inline void clear_has_create_time();
  inline void set_has_msg_content();
  inline void clear_has_msg_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* from_user_id_;
  ::std::string* msg_content_;
  ::google::protobuf::uint32 create_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_IM_2eBaseDefine_2eproto();
  friend void protobuf_AssignDesc_IM_2eBaseDefine_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBaseDefine_2eproto();

  void InitAsDefaultInstance();
  static ClientGroupMsg* default_instance_;
};
// -------------------------------------------------------------------

class ServerGroupMsg : public ::google::protobuf::Message {
 public:
  ServerGroupMsg();
  virtual ~ServerGroupMsg();

  ServerGroupMsg(const ServerGroupMsg& from);

  inline ServerGroupMsg& operator=(const ServerGroupMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerGroupMsg& default_instance();

  void Swap(ServerGroupMsg* other);

  // implements Message ----------------------------------------------

  ServerGroupMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerGroupMsg& from);
  void MergeFrom(const ServerGroupMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 from_user_id = 1;
  inline bool has_from_user_id() const;
  inline void clear_from_user_id();
  static const int kFromUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 from_user_id() const;
  inline void set_from_user_id(::google::protobuf::uint32 value);

  // required uint32 create_time = 2;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 create_time() const;
  inline void set_create_time(::google::protobuf::uint32 value);

  // required string msg_content = 3;
  inline bool has_msg_content() const;
  inline void clear_msg_content();
  static const int kMsgContentFieldNumber = 3;
  inline const ::std::string& msg_content() const;
  inline void set_msg_content(const ::std::string& value);
  inline void set_msg_content(const char* value);
  inline void set_msg_content(const char* value, size_t size);
  inline ::std::string* mutable_msg_content();
  inline ::std::string* release_msg_content();
  inline void set_allocated_msg_content(::std::string* msg_content);

  // @@protoc_insertion_point(class_scope:IM.BaseDefine.ServerGroupMsg)
 private:
  inline void set_has_from_user_id();
  inline void clear_has_from_user_id();
  inline void set_has_create_time();
  inline void clear_has_create_time();
  inline void set_has_msg_content();
  inline void clear_has_msg_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 from_user_id_;
  ::google::protobuf::uint32 create_time_;
  ::std::string* msg_content_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_IM_2eBaseDefine_2eproto();
  friend void protobuf_AssignDesc_IM_2eBaseDefine_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBaseDefine_2eproto();

  void InitAsDefaultInstance();
  static ServerGroupMsg* default_instance_;
};
// -------------------------------------------------------------------

class ClientOfflineFileInfo : public ::google::protobuf::Message {
 public:
  ClientOfflineFileInfo();
  virtual ~ClientOfflineFileInfo();

  ClientOfflineFileInfo(const ClientOfflineFileInfo& from);

  inline ClientOfflineFileInfo& operator=(const ClientOfflineFileInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientOfflineFileInfo& default_instance();

  void Swap(ClientOfflineFileInfo* other);

  // implements Message ----------------------------------------------

  ClientOfflineFileInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientOfflineFileInfo& from);
  void MergeFrom(const ClientOfflineFileInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string from_user_id = 1;
  inline bool has_from_user_id() const;
  inline void clear_from_user_id();
  static const int kFromUserIdFieldNumber = 1;
  inline const ::std::string& from_user_id() const;
  inline void set_from_user_id(const ::std::string& value);
  inline void set_from_user_id(const char* value);
  inline void set_from_user_id(const char* value, size_t size);
  inline ::std::string* mutable_from_user_id();
  inline ::std::string* release_from_user_id();
  inline void set_allocated_from_user_id(::std::string* from_user_id);

  // required uint32 file_id = 2;
  inline bool has_file_id() const;
  inline void clear_file_id();
  static const int kFileIdFieldNumber = 2;
  inline ::google::protobuf::uint32 file_id() const;
  inline void set_file_id(::google::protobuf::uint32 value);

  // required uint32 file_size = 3;
  inline bool has_file_size() const;
  inline void clear_file_size();
  static const int kFileSizeFieldNumber = 3;
  inline ::google::protobuf::uint32 file_size() const;
  inline void set_file_size(::google::protobuf::uint32 value);

  // required string file_path = 4;
  inline bool has_file_path() const;
  inline void clear_file_path();
  static const int kFilePathFieldNumber = 4;
  inline const ::std::string& file_path() const;
  inline void set_file_path(const ::std::string& value);
  inline void set_file_path(const char* value);
  inline void set_file_path(const char* value, size_t size);
  inline ::std::string* mutable_file_path();
  inline ::std::string* release_file_path();
  inline void set_allocated_file_path(::std::string* file_path);

  // @@protoc_insertion_point(class_scope:IM.BaseDefine.ClientOfflineFileInfo)
 private:
  inline void set_has_from_user_id();
  inline void clear_has_from_user_id();
  inline void set_has_file_id();
  inline void clear_has_file_id();
  inline void set_has_file_size();
  inline void clear_has_file_size();
  inline void set_has_file_path();
  inline void clear_has_file_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* from_user_id_;
  ::google::protobuf::uint32 file_id_;
  ::google::protobuf::uint32 file_size_;
  ::std::string* file_path_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_IM_2eBaseDefine_2eproto();
  friend void protobuf_AssignDesc_IM_2eBaseDefine_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBaseDefine_2eproto();

  void InitAsDefaultInstance();
  static ClientOfflineFileInfo* default_instance_;
};
// -------------------------------------------------------------------

class ServerOfflineFileInfo : public ::google::protobuf::Message {
 public:
  ServerOfflineFileInfo();
  virtual ~ServerOfflineFileInfo();

  ServerOfflineFileInfo(const ServerOfflineFileInfo& from);

  inline ServerOfflineFileInfo& operator=(const ServerOfflineFileInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerOfflineFileInfo& default_instance();

  void Swap(ServerOfflineFileInfo* other);

  // implements Message ----------------------------------------------

  ServerOfflineFileInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerOfflineFileInfo& from);
  void MergeFrom(const ServerOfflineFileInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 from_user_id = 1;
  inline bool has_from_user_id() const;
  inline void clear_from_user_id();
  static const int kFromUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 from_user_id() const;
  inline void set_from_user_id(::google::protobuf::uint32 value);

  // required uint32 file_id = 2;
  inline bool has_file_id() const;
  inline void clear_file_id();
  static const int kFileIdFieldNumber = 2;
  inline ::google::protobuf::uint32 file_id() const;
  inline void set_file_id(::google::protobuf::uint32 value);

  // required uint32 file_size = 3;
  inline bool has_file_size() const;
  inline void clear_file_size();
  static const int kFileSizeFieldNumber = 3;
  inline ::google::protobuf::uint32 file_size() const;
  inline void set_file_size(::google::protobuf::uint32 value);

  // required string file_path = 4;
  inline bool has_file_path() const;
  inline void clear_file_path();
  static const int kFilePathFieldNumber = 4;
  inline const ::std::string& file_path() const;
  inline void set_file_path(const ::std::string& value);
  inline void set_file_path(const char* value);
  inline void set_file_path(const char* value, size_t size);
  inline ::std::string* mutable_file_path();
  inline ::std::string* release_file_path();
  inline void set_allocated_file_path(::std::string* file_path);

  // @@protoc_insertion_point(class_scope:IM.BaseDefine.ServerOfflineFileInfo)
 private:
  inline void set_has_from_user_id();
  inline void clear_has_from_user_id();
  inline void set_has_file_id();
  inline void clear_has_file_id();
  inline void set_has_file_size();
  inline void clear_has_file_size();
  inline void set_has_file_path();
  inline void clear_has_file_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 from_user_id_;
  ::google::protobuf::uint32 file_id_;
  ::std::string* file_path_;
  ::google::protobuf::uint32 file_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_IM_2eBaseDefine_2eproto();
  friend void protobuf_AssignDesc_IM_2eBaseDefine_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBaseDefine_2eproto();

  void InitAsDefaultInstance();
  static ServerOfflineFileInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// IpAddr

// required string ip = 1;
inline bool IpAddr::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IpAddr::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IpAddr::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IpAddr::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& IpAddr::ip() const {
  return *ip_;
}
inline void IpAddr::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void IpAddr::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void IpAddr::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IpAddr::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* IpAddr::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void IpAddr::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 port = 2;
inline bool IpAddr::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IpAddr::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IpAddr::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IpAddr::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 IpAddr::port() const {
  return port_;
}
inline void IpAddr::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// ClientUserInfo

// required string user_id = 1;
inline bool ClientUserInfo::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientUserInfo::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientUserInfo::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientUserInfo::clear_user_id() {
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    user_id_->clear();
  }
  clear_has_user_id();
}
inline const ::std::string& ClientUserInfo::user_id() const {
  return *user_id_;
}
inline void ClientUserInfo::set_user_id(const ::std::string& value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
}
inline void ClientUserInfo::set_user_id(const char* value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
}
inline void ClientUserInfo::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClientUserInfo::mutable_user_id() {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  return user_id_;
}
inline ::std::string* ClientUserInfo::release_user_id() {
  clear_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_id_;
    user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClientUserInfo::set_allocated_user_id(::std::string* user_id) {
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete user_id_;
  }
  if (user_id) {
    set_has_user_id();
    user_id_ = user_id;
  } else {
    clear_has_user_id();
    user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string name = 2;
inline bool ClientUserInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientUserInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientUserInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientUserInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ClientUserInfo::name() const {
  return *name_;
}
inline void ClientUserInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ClientUserInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ClientUserInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClientUserInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ClientUserInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClientUserInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string nick_name = 3;
inline bool ClientUserInfo::has_nick_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClientUserInfo::set_has_nick_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClientUserInfo::clear_has_nick_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClientUserInfo::clear_nick_name() {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    nick_name_->clear();
  }
  clear_has_nick_name();
}
inline const ::std::string& ClientUserInfo::nick_name() const {
  return *nick_name_;
}
inline void ClientUserInfo::set_nick_name(const ::std::string& value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
}
inline void ClientUserInfo::set_nick_name(const char* value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
}
inline void ClientUserInfo::set_nick_name(const char* value, size_t size) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClientUserInfo::mutable_nick_name() {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  return nick_name_;
}
inline ::std::string* ClientUserInfo::release_nick_name() {
  clear_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nick_name_;
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClientUserInfo::set_allocated_nick_name(::std::string* nick_name) {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (nick_name) {
    set_has_nick_name();
    nick_name_ = nick_name;
  } else {
    clear_has_nick_name();
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string avatar_url = 4;
inline bool ClientUserInfo::has_avatar_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClientUserInfo::set_has_avatar_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClientUserInfo::clear_has_avatar_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClientUserInfo::clear_avatar_url() {
  if (avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    avatar_url_->clear();
  }
  clear_has_avatar_url();
}
inline const ::std::string& ClientUserInfo::avatar_url() const {
  return *avatar_url_;
}
inline void ClientUserInfo::set_avatar_url(const ::std::string& value) {
  set_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    avatar_url_ = new ::std::string;
  }
  avatar_url_->assign(value);
}
inline void ClientUserInfo::set_avatar_url(const char* value) {
  set_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    avatar_url_ = new ::std::string;
  }
  avatar_url_->assign(value);
}
inline void ClientUserInfo::set_avatar_url(const char* value, size_t size) {
  set_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    avatar_url_ = new ::std::string;
  }
  avatar_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClientUserInfo::mutable_avatar_url() {
  set_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    avatar_url_ = new ::std::string;
  }
  return avatar_url_;
}
inline ::std::string* ClientUserInfo::release_avatar_url() {
  clear_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = avatar_url_;
    avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClientUserInfo::set_allocated_avatar_url(::std::string* avatar_url) {
  if (avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    delete avatar_url_;
  }
  if (avatar_url) {
    set_has_avatar_url();
    avatar_url_ = avatar_url;
  } else {
    clear_has_avatar_url();
    avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string department = 5;
inline bool ClientUserInfo::has_department() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ClientUserInfo::set_has_department() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ClientUserInfo::clear_has_department() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ClientUserInfo::clear_department() {
  if (department_ != &::google::protobuf::internal::kEmptyString) {
    department_->clear();
  }
  clear_has_department();
}
inline const ::std::string& ClientUserInfo::department() const {
  return *department_;
}
inline void ClientUserInfo::set_department(const ::std::string& value) {
  set_has_department();
  if (department_ == &::google::protobuf::internal::kEmptyString) {
    department_ = new ::std::string;
  }
  department_->assign(value);
}
inline void ClientUserInfo::set_department(const char* value) {
  set_has_department();
  if (department_ == &::google::protobuf::internal::kEmptyString) {
    department_ = new ::std::string;
  }
  department_->assign(value);
}
inline void ClientUserInfo::set_department(const char* value, size_t size) {
  set_has_department();
  if (department_ == &::google::protobuf::internal::kEmptyString) {
    department_ = new ::std::string;
  }
  department_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClientUserInfo::mutable_department() {
  set_has_department();
  if (department_ == &::google::protobuf::internal::kEmptyString) {
    department_ = new ::std::string;
  }
  return department_;
}
inline ::std::string* ClientUserInfo::release_department() {
  clear_has_department();
  if (department_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = department_;
    department_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClientUserInfo::set_allocated_department(::std::string* department) {
  if (department_ != &::google::protobuf::internal::kEmptyString) {
    delete department_;
  }
  if (department) {
    set_has_department();
    department_ = department;
  } else {
    clear_has_department();
    department_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .IM.BaseDefine.UserType user_type = 6;
inline bool ClientUserInfo::has_user_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ClientUserInfo::set_has_user_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ClientUserInfo::clear_has_user_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ClientUserInfo::clear_user_type() {
  user_type_ = 0;
  clear_has_user_type();
}
inline ::IM::BaseDefine::UserType ClientUserInfo::user_type() const {
  return static_cast< ::IM::BaseDefine::UserType >(user_type_);
}
inline void ClientUserInfo::set_user_type(::IM::BaseDefine::UserType value) {
  assert(::IM::BaseDefine::UserType_IsValid(value));
  set_has_user_type();
  user_type_ = value;
}

// required uint32 user_updated = 7;
inline bool ClientUserInfo::has_user_updated() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ClientUserInfo::set_has_user_updated() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ClientUserInfo::clear_has_user_updated() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ClientUserInfo::clear_user_updated() {
  user_updated_ = 0u;
  clear_has_user_updated();
}
inline ::google::protobuf::uint32 ClientUserInfo::user_updated() const {
  return user_updated_;
}
inline void ClientUserInfo::set_user_updated(::google::protobuf::uint32 value) {
  set_has_user_updated();
  user_updated_ = value;
}

// -------------------------------------------------------------------

// ServerUserInfo

// required uint32 user_id = 1;
inline bool ServerUserInfo::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerUserInfo::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerUserInfo::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerUserInfo::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 ServerUserInfo::user_id() const {
  return user_id_;
}
inline void ServerUserInfo::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required string name = 2;
inline bool ServerUserInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerUserInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerUserInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerUserInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ServerUserInfo::name() const {
  return *name_;
}
inline void ServerUserInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ServerUserInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ServerUserInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServerUserInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ServerUserInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ServerUserInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string nick_name = 3;
inline bool ServerUserInfo::has_nick_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerUserInfo::set_has_nick_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerUserInfo::clear_has_nick_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerUserInfo::clear_nick_name() {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    nick_name_->clear();
  }
  clear_has_nick_name();
}
inline const ::std::string& ServerUserInfo::nick_name() const {
  return *nick_name_;
}
inline void ServerUserInfo::set_nick_name(const ::std::string& value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
}
inline void ServerUserInfo::set_nick_name(const char* value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
}
inline void ServerUserInfo::set_nick_name(const char* value, size_t size) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServerUserInfo::mutable_nick_name() {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  return nick_name_;
}
inline ::std::string* ServerUserInfo::release_nick_name() {
  clear_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nick_name_;
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ServerUserInfo::set_allocated_nick_name(::std::string* nick_name) {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (nick_name) {
    set_has_nick_name();
    nick_name_ = nick_name;
  } else {
    clear_has_nick_name();
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string avatar_url = 4;
inline bool ServerUserInfo::has_avatar_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerUserInfo::set_has_avatar_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerUserInfo::clear_has_avatar_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServerUserInfo::clear_avatar_url() {
  if (avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    avatar_url_->clear();
  }
  clear_has_avatar_url();
}
inline const ::std::string& ServerUserInfo::avatar_url() const {
  return *avatar_url_;
}
inline void ServerUserInfo::set_avatar_url(const ::std::string& value) {
  set_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    avatar_url_ = new ::std::string;
  }
  avatar_url_->assign(value);
}
inline void ServerUserInfo::set_avatar_url(const char* value) {
  set_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    avatar_url_ = new ::std::string;
  }
  avatar_url_->assign(value);
}
inline void ServerUserInfo::set_avatar_url(const char* value, size_t size) {
  set_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    avatar_url_ = new ::std::string;
  }
  avatar_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServerUserInfo::mutable_avatar_url() {
  set_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    avatar_url_ = new ::std::string;
  }
  return avatar_url_;
}
inline ::std::string* ServerUserInfo::release_avatar_url() {
  clear_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = avatar_url_;
    avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ServerUserInfo::set_allocated_avatar_url(::std::string* avatar_url) {
  if (avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    delete avatar_url_;
  }
  if (avatar_url) {
    set_has_avatar_url();
    avatar_url_ = avatar_url;
  } else {
    clear_has_avatar_url();
    avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string department = 5;
inline bool ServerUserInfo::has_department() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ServerUserInfo::set_has_department() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ServerUserInfo::clear_has_department() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ServerUserInfo::clear_department() {
  if (department_ != &::google::protobuf::internal::kEmptyString) {
    department_->clear();
  }
  clear_has_department();
}
inline const ::std::string& ServerUserInfo::department() const {
  return *department_;
}
inline void ServerUserInfo::set_department(const ::std::string& value) {
  set_has_department();
  if (department_ == &::google::protobuf::internal::kEmptyString) {
    department_ = new ::std::string;
  }
  department_->assign(value);
}
inline void ServerUserInfo::set_department(const char* value) {
  set_has_department();
  if (department_ == &::google::protobuf::internal::kEmptyString) {
    department_ = new ::std::string;
  }
  department_->assign(value);
}
inline void ServerUserInfo::set_department(const char* value, size_t size) {
  set_has_department();
  if (department_ == &::google::protobuf::internal::kEmptyString) {
    department_ = new ::std::string;
  }
  department_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServerUserInfo::mutable_department() {
  set_has_department();
  if (department_ == &::google::protobuf::internal::kEmptyString) {
    department_ = new ::std::string;
  }
  return department_;
}
inline ::std::string* ServerUserInfo::release_department() {
  clear_has_department();
  if (department_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = department_;
    department_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ServerUserInfo::set_allocated_department(::std::string* department) {
  if (department_ != &::google::protobuf::internal::kEmptyString) {
    delete department_;
  }
  if (department) {
    set_has_department();
    department_ = department;
  } else {
    clear_has_department();
    department_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 user_type = 6;
inline bool ServerUserInfo::has_user_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ServerUserInfo::set_has_user_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ServerUserInfo::clear_has_user_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ServerUserInfo::clear_user_type() {
  user_type_ = 0u;
  clear_has_user_type();
}
inline ::google::protobuf::uint32 ServerUserInfo::user_type() const {
  return user_type_;
}
inline void ServerUserInfo::set_user_type(::google::protobuf::uint32 value) {
  set_has_user_type();
  user_type_ = value;
}

// required uint32 user_update = 7;
inline bool ServerUserInfo::has_user_update() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ServerUserInfo::set_has_user_update() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ServerUserInfo::clear_has_user_update() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ServerUserInfo::clear_user_update() {
  user_update_ = 0u;
  clear_has_user_update();
}
inline ::google::protobuf::uint32 ServerUserInfo::user_update() const {
  return user_update_;
}
inline void ServerUserInfo::set_user_update(::google::protobuf::uint32 value) {
  set_has_user_update();
  user_update_ = value;
}

// -------------------------------------------------------------------

// ClientUserStat

// required string user_id = 1;
inline bool ClientUserStat::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientUserStat::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientUserStat::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientUserStat::clear_user_id() {
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    user_id_->clear();
  }
  clear_has_user_id();
}
inline const ::std::string& ClientUserStat::user_id() const {
  return *user_id_;
}
inline void ClientUserStat::set_user_id(const ::std::string& value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
}
inline void ClientUserStat::set_user_id(const char* value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
}
inline void ClientUserStat::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClientUserStat::mutable_user_id() {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  return user_id_;
}
inline ::std::string* ClientUserStat::release_user_id() {
  clear_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_id_;
    user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClientUserStat::set_allocated_user_id(::std::string* user_id) {
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete user_id_;
  }
  if (user_id) {
    set_has_user_id();
    user_id_ = user_id;
  } else {
    clear_has_user_id();
    user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .IM.BaseDefine.UserStatType user_stat = 2;
inline bool ClientUserStat::has_user_stat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientUserStat::set_has_user_stat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientUserStat::clear_has_user_stat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientUserStat::clear_user_stat() {
  user_stat_ = 1;
  clear_has_user_stat();
}
inline ::IM::BaseDefine::UserStatType ClientUserStat::user_stat() const {
  return static_cast< ::IM::BaseDefine::UserStatType >(user_stat_);
}
inline void ClientUserStat::set_user_stat(::IM::BaseDefine::UserStatType value) {
  assert(::IM::BaseDefine::UserStatType_IsValid(value));
  set_has_user_stat();
  user_stat_ = value;
}

// -------------------------------------------------------------------

// ServerUserStat

// required uint32 user_id = 1;
inline bool ServerUserStat::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerUserStat::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerUserStat::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerUserStat::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 ServerUserStat::user_id() const {
  return user_id_;
}
inline void ServerUserStat::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required .IM.BaseDefine.UserStatType user_stat = 2;
inline bool ServerUserStat::has_user_stat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerUserStat::set_has_user_stat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerUserStat::clear_has_user_stat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerUserStat::clear_user_stat() {
  user_stat_ = 1;
  clear_has_user_stat();
}
inline ::IM::BaseDefine::UserStatType ServerUserStat::user_stat() const {
  return static_cast< ::IM::BaseDefine::UserStatType >(user_stat_);
}
inline void ServerUserStat::set_user_stat(::IM::BaseDefine::UserStatType value) {
  assert(::IM::BaseDefine::UserStatType_IsValid(value));
  set_has_user_stat();
  user_stat_ = value;
}

// -------------------------------------------------------------------

// ClientUnReadInfo

// required string user_id = 1;
inline bool ClientUnReadInfo::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientUnReadInfo::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientUnReadInfo::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientUnReadInfo::clear_user_id() {
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    user_id_->clear();
  }
  clear_has_user_id();
}
inline const ::std::string& ClientUnReadInfo::user_id() const {
  return *user_id_;
}
inline void ClientUnReadInfo::set_user_id(const ::std::string& value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
}
inline void ClientUnReadInfo::set_user_id(const char* value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
}
inline void ClientUnReadInfo::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClientUnReadInfo::mutable_user_id() {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  return user_id_;
}
inline ::std::string* ClientUnReadInfo::release_user_id() {
  clear_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_id_;
    user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClientUnReadInfo::set_allocated_user_id(::std::string* user_id) {
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete user_id_;
  }
  if (user_id) {
    set_has_user_id();
    user_id_ = user_id;
  } else {
    clear_has_user_id();
    user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 unread_count = 2;
inline bool ClientUnReadInfo::has_unread_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientUnReadInfo::set_has_unread_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientUnReadInfo::clear_has_unread_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientUnReadInfo::clear_unread_count() {
  unread_count_ = 0u;
  clear_has_unread_count();
}
inline ::google::protobuf::uint32 ClientUnReadInfo::unread_count() const {
  return unread_count_;
}
inline void ClientUnReadInfo::set_unread_count(::google::protobuf::uint32 value) {
  set_has_unread_count();
  unread_count_ = value;
}

// -------------------------------------------------------------------

// ServerUnReadInfo

// required uint32 user_id = 1;
inline bool ServerUnReadInfo::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerUnReadInfo::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerUnReadInfo::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerUnReadInfo::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 ServerUnReadInfo::user_id() const {
  return user_id_;
}
inline void ServerUnReadInfo::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required uint32 unread_count = 2;
inline bool ServerUnReadInfo::has_unread_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerUnReadInfo::set_has_unread_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerUnReadInfo::clear_has_unread_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerUnReadInfo::clear_unread_count() {
  unread_count_ = 0u;
  clear_has_unread_count();
}
inline ::google::protobuf::uint32 ServerUnReadInfo::unread_count() const {
  return unread_count_;
}
inline void ServerUnReadInfo::set_unread_count(::google::protobuf::uint32 value) {
  set_has_unread_count();
  unread_count_ = value;
}

// -------------------------------------------------------------------

// ClientMsgInfo

// required string from_user_id = 1;
inline bool ClientMsgInfo::has_from_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientMsgInfo::set_has_from_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientMsgInfo::clear_has_from_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientMsgInfo::clear_from_user_id() {
  if (from_user_id_ != &::google::protobuf::internal::kEmptyString) {
    from_user_id_->clear();
  }
  clear_has_from_user_id();
}
inline const ::std::string& ClientMsgInfo::from_user_id() const {
  return *from_user_id_;
}
inline void ClientMsgInfo::set_from_user_id(const ::std::string& value) {
  set_has_from_user_id();
  if (from_user_id_ == &::google::protobuf::internal::kEmptyString) {
    from_user_id_ = new ::std::string;
  }
  from_user_id_->assign(value);
}
inline void ClientMsgInfo::set_from_user_id(const char* value) {
  set_has_from_user_id();
  if (from_user_id_ == &::google::protobuf::internal::kEmptyString) {
    from_user_id_ = new ::std::string;
  }
  from_user_id_->assign(value);
}
inline void ClientMsgInfo::set_from_user_id(const char* value, size_t size) {
  set_has_from_user_id();
  if (from_user_id_ == &::google::protobuf::internal::kEmptyString) {
    from_user_id_ = new ::std::string;
  }
  from_user_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClientMsgInfo::mutable_from_user_id() {
  set_has_from_user_id();
  if (from_user_id_ == &::google::protobuf::internal::kEmptyString) {
    from_user_id_ = new ::std::string;
  }
  return from_user_id_;
}
inline ::std::string* ClientMsgInfo::release_from_user_id() {
  clear_has_from_user_id();
  if (from_user_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = from_user_id_;
    from_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClientMsgInfo::set_allocated_from_user_id(::std::string* from_user_id) {
  if (from_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete from_user_id_;
  }
  if (from_user_id) {
    set_has_from_user_id();
    from_user_id_ = from_user_id;
  } else {
    clear_has_from_user_id();
    from_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string from_user_name = 2;
inline bool ClientMsgInfo::has_from_user_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientMsgInfo::set_has_from_user_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientMsgInfo::clear_has_from_user_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientMsgInfo::clear_from_user_name() {
  if (from_user_name_ != &::google::protobuf::internal::kEmptyString) {
    from_user_name_->clear();
  }
  clear_has_from_user_name();
}
inline const ::std::string& ClientMsgInfo::from_user_name() const {
  return *from_user_name_;
}
inline void ClientMsgInfo::set_from_user_name(const ::std::string& value) {
  set_has_from_user_name();
  if (from_user_name_ == &::google::protobuf::internal::kEmptyString) {
    from_user_name_ = new ::std::string;
  }
  from_user_name_->assign(value);
}
inline void ClientMsgInfo::set_from_user_name(const char* value) {
  set_has_from_user_name();
  if (from_user_name_ == &::google::protobuf::internal::kEmptyString) {
    from_user_name_ = new ::std::string;
  }
  from_user_name_->assign(value);
}
inline void ClientMsgInfo::set_from_user_name(const char* value, size_t size) {
  set_has_from_user_name();
  if (from_user_name_ == &::google::protobuf::internal::kEmptyString) {
    from_user_name_ = new ::std::string;
  }
  from_user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClientMsgInfo::mutable_from_user_name() {
  set_has_from_user_name();
  if (from_user_name_ == &::google::protobuf::internal::kEmptyString) {
    from_user_name_ = new ::std::string;
  }
  return from_user_name_;
}
inline ::std::string* ClientMsgInfo::release_from_user_name() {
  clear_has_from_user_name();
  if (from_user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = from_user_name_;
    from_user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClientMsgInfo::set_allocated_from_user_name(::std::string* from_user_name) {
  if (from_user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete from_user_name_;
  }
  if (from_user_name) {
    set_has_from_user_name();
    from_user_name_ = from_user_name;
  } else {
    clear_has_from_user_name();
    from_user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string from_user_nick_name = 3;
inline bool ClientMsgInfo::has_from_user_nick_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClientMsgInfo::set_has_from_user_nick_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClientMsgInfo::clear_has_from_user_nick_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClientMsgInfo::clear_from_user_nick_name() {
  if (from_user_nick_name_ != &::google::protobuf::internal::kEmptyString) {
    from_user_nick_name_->clear();
  }
  clear_has_from_user_nick_name();
}
inline const ::std::string& ClientMsgInfo::from_user_nick_name() const {
  return *from_user_nick_name_;
}
inline void ClientMsgInfo::set_from_user_nick_name(const ::std::string& value) {
  set_has_from_user_nick_name();
  if (from_user_nick_name_ == &::google::protobuf::internal::kEmptyString) {
    from_user_nick_name_ = new ::std::string;
  }
  from_user_nick_name_->assign(value);
}
inline void ClientMsgInfo::set_from_user_nick_name(const char* value) {
  set_has_from_user_nick_name();
  if (from_user_nick_name_ == &::google::protobuf::internal::kEmptyString) {
    from_user_nick_name_ = new ::std::string;
  }
  from_user_nick_name_->assign(value);
}
inline void ClientMsgInfo::set_from_user_nick_name(const char* value, size_t size) {
  set_has_from_user_nick_name();
  if (from_user_nick_name_ == &::google::protobuf::internal::kEmptyString) {
    from_user_nick_name_ = new ::std::string;
  }
  from_user_nick_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClientMsgInfo::mutable_from_user_nick_name() {
  set_has_from_user_nick_name();
  if (from_user_nick_name_ == &::google::protobuf::internal::kEmptyString) {
    from_user_nick_name_ = new ::std::string;
  }
  return from_user_nick_name_;
}
inline ::std::string* ClientMsgInfo::release_from_user_nick_name() {
  clear_has_from_user_nick_name();
  if (from_user_nick_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = from_user_nick_name_;
    from_user_nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClientMsgInfo::set_allocated_from_user_nick_name(::std::string* from_user_nick_name) {
  if (from_user_nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete from_user_nick_name_;
  }
  if (from_user_nick_name) {
    set_has_from_user_nick_name();
    from_user_nick_name_ = from_user_nick_name;
  } else {
    clear_has_from_user_nick_name();
    from_user_nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string from_user_avatar_url = 4;
inline bool ClientMsgInfo::has_from_user_avatar_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClientMsgInfo::set_has_from_user_avatar_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClientMsgInfo::clear_has_from_user_avatar_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClientMsgInfo::clear_from_user_avatar_url() {
  if (from_user_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    from_user_avatar_url_->clear();
  }
  clear_has_from_user_avatar_url();
}
inline const ::std::string& ClientMsgInfo::from_user_avatar_url() const {
  return *from_user_avatar_url_;
}
inline void ClientMsgInfo::set_from_user_avatar_url(const ::std::string& value) {
  set_has_from_user_avatar_url();
  if (from_user_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    from_user_avatar_url_ = new ::std::string;
  }
  from_user_avatar_url_->assign(value);
}
inline void ClientMsgInfo::set_from_user_avatar_url(const char* value) {
  set_has_from_user_avatar_url();
  if (from_user_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    from_user_avatar_url_ = new ::std::string;
  }
  from_user_avatar_url_->assign(value);
}
inline void ClientMsgInfo::set_from_user_avatar_url(const char* value, size_t size) {
  set_has_from_user_avatar_url();
  if (from_user_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    from_user_avatar_url_ = new ::std::string;
  }
  from_user_avatar_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClientMsgInfo::mutable_from_user_avatar_url() {
  set_has_from_user_avatar_url();
  if (from_user_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    from_user_avatar_url_ = new ::std::string;
  }
  return from_user_avatar_url_;
}
inline ::std::string* ClientMsgInfo::release_from_user_avatar_url() {
  clear_has_from_user_avatar_url();
  if (from_user_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = from_user_avatar_url_;
    from_user_avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClientMsgInfo::set_allocated_from_user_avatar_url(::std::string* from_user_avatar_url) {
  if (from_user_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    delete from_user_avatar_url_;
  }
  if (from_user_avatar_url) {
    set_has_from_user_avatar_url();
    from_user_avatar_url_ = from_user_avatar_url;
  } else {
    clear_has_from_user_avatar_url();
    from_user_avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 create_time = 5;
inline bool ClientMsgInfo::has_create_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ClientMsgInfo::set_has_create_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ClientMsgInfo::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ClientMsgInfo::clear_create_time() {
  create_time_ = 0u;
  clear_has_create_time();
}
inline ::google::protobuf::uint32 ClientMsgInfo::create_time() const {
  return create_time_;
}
inline void ClientMsgInfo::set_create_time(::google::protobuf::uint32 value) {
  set_has_create_time();
  create_time_ = value;
}

// required uint32 msg_type = 6;
inline bool ClientMsgInfo::has_msg_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ClientMsgInfo::set_has_msg_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ClientMsgInfo::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ClientMsgInfo::clear_msg_type() {
  msg_type_ = 0u;
  clear_has_msg_type();
}
inline ::google::protobuf::uint32 ClientMsgInfo::msg_type() const {
  return msg_type_;
}
inline void ClientMsgInfo::set_msg_type(::google::protobuf::uint32 value) {
  set_has_msg_type();
  msg_type_ = value;
}

// required string msg_content = 7;
inline bool ClientMsgInfo::has_msg_content() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ClientMsgInfo::set_has_msg_content() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ClientMsgInfo::clear_has_msg_content() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ClientMsgInfo::clear_msg_content() {
  if (msg_content_ != &::google::protobuf::internal::kEmptyString) {
    msg_content_->clear();
  }
  clear_has_msg_content();
}
inline const ::std::string& ClientMsgInfo::msg_content() const {
  return *msg_content_;
}
inline void ClientMsgInfo::set_msg_content(const ::std::string& value) {
  set_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    msg_content_ = new ::std::string;
  }
  msg_content_->assign(value);
}
inline void ClientMsgInfo::set_msg_content(const char* value) {
  set_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    msg_content_ = new ::std::string;
  }
  msg_content_->assign(value);
}
inline void ClientMsgInfo::set_msg_content(const char* value, size_t size) {
  set_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    msg_content_ = new ::std::string;
  }
  msg_content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClientMsgInfo::mutable_msg_content() {
  set_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    msg_content_ = new ::std::string;
  }
  return msg_content_;
}
inline ::std::string* ClientMsgInfo::release_msg_content() {
  clear_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_content_;
    msg_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClientMsgInfo::set_allocated_msg_content(::std::string* msg_content) {
  if (msg_content_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_content_;
  }
  if (msg_content) {
    set_has_msg_content();
    msg_content_ = msg_content;
  } else {
    clear_has_msg_content();
    msg_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ServerMsgInfo

// required uint32 from_user_id = 1;
inline bool ServerMsgInfo::has_from_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerMsgInfo::set_has_from_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerMsgInfo::clear_has_from_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerMsgInfo::clear_from_user_id() {
  from_user_id_ = 0u;
  clear_has_from_user_id();
}
inline ::google::protobuf::uint32 ServerMsgInfo::from_user_id() const {
  return from_user_id_;
}
inline void ServerMsgInfo::set_from_user_id(::google::protobuf::uint32 value) {
  set_has_from_user_id();
  from_user_id_ = value;
}

// required string from_user_name = 2;
inline bool ServerMsgInfo::has_from_user_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerMsgInfo::set_has_from_user_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerMsgInfo::clear_has_from_user_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerMsgInfo::clear_from_user_name() {
  if (from_user_name_ != &::google::protobuf::internal::kEmptyString) {
    from_user_name_->clear();
  }
  clear_has_from_user_name();
}
inline const ::std::string& ServerMsgInfo::from_user_name() const {
  return *from_user_name_;
}
inline void ServerMsgInfo::set_from_user_name(const ::std::string& value) {
  set_has_from_user_name();
  if (from_user_name_ == &::google::protobuf::internal::kEmptyString) {
    from_user_name_ = new ::std::string;
  }
  from_user_name_->assign(value);
}
inline void ServerMsgInfo::set_from_user_name(const char* value) {
  set_has_from_user_name();
  if (from_user_name_ == &::google::protobuf::internal::kEmptyString) {
    from_user_name_ = new ::std::string;
  }
  from_user_name_->assign(value);
}
inline void ServerMsgInfo::set_from_user_name(const char* value, size_t size) {
  set_has_from_user_name();
  if (from_user_name_ == &::google::protobuf::internal::kEmptyString) {
    from_user_name_ = new ::std::string;
  }
  from_user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServerMsgInfo::mutable_from_user_name() {
  set_has_from_user_name();
  if (from_user_name_ == &::google::protobuf::internal::kEmptyString) {
    from_user_name_ = new ::std::string;
  }
  return from_user_name_;
}
inline ::std::string* ServerMsgInfo::release_from_user_name() {
  clear_has_from_user_name();
  if (from_user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = from_user_name_;
    from_user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ServerMsgInfo::set_allocated_from_user_name(::std::string* from_user_name) {
  if (from_user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete from_user_name_;
  }
  if (from_user_name) {
    set_has_from_user_name();
    from_user_name_ = from_user_name;
  } else {
    clear_has_from_user_name();
    from_user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string from_user_nick_name = 3;
inline bool ServerMsgInfo::has_from_user_nick_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerMsgInfo::set_has_from_user_nick_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerMsgInfo::clear_has_from_user_nick_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerMsgInfo::clear_from_user_nick_name() {
  if (from_user_nick_name_ != &::google::protobuf::internal::kEmptyString) {
    from_user_nick_name_->clear();
  }
  clear_has_from_user_nick_name();
}
inline const ::std::string& ServerMsgInfo::from_user_nick_name() const {
  return *from_user_nick_name_;
}
inline void ServerMsgInfo::set_from_user_nick_name(const ::std::string& value) {
  set_has_from_user_nick_name();
  if (from_user_nick_name_ == &::google::protobuf::internal::kEmptyString) {
    from_user_nick_name_ = new ::std::string;
  }
  from_user_nick_name_->assign(value);
}
inline void ServerMsgInfo::set_from_user_nick_name(const char* value) {
  set_has_from_user_nick_name();
  if (from_user_nick_name_ == &::google::protobuf::internal::kEmptyString) {
    from_user_nick_name_ = new ::std::string;
  }
  from_user_nick_name_->assign(value);
}
inline void ServerMsgInfo::set_from_user_nick_name(const char* value, size_t size) {
  set_has_from_user_nick_name();
  if (from_user_nick_name_ == &::google::protobuf::internal::kEmptyString) {
    from_user_nick_name_ = new ::std::string;
  }
  from_user_nick_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServerMsgInfo::mutable_from_user_nick_name() {
  set_has_from_user_nick_name();
  if (from_user_nick_name_ == &::google::protobuf::internal::kEmptyString) {
    from_user_nick_name_ = new ::std::string;
  }
  return from_user_nick_name_;
}
inline ::std::string* ServerMsgInfo::release_from_user_nick_name() {
  clear_has_from_user_nick_name();
  if (from_user_nick_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = from_user_nick_name_;
    from_user_nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ServerMsgInfo::set_allocated_from_user_nick_name(::std::string* from_user_nick_name) {
  if (from_user_nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete from_user_nick_name_;
  }
  if (from_user_nick_name) {
    set_has_from_user_nick_name();
    from_user_nick_name_ = from_user_nick_name;
  } else {
    clear_has_from_user_nick_name();
    from_user_nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string from_user_avatar_url = 4;
inline bool ServerMsgInfo::has_from_user_avatar_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerMsgInfo::set_has_from_user_avatar_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerMsgInfo::clear_has_from_user_avatar_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServerMsgInfo::clear_from_user_avatar_url() {
  if (from_user_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    from_user_avatar_url_->clear();
  }
  clear_has_from_user_avatar_url();
}
inline const ::std::string& ServerMsgInfo::from_user_avatar_url() const {
  return *from_user_avatar_url_;
}
inline void ServerMsgInfo::set_from_user_avatar_url(const ::std::string& value) {
  set_has_from_user_avatar_url();
  if (from_user_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    from_user_avatar_url_ = new ::std::string;
  }
  from_user_avatar_url_->assign(value);
}
inline void ServerMsgInfo::set_from_user_avatar_url(const char* value) {
  set_has_from_user_avatar_url();
  if (from_user_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    from_user_avatar_url_ = new ::std::string;
  }
  from_user_avatar_url_->assign(value);
}
inline void ServerMsgInfo::set_from_user_avatar_url(const char* value, size_t size) {
  set_has_from_user_avatar_url();
  if (from_user_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    from_user_avatar_url_ = new ::std::string;
  }
  from_user_avatar_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServerMsgInfo::mutable_from_user_avatar_url() {
  set_has_from_user_avatar_url();
  if (from_user_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    from_user_avatar_url_ = new ::std::string;
  }
  return from_user_avatar_url_;
}
inline ::std::string* ServerMsgInfo::release_from_user_avatar_url() {
  clear_has_from_user_avatar_url();
  if (from_user_avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = from_user_avatar_url_;
    from_user_avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ServerMsgInfo::set_allocated_from_user_avatar_url(::std::string* from_user_avatar_url) {
  if (from_user_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    delete from_user_avatar_url_;
  }
  if (from_user_avatar_url) {
    set_has_from_user_avatar_url();
    from_user_avatar_url_ = from_user_avatar_url;
  } else {
    clear_has_from_user_avatar_url();
    from_user_avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 create_time = 5;
inline bool ServerMsgInfo::has_create_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ServerMsgInfo::set_has_create_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ServerMsgInfo::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ServerMsgInfo::clear_create_time() {
  create_time_ = 0u;
  clear_has_create_time();
}
inline ::google::protobuf::uint32 ServerMsgInfo::create_time() const {
  return create_time_;
}
inline void ServerMsgInfo::set_create_time(::google::protobuf::uint32 value) {
  set_has_create_time();
  create_time_ = value;
}

// required uint32 msg_type = 6;
inline bool ServerMsgInfo::has_msg_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ServerMsgInfo::set_has_msg_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ServerMsgInfo::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ServerMsgInfo::clear_msg_type() {
  msg_type_ = 0u;
  clear_has_msg_type();
}
inline ::google::protobuf::uint32 ServerMsgInfo::msg_type() const {
  return msg_type_;
}
inline void ServerMsgInfo::set_msg_type(::google::protobuf::uint32 value) {
  set_has_msg_type();
  msg_type_ = value;
}

// required string msg_content = 7;
inline bool ServerMsgInfo::has_msg_content() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ServerMsgInfo::set_has_msg_content() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ServerMsgInfo::clear_has_msg_content() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ServerMsgInfo::clear_msg_content() {
  if (msg_content_ != &::google::protobuf::internal::kEmptyString) {
    msg_content_->clear();
  }
  clear_has_msg_content();
}
inline const ::std::string& ServerMsgInfo::msg_content() const {
  return *msg_content_;
}
inline void ServerMsgInfo::set_msg_content(const ::std::string& value) {
  set_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    msg_content_ = new ::std::string;
  }
  msg_content_->assign(value);
}
inline void ServerMsgInfo::set_msg_content(const char* value) {
  set_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    msg_content_ = new ::std::string;
  }
  msg_content_->assign(value);
}
inline void ServerMsgInfo::set_msg_content(const char* value, size_t size) {
  set_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    msg_content_ = new ::std::string;
  }
  msg_content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServerMsgInfo::mutable_msg_content() {
  set_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    msg_content_ = new ::std::string;
  }
  return msg_content_;
}
inline ::std::string* ServerMsgInfo::release_msg_content() {
  clear_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_content_;
    msg_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ServerMsgInfo::set_allocated_msg_content(::std::string* msg_content) {
  if (msg_content_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_content_;
  }
  if (msg_content) {
    set_has_msg_content();
    msg_content_ = msg_content;
  } else {
    clear_has_msg_content();
    msg_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ClientGroupInfo

// required string group_id = 1;
inline bool ClientGroupInfo::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientGroupInfo::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientGroupInfo::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientGroupInfo::clear_group_id() {
  if (group_id_ != &::google::protobuf::internal::kEmptyString) {
    group_id_->clear();
  }
  clear_has_group_id();
}
inline const ::std::string& ClientGroupInfo::group_id() const {
  return *group_id_;
}
inline void ClientGroupInfo::set_group_id(const ::std::string& value) {
  set_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    group_id_ = new ::std::string;
  }
  group_id_->assign(value);
}
inline void ClientGroupInfo::set_group_id(const char* value) {
  set_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    group_id_ = new ::std::string;
  }
  group_id_->assign(value);
}
inline void ClientGroupInfo::set_group_id(const char* value, size_t size) {
  set_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    group_id_ = new ::std::string;
  }
  group_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClientGroupInfo::mutable_group_id() {
  set_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    group_id_ = new ::std::string;
  }
  return group_id_;
}
inline ::std::string* ClientGroupInfo::release_group_id() {
  clear_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = group_id_;
    group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClientGroupInfo::set_allocated_group_id(::std::string* group_id) {
  if (group_id_ != &::google::protobuf::internal::kEmptyString) {
    delete group_id_;
  }
  if (group_id) {
    set_has_group_id();
    group_id_ = group_id;
  } else {
    clear_has_group_id();
    group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string group_name = 2;
inline bool ClientGroupInfo::has_group_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientGroupInfo::set_has_group_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientGroupInfo::clear_has_group_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientGroupInfo::clear_group_name() {
  if (group_name_ != &::google::protobuf::internal::kEmptyString) {
    group_name_->clear();
  }
  clear_has_group_name();
}
inline const ::std::string& ClientGroupInfo::group_name() const {
  return *group_name_;
}
inline void ClientGroupInfo::set_group_name(const ::std::string& value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::kEmptyString) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
}
inline void ClientGroupInfo::set_group_name(const char* value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::kEmptyString) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
}
inline void ClientGroupInfo::set_group_name(const char* value, size_t size) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::kEmptyString) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClientGroupInfo::mutable_group_name() {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::kEmptyString) {
    group_name_ = new ::std::string;
  }
  return group_name_;
}
inline ::std::string* ClientGroupInfo::release_group_name() {
  clear_has_group_name();
  if (group_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = group_name_;
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClientGroupInfo::set_allocated_group_name(::std::string* group_name) {
  if (group_name_ != &::google::protobuf::internal::kEmptyString) {
    delete group_name_;
  }
  if (group_name) {
    set_has_group_name();
    group_name_ = group_name;
  } else {
    clear_has_group_name();
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string group_avatar = 3;
inline bool ClientGroupInfo::has_group_avatar() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClientGroupInfo::set_has_group_avatar() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClientGroupInfo::clear_has_group_avatar() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClientGroupInfo::clear_group_avatar() {
  if (group_avatar_ != &::google::protobuf::internal::kEmptyString) {
    group_avatar_->clear();
  }
  clear_has_group_avatar();
}
inline const ::std::string& ClientGroupInfo::group_avatar() const {
  return *group_avatar_;
}
inline void ClientGroupInfo::set_group_avatar(const ::std::string& value) {
  set_has_group_avatar();
  if (group_avatar_ == &::google::protobuf::internal::kEmptyString) {
    group_avatar_ = new ::std::string;
  }
  group_avatar_->assign(value);
}
inline void ClientGroupInfo::set_group_avatar(const char* value) {
  set_has_group_avatar();
  if (group_avatar_ == &::google::protobuf::internal::kEmptyString) {
    group_avatar_ = new ::std::string;
  }
  group_avatar_->assign(value);
}
inline void ClientGroupInfo::set_group_avatar(const char* value, size_t size) {
  set_has_group_avatar();
  if (group_avatar_ == &::google::protobuf::internal::kEmptyString) {
    group_avatar_ = new ::std::string;
  }
  group_avatar_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClientGroupInfo::mutable_group_avatar() {
  set_has_group_avatar();
  if (group_avatar_ == &::google::protobuf::internal::kEmptyString) {
    group_avatar_ = new ::std::string;
  }
  return group_avatar_;
}
inline ::std::string* ClientGroupInfo::release_group_avatar() {
  clear_has_group_avatar();
  if (group_avatar_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = group_avatar_;
    group_avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClientGroupInfo::set_allocated_group_avatar(::std::string* group_avatar) {
  if (group_avatar_ != &::google::protobuf::internal::kEmptyString) {
    delete group_avatar_;
  }
  if (group_avatar) {
    set_has_group_avatar();
    group_avatar_ = group_avatar;
  } else {
    clear_has_group_avatar();
    group_avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string group_creator_id = 4;
inline bool ClientGroupInfo::has_group_creator_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClientGroupInfo::set_has_group_creator_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClientGroupInfo::clear_has_group_creator_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClientGroupInfo::clear_group_creator_id() {
  if (group_creator_id_ != &::google::protobuf::internal::kEmptyString) {
    group_creator_id_->clear();
  }
  clear_has_group_creator_id();
}
inline const ::std::string& ClientGroupInfo::group_creator_id() const {
  return *group_creator_id_;
}
inline void ClientGroupInfo::set_group_creator_id(const ::std::string& value) {
  set_has_group_creator_id();
  if (group_creator_id_ == &::google::protobuf::internal::kEmptyString) {
    group_creator_id_ = new ::std::string;
  }
  group_creator_id_->assign(value);
}
inline void ClientGroupInfo::set_group_creator_id(const char* value) {
  set_has_group_creator_id();
  if (group_creator_id_ == &::google::protobuf::internal::kEmptyString) {
    group_creator_id_ = new ::std::string;
  }
  group_creator_id_->assign(value);
}
inline void ClientGroupInfo::set_group_creator_id(const char* value, size_t size) {
  set_has_group_creator_id();
  if (group_creator_id_ == &::google::protobuf::internal::kEmptyString) {
    group_creator_id_ = new ::std::string;
  }
  group_creator_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClientGroupInfo::mutable_group_creator_id() {
  set_has_group_creator_id();
  if (group_creator_id_ == &::google::protobuf::internal::kEmptyString) {
    group_creator_id_ = new ::std::string;
  }
  return group_creator_id_;
}
inline ::std::string* ClientGroupInfo::release_group_creator_id() {
  clear_has_group_creator_id();
  if (group_creator_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = group_creator_id_;
    group_creator_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClientGroupInfo::set_allocated_group_creator_id(::std::string* group_creator_id) {
  if (group_creator_id_ != &::google::protobuf::internal::kEmptyString) {
    delete group_creator_id_;
  }
  if (group_creator_id) {
    set_has_group_creator_id();
    group_creator_id_ = group_creator_id;
  } else {
    clear_has_group_creator_id();
    group_creator_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .IM.BaseDefine.GroupType group_type = 5;
inline bool ClientGroupInfo::has_group_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ClientGroupInfo::set_has_group_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ClientGroupInfo::clear_has_group_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ClientGroupInfo::clear_group_type() {
  group_type_ = 0;
  clear_has_group_type();
}
inline ::IM::BaseDefine::GroupType ClientGroupInfo::group_type() const {
  return static_cast< ::IM::BaseDefine::GroupType >(group_type_);
}
inline void ClientGroupInfo::set_group_type(::IM::BaseDefine::GroupType value) {
  assert(::IM::BaseDefine::GroupType_IsValid(value));
  set_has_group_type();
  group_type_ = value;
}

// required uint32 group_updated = 6;
inline bool ClientGroupInfo::has_group_updated() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ClientGroupInfo::set_has_group_updated() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ClientGroupInfo::clear_has_group_updated() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ClientGroupInfo::clear_group_updated() {
  group_updated_ = 0u;
  clear_has_group_updated();
}
inline ::google::protobuf::uint32 ClientGroupInfo::group_updated() const {
  return group_updated_;
}
inline void ClientGroupInfo::set_group_updated(::google::protobuf::uint32 value) {
  set_has_group_updated();
  group_updated_ = value;
}

// repeated string group_member_list = 7;
inline int ClientGroupInfo::group_member_list_size() const {
  return group_member_list_.size();
}
inline void ClientGroupInfo::clear_group_member_list() {
  group_member_list_.Clear();
}
inline const ::std::string& ClientGroupInfo::group_member_list(int index) const {
  return group_member_list_.Get(index);
}
inline ::std::string* ClientGroupInfo::mutable_group_member_list(int index) {
  return group_member_list_.Mutable(index);
}
inline void ClientGroupInfo::set_group_member_list(int index, const ::std::string& value) {
  group_member_list_.Mutable(index)->assign(value);
}
inline void ClientGroupInfo::set_group_member_list(int index, const char* value) {
  group_member_list_.Mutable(index)->assign(value);
}
inline void ClientGroupInfo::set_group_member_list(int index, const char* value, size_t size) {
  group_member_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClientGroupInfo::add_group_member_list() {
  return group_member_list_.Add();
}
inline void ClientGroupInfo::add_group_member_list(const ::std::string& value) {
  group_member_list_.Add()->assign(value);
}
inline void ClientGroupInfo::add_group_member_list(const char* value) {
  group_member_list_.Add()->assign(value);
}
inline void ClientGroupInfo::add_group_member_list(const char* value, size_t size) {
  group_member_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ClientGroupInfo::group_member_list() const {
  return group_member_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ClientGroupInfo::mutable_group_member_list() {
  return &group_member_list_;
}

// -------------------------------------------------------------------

// ServerGroupInfo

// required uint32 group_id = 1;
inline bool ServerGroupInfo::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerGroupInfo::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerGroupInfo::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerGroupInfo::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 ServerGroupInfo::group_id() const {
  return group_id_;
}
inline void ServerGroupInfo::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
}

// required string group_name = 2;
inline bool ServerGroupInfo::has_group_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerGroupInfo::set_has_group_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerGroupInfo::clear_has_group_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerGroupInfo::clear_group_name() {
  if (group_name_ != &::google::protobuf::internal::kEmptyString) {
    group_name_->clear();
  }
  clear_has_group_name();
}
inline const ::std::string& ServerGroupInfo::group_name() const {
  return *group_name_;
}
inline void ServerGroupInfo::set_group_name(const ::std::string& value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::kEmptyString) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
}
inline void ServerGroupInfo::set_group_name(const char* value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::kEmptyString) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
}
inline void ServerGroupInfo::set_group_name(const char* value, size_t size) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::kEmptyString) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServerGroupInfo::mutable_group_name() {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::kEmptyString) {
    group_name_ = new ::std::string;
  }
  return group_name_;
}
inline ::std::string* ServerGroupInfo::release_group_name() {
  clear_has_group_name();
  if (group_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = group_name_;
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ServerGroupInfo::set_allocated_group_name(::std::string* group_name) {
  if (group_name_ != &::google::protobuf::internal::kEmptyString) {
    delete group_name_;
  }
  if (group_name) {
    set_has_group_name();
    group_name_ = group_name;
  } else {
    clear_has_group_name();
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string group_avatar = 3;
inline bool ServerGroupInfo::has_group_avatar() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerGroupInfo::set_has_group_avatar() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerGroupInfo::clear_has_group_avatar() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerGroupInfo::clear_group_avatar() {
  if (group_avatar_ != &::google::protobuf::internal::kEmptyString) {
    group_avatar_->clear();
  }
  clear_has_group_avatar();
}
inline const ::std::string& ServerGroupInfo::group_avatar() const {
  return *group_avatar_;
}
inline void ServerGroupInfo::set_group_avatar(const ::std::string& value) {
  set_has_group_avatar();
  if (group_avatar_ == &::google::protobuf::internal::kEmptyString) {
    group_avatar_ = new ::std::string;
  }
  group_avatar_->assign(value);
}
inline void ServerGroupInfo::set_group_avatar(const char* value) {
  set_has_group_avatar();
  if (group_avatar_ == &::google::protobuf::internal::kEmptyString) {
    group_avatar_ = new ::std::string;
  }
  group_avatar_->assign(value);
}
inline void ServerGroupInfo::set_group_avatar(const char* value, size_t size) {
  set_has_group_avatar();
  if (group_avatar_ == &::google::protobuf::internal::kEmptyString) {
    group_avatar_ = new ::std::string;
  }
  group_avatar_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServerGroupInfo::mutable_group_avatar() {
  set_has_group_avatar();
  if (group_avatar_ == &::google::protobuf::internal::kEmptyString) {
    group_avatar_ = new ::std::string;
  }
  return group_avatar_;
}
inline ::std::string* ServerGroupInfo::release_group_avatar() {
  clear_has_group_avatar();
  if (group_avatar_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = group_avatar_;
    group_avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ServerGroupInfo::set_allocated_group_avatar(::std::string* group_avatar) {
  if (group_avatar_ != &::google::protobuf::internal::kEmptyString) {
    delete group_avatar_;
  }
  if (group_avatar) {
    set_has_group_avatar();
    group_avatar_ = group_avatar;
  } else {
    clear_has_group_avatar();
    group_avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 group_creator_id = 4;
inline bool ServerGroupInfo::has_group_creator_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerGroupInfo::set_has_group_creator_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerGroupInfo::clear_has_group_creator_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServerGroupInfo::clear_group_creator_id() {
  group_creator_id_ = 0u;
  clear_has_group_creator_id();
}
inline ::google::protobuf::uint32 ServerGroupInfo::group_creator_id() const {
  return group_creator_id_;
}
inline void ServerGroupInfo::set_group_creator_id(::google::protobuf::uint32 value) {
  set_has_group_creator_id();
  group_creator_id_ = value;
}

// required .IM.BaseDefine.GroupType group_type = 5;
inline bool ServerGroupInfo::has_group_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ServerGroupInfo::set_has_group_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ServerGroupInfo::clear_has_group_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ServerGroupInfo::clear_group_type() {
  group_type_ = 0;
  clear_has_group_type();
}
inline ::IM::BaseDefine::GroupType ServerGroupInfo::group_type() const {
  return static_cast< ::IM::BaseDefine::GroupType >(group_type_);
}
inline void ServerGroupInfo::set_group_type(::IM::BaseDefine::GroupType value) {
  assert(::IM::BaseDefine::GroupType_IsValid(value));
  set_has_group_type();
  group_type_ = value;
}

// required uint32 group_updated = 6;
inline bool ServerGroupInfo::has_group_updated() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ServerGroupInfo::set_has_group_updated() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ServerGroupInfo::clear_has_group_updated() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ServerGroupInfo::clear_group_updated() {
  group_updated_ = 0u;
  clear_has_group_updated();
}
inline ::google::protobuf::uint32 ServerGroupInfo::group_updated() const {
  return group_updated_;
}
inline void ServerGroupInfo::set_group_updated(::google::protobuf::uint32 value) {
  set_has_group_updated();
  group_updated_ = value;
}

// repeated uint32 group_member_list = 7;
inline int ServerGroupInfo::group_member_list_size() const {
  return group_member_list_.size();
}
inline void ServerGroupInfo::clear_group_member_list() {
  group_member_list_.Clear();
}
inline ::google::protobuf::uint32 ServerGroupInfo::group_member_list(int index) const {
  return group_member_list_.Get(index);
}
inline void ServerGroupInfo::set_group_member_list(int index, ::google::protobuf::uint32 value) {
  group_member_list_.Set(index, value);
}
inline void ServerGroupInfo::add_group_member_list(::google::protobuf::uint32 value) {
  group_member_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ServerGroupInfo::group_member_list() const {
  return group_member_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ServerGroupInfo::mutable_group_member_list() {
  return &group_member_list_;
}

// -------------------------------------------------------------------

// ClientGroupUnReadCnt

// required string group_id = 1;
inline bool ClientGroupUnReadCnt::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientGroupUnReadCnt::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientGroupUnReadCnt::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientGroupUnReadCnt::clear_group_id() {
  if (group_id_ != &::google::protobuf::internal::kEmptyString) {
    group_id_->clear();
  }
  clear_has_group_id();
}
inline const ::std::string& ClientGroupUnReadCnt::group_id() const {
  return *group_id_;
}
inline void ClientGroupUnReadCnt::set_group_id(const ::std::string& value) {
  set_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    group_id_ = new ::std::string;
  }
  group_id_->assign(value);
}
inline void ClientGroupUnReadCnt::set_group_id(const char* value) {
  set_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    group_id_ = new ::std::string;
  }
  group_id_->assign(value);
}
inline void ClientGroupUnReadCnt::set_group_id(const char* value, size_t size) {
  set_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    group_id_ = new ::std::string;
  }
  group_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClientGroupUnReadCnt::mutable_group_id() {
  set_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    group_id_ = new ::std::string;
  }
  return group_id_;
}
inline ::std::string* ClientGroupUnReadCnt::release_group_id() {
  clear_has_group_id();
  if (group_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = group_id_;
    group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClientGroupUnReadCnt::set_allocated_group_id(::std::string* group_id) {
  if (group_id_ != &::google::protobuf::internal::kEmptyString) {
    delete group_id_;
  }
  if (group_id) {
    set_has_group_id();
    group_id_ = group_id;
  } else {
    clear_has_group_id();
    group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 unread_cnt = 2;
inline bool ClientGroupUnReadCnt::has_unread_cnt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientGroupUnReadCnt::set_has_unread_cnt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientGroupUnReadCnt::clear_has_unread_cnt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientGroupUnReadCnt::clear_unread_cnt() {
  unread_cnt_ = 0u;
  clear_has_unread_cnt();
}
inline ::google::protobuf::uint32 ClientGroupUnReadCnt::unread_cnt() const {
  return unread_cnt_;
}
inline void ClientGroupUnReadCnt::set_unread_cnt(::google::protobuf::uint32 value) {
  set_has_unread_cnt();
  unread_cnt_ = value;
}

// -------------------------------------------------------------------

// ServerGroupUnReadCnt

// required uint32 group_id = 1;
inline bool ServerGroupUnReadCnt::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerGroupUnReadCnt::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerGroupUnReadCnt::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerGroupUnReadCnt::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 ServerGroupUnReadCnt::group_id() const {
  return group_id_;
}
inline void ServerGroupUnReadCnt::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
}

// required uint32 unread_cnt = 2;
inline bool ServerGroupUnReadCnt::has_unread_cnt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerGroupUnReadCnt::set_has_unread_cnt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerGroupUnReadCnt::clear_has_unread_cnt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerGroupUnReadCnt::clear_unread_cnt() {
  unread_cnt_ = 0u;
  clear_has_unread_cnt();
}
inline ::google::protobuf::uint32 ServerGroupUnReadCnt::unread_cnt() const {
  return unread_cnt_;
}
inline void ServerGroupUnReadCnt::set_unread_cnt(::google::protobuf::uint32 value) {
  set_has_unread_cnt();
  unread_cnt_ = value;
}

// -------------------------------------------------------------------

// ClientGroupMsg

// required string from_user_id = 1;
inline bool ClientGroupMsg::has_from_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientGroupMsg::set_has_from_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientGroupMsg::clear_has_from_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientGroupMsg::clear_from_user_id() {
  if (from_user_id_ != &::google::protobuf::internal::kEmptyString) {
    from_user_id_->clear();
  }
  clear_has_from_user_id();
}
inline const ::std::string& ClientGroupMsg::from_user_id() const {
  return *from_user_id_;
}
inline void ClientGroupMsg::set_from_user_id(const ::std::string& value) {
  set_has_from_user_id();
  if (from_user_id_ == &::google::protobuf::internal::kEmptyString) {
    from_user_id_ = new ::std::string;
  }
  from_user_id_->assign(value);
}
inline void ClientGroupMsg::set_from_user_id(const char* value) {
  set_has_from_user_id();
  if (from_user_id_ == &::google::protobuf::internal::kEmptyString) {
    from_user_id_ = new ::std::string;
  }
  from_user_id_->assign(value);
}
inline void ClientGroupMsg::set_from_user_id(const char* value, size_t size) {
  set_has_from_user_id();
  if (from_user_id_ == &::google::protobuf::internal::kEmptyString) {
    from_user_id_ = new ::std::string;
  }
  from_user_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClientGroupMsg::mutable_from_user_id() {
  set_has_from_user_id();
  if (from_user_id_ == &::google::protobuf::internal::kEmptyString) {
    from_user_id_ = new ::std::string;
  }
  return from_user_id_;
}
inline ::std::string* ClientGroupMsg::release_from_user_id() {
  clear_has_from_user_id();
  if (from_user_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = from_user_id_;
    from_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClientGroupMsg::set_allocated_from_user_id(::std::string* from_user_id) {
  if (from_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete from_user_id_;
  }
  if (from_user_id) {
    set_has_from_user_id();
    from_user_id_ = from_user_id;
  } else {
    clear_has_from_user_id();
    from_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 create_time = 2;
inline bool ClientGroupMsg::has_create_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientGroupMsg::set_has_create_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientGroupMsg::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientGroupMsg::clear_create_time() {
  create_time_ = 0u;
  clear_has_create_time();
}
inline ::google::protobuf::uint32 ClientGroupMsg::create_time() const {
  return create_time_;
}
inline void ClientGroupMsg::set_create_time(::google::protobuf::uint32 value) {
  set_has_create_time();
  create_time_ = value;
}

// required string msg_content = 3;
inline bool ClientGroupMsg::has_msg_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClientGroupMsg::set_has_msg_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClientGroupMsg::clear_has_msg_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClientGroupMsg::clear_msg_content() {
  if (msg_content_ != &::google::protobuf::internal::kEmptyString) {
    msg_content_->clear();
  }
  clear_has_msg_content();
}
inline const ::std::string& ClientGroupMsg::msg_content() const {
  return *msg_content_;
}
inline void ClientGroupMsg::set_msg_content(const ::std::string& value) {
  set_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    msg_content_ = new ::std::string;
  }
  msg_content_->assign(value);
}
inline void ClientGroupMsg::set_msg_content(const char* value) {
  set_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    msg_content_ = new ::std::string;
  }
  msg_content_->assign(value);
}
inline void ClientGroupMsg::set_msg_content(const char* value, size_t size) {
  set_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    msg_content_ = new ::std::string;
  }
  msg_content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClientGroupMsg::mutable_msg_content() {
  set_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    msg_content_ = new ::std::string;
  }
  return msg_content_;
}
inline ::std::string* ClientGroupMsg::release_msg_content() {
  clear_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_content_;
    msg_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClientGroupMsg::set_allocated_msg_content(::std::string* msg_content) {
  if (msg_content_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_content_;
  }
  if (msg_content) {
    set_has_msg_content();
    msg_content_ = msg_content;
  } else {
    clear_has_msg_content();
    msg_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ServerGroupMsg

// required uint32 from_user_id = 1;
inline bool ServerGroupMsg::has_from_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerGroupMsg::set_has_from_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerGroupMsg::clear_has_from_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerGroupMsg::clear_from_user_id() {
  from_user_id_ = 0u;
  clear_has_from_user_id();
}
inline ::google::protobuf::uint32 ServerGroupMsg::from_user_id() const {
  return from_user_id_;
}
inline void ServerGroupMsg::set_from_user_id(::google::protobuf::uint32 value) {
  set_has_from_user_id();
  from_user_id_ = value;
}

// required uint32 create_time = 2;
inline bool ServerGroupMsg::has_create_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerGroupMsg::set_has_create_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerGroupMsg::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerGroupMsg::clear_create_time() {
  create_time_ = 0u;
  clear_has_create_time();
}
inline ::google::protobuf::uint32 ServerGroupMsg::create_time() const {
  return create_time_;
}
inline void ServerGroupMsg::set_create_time(::google::protobuf::uint32 value) {
  set_has_create_time();
  create_time_ = value;
}

// required string msg_content = 3;
inline bool ServerGroupMsg::has_msg_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerGroupMsg::set_has_msg_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerGroupMsg::clear_has_msg_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerGroupMsg::clear_msg_content() {
  if (msg_content_ != &::google::protobuf::internal::kEmptyString) {
    msg_content_->clear();
  }
  clear_has_msg_content();
}
inline const ::std::string& ServerGroupMsg::msg_content() const {
  return *msg_content_;
}
inline void ServerGroupMsg::set_msg_content(const ::std::string& value) {
  set_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    msg_content_ = new ::std::string;
  }
  msg_content_->assign(value);
}
inline void ServerGroupMsg::set_msg_content(const char* value) {
  set_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    msg_content_ = new ::std::string;
  }
  msg_content_->assign(value);
}
inline void ServerGroupMsg::set_msg_content(const char* value, size_t size) {
  set_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    msg_content_ = new ::std::string;
  }
  msg_content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServerGroupMsg::mutable_msg_content() {
  set_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    msg_content_ = new ::std::string;
  }
  return msg_content_;
}
inline ::std::string* ServerGroupMsg::release_msg_content() {
  clear_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_content_;
    msg_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ServerGroupMsg::set_allocated_msg_content(::std::string* msg_content) {
  if (msg_content_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_content_;
  }
  if (msg_content) {
    set_has_msg_content();
    msg_content_ = msg_content;
  } else {
    clear_has_msg_content();
    msg_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ClientOfflineFileInfo

// required string from_user_id = 1;
inline bool ClientOfflineFileInfo::has_from_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientOfflineFileInfo::set_has_from_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientOfflineFileInfo::clear_has_from_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientOfflineFileInfo::clear_from_user_id() {
  if (from_user_id_ != &::google::protobuf::internal::kEmptyString) {
    from_user_id_->clear();
  }
  clear_has_from_user_id();
}
inline const ::std::string& ClientOfflineFileInfo::from_user_id() const {
  return *from_user_id_;
}
inline void ClientOfflineFileInfo::set_from_user_id(const ::std::string& value) {
  set_has_from_user_id();
  if (from_user_id_ == &::google::protobuf::internal::kEmptyString) {
    from_user_id_ = new ::std::string;
  }
  from_user_id_->assign(value);
}
inline void ClientOfflineFileInfo::set_from_user_id(const char* value) {
  set_has_from_user_id();
  if (from_user_id_ == &::google::protobuf::internal::kEmptyString) {
    from_user_id_ = new ::std::string;
  }
  from_user_id_->assign(value);
}
inline void ClientOfflineFileInfo::set_from_user_id(const char* value, size_t size) {
  set_has_from_user_id();
  if (from_user_id_ == &::google::protobuf::internal::kEmptyString) {
    from_user_id_ = new ::std::string;
  }
  from_user_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClientOfflineFileInfo::mutable_from_user_id() {
  set_has_from_user_id();
  if (from_user_id_ == &::google::protobuf::internal::kEmptyString) {
    from_user_id_ = new ::std::string;
  }
  return from_user_id_;
}
inline ::std::string* ClientOfflineFileInfo::release_from_user_id() {
  clear_has_from_user_id();
  if (from_user_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = from_user_id_;
    from_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClientOfflineFileInfo::set_allocated_from_user_id(::std::string* from_user_id) {
  if (from_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete from_user_id_;
  }
  if (from_user_id) {
    set_has_from_user_id();
    from_user_id_ = from_user_id;
  } else {
    clear_has_from_user_id();
    from_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 file_id = 2;
inline bool ClientOfflineFileInfo::has_file_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientOfflineFileInfo::set_has_file_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientOfflineFileInfo::clear_has_file_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientOfflineFileInfo::clear_file_id() {
  file_id_ = 0u;
  clear_has_file_id();
}
inline ::google::protobuf::uint32 ClientOfflineFileInfo::file_id() const {
  return file_id_;
}
inline void ClientOfflineFileInfo::set_file_id(::google::protobuf::uint32 value) {
  set_has_file_id();
  file_id_ = value;
}

// required uint32 file_size = 3;
inline bool ClientOfflineFileInfo::has_file_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClientOfflineFileInfo::set_has_file_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClientOfflineFileInfo::clear_has_file_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClientOfflineFileInfo::clear_file_size() {
  file_size_ = 0u;
  clear_has_file_size();
}
inline ::google::protobuf::uint32 ClientOfflineFileInfo::file_size() const {
  return file_size_;
}
inline void ClientOfflineFileInfo::set_file_size(::google::protobuf::uint32 value) {
  set_has_file_size();
  file_size_ = value;
}

// required string file_path = 4;
inline bool ClientOfflineFileInfo::has_file_path() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClientOfflineFileInfo::set_has_file_path() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClientOfflineFileInfo::clear_has_file_path() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClientOfflineFileInfo::clear_file_path() {
  if (file_path_ != &::google::protobuf::internal::kEmptyString) {
    file_path_->clear();
  }
  clear_has_file_path();
}
inline const ::std::string& ClientOfflineFileInfo::file_path() const {
  return *file_path_;
}
inline void ClientOfflineFileInfo::set_file_path(const ::std::string& value) {
  set_has_file_path();
  if (file_path_ == &::google::protobuf::internal::kEmptyString) {
    file_path_ = new ::std::string;
  }
  file_path_->assign(value);
}
inline void ClientOfflineFileInfo::set_file_path(const char* value) {
  set_has_file_path();
  if (file_path_ == &::google::protobuf::internal::kEmptyString) {
    file_path_ = new ::std::string;
  }
  file_path_->assign(value);
}
inline void ClientOfflineFileInfo::set_file_path(const char* value, size_t size) {
  set_has_file_path();
  if (file_path_ == &::google::protobuf::internal::kEmptyString) {
    file_path_ = new ::std::string;
  }
  file_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClientOfflineFileInfo::mutable_file_path() {
  set_has_file_path();
  if (file_path_ == &::google::protobuf::internal::kEmptyString) {
    file_path_ = new ::std::string;
  }
  return file_path_;
}
inline ::std::string* ClientOfflineFileInfo::release_file_path() {
  clear_has_file_path();
  if (file_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = file_path_;
    file_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClientOfflineFileInfo::set_allocated_file_path(::std::string* file_path) {
  if (file_path_ != &::google::protobuf::internal::kEmptyString) {
    delete file_path_;
  }
  if (file_path) {
    set_has_file_path();
    file_path_ = file_path;
  } else {
    clear_has_file_path();
    file_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ServerOfflineFileInfo

// required uint32 from_user_id = 1;
inline bool ServerOfflineFileInfo::has_from_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerOfflineFileInfo::set_has_from_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerOfflineFileInfo::clear_has_from_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerOfflineFileInfo::clear_from_user_id() {
  from_user_id_ = 0u;
  clear_has_from_user_id();
}
inline ::google::protobuf::uint32 ServerOfflineFileInfo::from_user_id() const {
  return from_user_id_;
}
inline void ServerOfflineFileInfo::set_from_user_id(::google::protobuf::uint32 value) {
  set_has_from_user_id();
  from_user_id_ = value;
}

// required uint32 file_id = 2;
inline bool ServerOfflineFileInfo::has_file_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerOfflineFileInfo::set_has_file_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerOfflineFileInfo::clear_has_file_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerOfflineFileInfo::clear_file_id() {
  file_id_ = 0u;
  clear_has_file_id();
}
inline ::google::protobuf::uint32 ServerOfflineFileInfo::file_id() const {
  return file_id_;
}
inline void ServerOfflineFileInfo::set_file_id(::google::protobuf::uint32 value) {
  set_has_file_id();
  file_id_ = value;
}

// required uint32 file_size = 3;
inline bool ServerOfflineFileInfo::has_file_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerOfflineFileInfo::set_has_file_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerOfflineFileInfo::clear_has_file_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerOfflineFileInfo::clear_file_size() {
  file_size_ = 0u;
  clear_has_file_size();
}
inline ::google::protobuf::uint32 ServerOfflineFileInfo::file_size() const {
  return file_size_;
}
inline void ServerOfflineFileInfo::set_file_size(::google::protobuf::uint32 value) {
  set_has_file_size();
  file_size_ = value;
}

// required string file_path = 4;
inline bool ServerOfflineFileInfo::has_file_path() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerOfflineFileInfo::set_has_file_path() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerOfflineFileInfo::clear_has_file_path() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServerOfflineFileInfo::clear_file_path() {
  if (file_path_ != &::google::protobuf::internal::kEmptyString) {
    file_path_->clear();
  }
  clear_has_file_path();
}
inline const ::std::string& ServerOfflineFileInfo::file_path() const {
  return *file_path_;
}
inline void ServerOfflineFileInfo::set_file_path(const ::std::string& value) {
  set_has_file_path();
  if (file_path_ == &::google::protobuf::internal::kEmptyString) {
    file_path_ = new ::std::string;
  }
  file_path_->assign(value);
}
inline void ServerOfflineFileInfo::set_file_path(const char* value) {
  set_has_file_path();
  if (file_path_ == &::google::protobuf::internal::kEmptyString) {
    file_path_ = new ::std::string;
  }
  file_path_->assign(value);
}
inline void ServerOfflineFileInfo::set_file_path(const char* value, size_t size) {
  set_has_file_path();
  if (file_path_ == &::google::protobuf::internal::kEmptyString) {
    file_path_ = new ::std::string;
  }
  file_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServerOfflineFileInfo::mutable_file_path() {
  set_has_file_path();
  if (file_path_ == &::google::protobuf::internal::kEmptyString) {
    file_path_ = new ::std::string;
  }
  return file_path_;
}
inline ::std::string* ServerOfflineFileInfo::release_file_path() {
  clear_has_file_path();
  if (file_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = file_path_;
    file_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ServerOfflineFileInfo::set_allocated_file_path(::std::string* file_path) {
  if (file_path_ != &::google::protobuf::internal::kEmptyString) {
    delete file_path_;
  }
  if (file_path) {
    set_has_file_path();
    file_path_ = file_path;
  } else {
    clear_has_file_path();
    file_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace BaseDefine
}  // namespace IM

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::IM::BaseDefine::ResultType>() {
  return ::IM::BaseDefine::ResultType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::IM::BaseDefine::UserType>() {
  return ::IM::BaseDefine::UserType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::IM::BaseDefine::KickReasonType>() {
  return ::IM::BaseDefine::KickReasonType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::IM::BaseDefine::OnlineListType>() {
  return ::IM::BaseDefine::OnlineListType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::IM::BaseDefine::UserStatType>() {
  return ::IM::BaseDefine::UserStatType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::IM::BaseDefine::SessionType>() {
  return ::IM::BaseDefine::SessionType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::IM::BaseDefine::GroupType>() {
  return ::IM::BaseDefine::GroupType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_IM_2eBaseDefine_2eproto__INCLUDED
