// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.BaseDefine.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "IM.BaseDefine.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace IM {
namespace BaseDefine {

namespace {

const ::google::protobuf::Descriptor* IpAddr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IpAddr_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientUserStat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientUserStat_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerUserStat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerUserStat_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientUnReadInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientUnReadInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerUnReadInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerUnReadInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientMsgInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientMsgInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerMsgInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerMsgInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientGroupInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientGroupInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerGroupInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerGroupInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientGroupUnReadCnt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientGroupUnReadCnt_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerGroupUnReadCnt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerGroupUnReadCnt_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientGroupMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientGroupMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerGroupMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerGroupMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientOfflineFileInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientOfflineFileInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerOfflineFileInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerOfflineFileInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ResultType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* UserType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* KickReasonType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OnlineListType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* UserStatType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SessionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GroupType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_IM_2eBaseDefine_2eproto() {
  protobuf_AddDesc_IM_2eBaseDefine_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "IM.BaseDefine.proto");
  GOOGLE_CHECK(file != NULL);
  IpAddr_descriptor_ = file->message_type(0);
  static const int IpAddr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpAddr, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpAddr, port_),
  };
  IpAddr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IpAddr_descriptor_,
      IpAddr::default_instance_,
      IpAddr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpAddr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpAddr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IpAddr));
  ClientUserInfo_descriptor_ = file->message_type(1);
  static const int ClientUserInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientUserInfo, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientUserInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientUserInfo, nick_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientUserInfo, avatar_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientUserInfo, department_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientUserInfo, user_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientUserInfo, user_updated_),
  };
  ClientUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientUserInfo_descriptor_,
      ClientUserInfo::default_instance_,
      ClientUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientUserInfo));
  ServerUserInfo_descriptor_ = file->message_type(2);
  static const int ServerUserInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerUserInfo, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerUserInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerUserInfo, nick_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerUserInfo, avatar_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerUserInfo, department_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerUserInfo, user_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerUserInfo, user_update_),
  };
  ServerUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerUserInfo_descriptor_,
      ServerUserInfo::default_instance_,
      ServerUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerUserInfo));
  ClientUserStat_descriptor_ = file->message_type(3);
  static const int ClientUserStat_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientUserStat, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientUserStat, user_stat_),
  };
  ClientUserStat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientUserStat_descriptor_,
      ClientUserStat::default_instance_,
      ClientUserStat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientUserStat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientUserStat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientUserStat));
  ServerUserStat_descriptor_ = file->message_type(4);
  static const int ServerUserStat_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerUserStat, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerUserStat, user_stat_),
  };
  ServerUserStat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerUserStat_descriptor_,
      ServerUserStat::default_instance_,
      ServerUserStat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerUserStat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerUserStat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerUserStat));
  ClientUnReadInfo_descriptor_ = file->message_type(5);
  static const int ClientUnReadInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientUnReadInfo, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientUnReadInfo, unread_count_),
  };
  ClientUnReadInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientUnReadInfo_descriptor_,
      ClientUnReadInfo::default_instance_,
      ClientUnReadInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientUnReadInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientUnReadInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientUnReadInfo));
  ServerUnReadInfo_descriptor_ = file->message_type(6);
  static const int ServerUnReadInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerUnReadInfo, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerUnReadInfo, unread_count_),
  };
  ServerUnReadInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerUnReadInfo_descriptor_,
      ServerUnReadInfo::default_instance_,
      ServerUnReadInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerUnReadInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerUnReadInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerUnReadInfo));
  ClientMsgInfo_descriptor_ = file->message_type(7);
  static const int ClientMsgInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMsgInfo, from_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMsgInfo, from_user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMsgInfo, from_user_nick_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMsgInfo, from_user_avatar_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMsgInfo, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMsgInfo, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMsgInfo, msg_content_),
  };
  ClientMsgInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientMsgInfo_descriptor_,
      ClientMsgInfo::default_instance_,
      ClientMsgInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMsgInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMsgInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientMsgInfo));
  ServerMsgInfo_descriptor_ = file->message_type(8);
  static const int ServerMsgInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMsgInfo, from_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMsgInfo, from_user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMsgInfo, from_user_nick_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMsgInfo, from_user_avatar_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMsgInfo, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMsgInfo, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMsgInfo, msg_content_),
  };
  ServerMsgInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerMsgInfo_descriptor_,
      ServerMsgInfo::default_instance_,
      ServerMsgInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMsgInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMsgInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerMsgInfo));
  ClientGroupInfo_descriptor_ = file->message_type(9);
  static const int ClientGroupInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGroupInfo, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGroupInfo, group_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGroupInfo, group_avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGroupInfo, group_creator_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGroupInfo, group_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGroupInfo, group_updated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGroupInfo, group_member_list_),
  };
  ClientGroupInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientGroupInfo_descriptor_,
      ClientGroupInfo::default_instance_,
      ClientGroupInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGroupInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGroupInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientGroupInfo));
  ServerGroupInfo_descriptor_ = file->message_type(10);
  static const int ServerGroupInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGroupInfo, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGroupInfo, group_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGroupInfo, group_avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGroupInfo, group_creator_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGroupInfo, group_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGroupInfo, group_updated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGroupInfo, group_member_list_),
  };
  ServerGroupInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerGroupInfo_descriptor_,
      ServerGroupInfo::default_instance_,
      ServerGroupInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGroupInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGroupInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerGroupInfo));
  ClientGroupUnReadCnt_descriptor_ = file->message_type(11);
  static const int ClientGroupUnReadCnt_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGroupUnReadCnt, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGroupUnReadCnt, unread_cnt_),
  };
  ClientGroupUnReadCnt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientGroupUnReadCnt_descriptor_,
      ClientGroupUnReadCnt::default_instance_,
      ClientGroupUnReadCnt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGroupUnReadCnt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGroupUnReadCnt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientGroupUnReadCnt));
  ServerGroupUnReadCnt_descriptor_ = file->message_type(12);
  static const int ServerGroupUnReadCnt_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGroupUnReadCnt, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGroupUnReadCnt, unread_cnt_),
  };
  ServerGroupUnReadCnt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerGroupUnReadCnt_descriptor_,
      ServerGroupUnReadCnt::default_instance_,
      ServerGroupUnReadCnt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGroupUnReadCnt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGroupUnReadCnt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerGroupUnReadCnt));
  ClientGroupMsg_descriptor_ = file->message_type(13);
  static const int ClientGroupMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGroupMsg, from_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGroupMsg, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGroupMsg, msg_content_),
  };
  ClientGroupMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientGroupMsg_descriptor_,
      ClientGroupMsg::default_instance_,
      ClientGroupMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGroupMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientGroupMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientGroupMsg));
  ServerGroupMsg_descriptor_ = file->message_type(14);
  static const int ServerGroupMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGroupMsg, from_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGroupMsg, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGroupMsg, msg_content_),
  };
  ServerGroupMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerGroupMsg_descriptor_,
      ServerGroupMsg::default_instance_,
      ServerGroupMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGroupMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGroupMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerGroupMsg));
  ClientOfflineFileInfo_descriptor_ = file->message_type(15);
  static const int ClientOfflineFileInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientOfflineFileInfo, from_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientOfflineFileInfo, file_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientOfflineFileInfo, file_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientOfflineFileInfo, file_path_),
  };
  ClientOfflineFileInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientOfflineFileInfo_descriptor_,
      ClientOfflineFileInfo::default_instance_,
      ClientOfflineFileInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientOfflineFileInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientOfflineFileInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientOfflineFileInfo));
  ServerOfflineFileInfo_descriptor_ = file->message_type(16);
  static const int ServerOfflineFileInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerOfflineFileInfo, from_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerOfflineFileInfo, file_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerOfflineFileInfo, file_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerOfflineFileInfo, file_path_),
  };
  ServerOfflineFileInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerOfflineFileInfo_descriptor_,
      ServerOfflineFileInfo::default_instance_,
      ServerOfflineFileInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerOfflineFileInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerOfflineFileInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerOfflineFileInfo));
  ResultType_descriptor_ = file->enum_type(0);
  UserType_descriptor_ = file->enum_type(1);
  KickReasonType_descriptor_ = file->enum_type(2);
  OnlineListType_descriptor_ = file->enum_type(3);
  UserStatType_descriptor_ = file->enum_type(4);
  SessionType_descriptor_ = file->enum_type(5);
  GroupType_descriptor_ = file->enum_type(6);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_IM_2eBaseDefine_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IpAddr_descriptor_, &IpAddr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientUserInfo_descriptor_, &ClientUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerUserInfo_descriptor_, &ServerUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientUserStat_descriptor_, &ClientUserStat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerUserStat_descriptor_, &ServerUserStat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientUnReadInfo_descriptor_, &ClientUnReadInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerUnReadInfo_descriptor_, &ServerUnReadInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientMsgInfo_descriptor_, &ClientMsgInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerMsgInfo_descriptor_, &ServerMsgInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientGroupInfo_descriptor_, &ClientGroupInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerGroupInfo_descriptor_, &ServerGroupInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientGroupUnReadCnt_descriptor_, &ClientGroupUnReadCnt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerGroupUnReadCnt_descriptor_, &ServerGroupUnReadCnt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientGroupMsg_descriptor_, &ClientGroupMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerGroupMsg_descriptor_, &ServerGroupMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientOfflineFileInfo_descriptor_, &ClientOfflineFileInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerOfflineFileInfo_descriptor_, &ServerOfflineFileInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_IM_2eBaseDefine_2eproto() {
  delete IpAddr::default_instance_;
  delete IpAddr_reflection_;
  delete ClientUserInfo::default_instance_;
  delete ClientUserInfo_reflection_;
  delete ServerUserInfo::default_instance_;
  delete ServerUserInfo_reflection_;
  delete ClientUserStat::default_instance_;
  delete ClientUserStat_reflection_;
  delete ServerUserStat::default_instance_;
  delete ServerUserStat_reflection_;
  delete ClientUnReadInfo::default_instance_;
  delete ClientUnReadInfo_reflection_;
  delete ServerUnReadInfo::default_instance_;
  delete ServerUnReadInfo_reflection_;
  delete ClientMsgInfo::default_instance_;
  delete ClientMsgInfo_reflection_;
  delete ServerMsgInfo::default_instance_;
  delete ServerMsgInfo_reflection_;
  delete ClientGroupInfo::default_instance_;
  delete ClientGroupInfo_reflection_;
  delete ServerGroupInfo::default_instance_;
  delete ServerGroupInfo_reflection_;
  delete ClientGroupUnReadCnt::default_instance_;
  delete ClientGroupUnReadCnt_reflection_;
  delete ServerGroupUnReadCnt::default_instance_;
  delete ServerGroupUnReadCnt_reflection_;
  delete ClientGroupMsg::default_instance_;
  delete ClientGroupMsg_reflection_;
  delete ServerGroupMsg::default_instance_;
  delete ServerGroupMsg_reflection_;
  delete ClientOfflineFileInfo::default_instance_;
  delete ClientOfflineFileInfo_reflection_;
  delete ServerOfflineFileInfo::default_instance_;
  delete ServerOfflineFileInfo_reflection_;
}

void protobuf_AddDesc_IM_2eBaseDefine_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023IM.BaseDefine.proto\022\rIM.BaseDefine\"\"\n\006"
    "IpAddr\022\n\n\002ip\030\001 \002(\t\022\014\n\004port\030\002 \002(\r\"\254\001\n\016Cli"
    "entUserInfo\022\017\n\007user_id\030\001 \002(\t\022\014\n\004name\030\002 \002"
    "(\t\022\021\n\tnick_name\030\003 \002(\t\022\022\n\navatar_url\030\004 \002("
    "\t\022\022\n\ndepartment\030\005 \002(\t\022*\n\tuser_type\030\006 \002(\016"
    "2\027.IM.BaseDefine.UserType\022\024\n\014user_update"
    "d\030\007 \002(\r\"\222\001\n\016ServerUserInfo\022\017\n\007user_id\030\001 "
    "\002(\r\022\014\n\004name\030\002 \002(\t\022\021\n\tnick_name\030\003 \002(\t\022\022\n\n"
    "avatar_url\030\004 \002(\t\022\022\n\ndepartment\030\005 \002(\t\022\021\n\t"
    "user_type\030\006 \002(\r\022\023\n\013user_update\030\007 \002(\r\"Q\n\016"
    "ClientUserStat\022\017\n\007user_id\030\001 \002(\t\022.\n\tuser_"
    "stat\030\002 \002(\0162\033.IM.BaseDefine.UserStatType\""
    "Q\n\016ServerUserStat\022\017\n\007user_id\030\001 \002(\r\022.\n\tus"
    "er_stat\030\002 \002(\0162\033.IM.BaseDefine.UserStatTy"
    "pe\"9\n\020ClientUnReadInfo\022\017\n\007user_id\030\001 \002(\t\022"
    "\024\n\014unread_count\030\002 \002(\r\"9\n\020ServerUnReadInf"
    "o\022\017\n\007user_id\030\001 \002(\r\022\024\n\014unread_count\030\002 \002(\r"
    "\"\264\001\n\rClientMsgInfo\022\024\n\014from_user_id\030\001 \002(\t"
    "\022\026\n\016from_user_name\030\002 \002(\t\022\033\n\023from_user_ni"
    "ck_name\030\003 \002(\t\022\034\n\024from_user_avatar_url\030\004 "
    "\002(\t\022\023\n\013create_time\030\005 \002(\r\022\020\n\010msg_type\030\006 \002"
    "(\r\022\023\n\013msg_content\030\007 \002(\t\"\264\001\n\rServerMsgInf"
    "o\022\024\n\014from_user_id\030\001 \002(\r\022\026\n\016from_user_nam"
    "e\030\002 \002(\t\022\033\n\023from_user_nick_name\030\003 \002(\t\022\034\n\024"
    "from_user_avatar_url\030\004 \002(\t\022\023\n\013create_tim"
    "e\030\005 \002(\r\022\020\n\010msg_type\030\006 \002(\r\022\023\n\013msg_content"
    "\030\007 \002(\t\"\307\001\n\017ClientGroupInfo\022\020\n\010group_id\030\001"
    " \002(\t\022\022\n\ngroup_name\030\002 \002(\t\022\024\n\014group_avatar"
    "\030\003 \002(\t\022\030\n\020group_creator_id\030\004 \002(\t\022,\n\ngrou"
    "p_type\030\005 \002(\0162\030.IM.BaseDefine.GroupType\022\025"
    "\n\rgroup_updated\030\006 \002(\r\022\031\n\021group_member_li"
    "st\030\007 \003(\t\"\307\001\n\017ServerGroupInfo\022\020\n\010group_id"
    "\030\001 \002(\r\022\022\n\ngroup_name\030\002 \002(\t\022\024\n\014group_avat"
    "ar\030\003 \002(\t\022\030\n\020group_creator_id\030\004 \002(\r\022,\n\ngr"
    "oup_type\030\005 \002(\0162\030.IM.BaseDefine.GroupType"
    "\022\025\n\rgroup_updated\030\006 \002(\r\022\031\n\021group_member_"
    "list\030\007 \003(\r\"<\n\024ClientGroupUnReadCnt\022\020\n\010gr"
    "oup_id\030\001 \002(\t\022\022\n\nunread_cnt\030\002 \002(\r\"<\n\024Serv"
    "erGroupUnReadCnt\022\020\n\010group_id\030\001 \002(\r\022\022\n\nun"
    "read_cnt\030\002 \002(\r\"P\n\016ClientGroupMsg\022\024\n\014from"
    "_user_id\030\001 \002(\t\022\023\n\013create_time\030\002 \002(\r\022\023\n\013m"
    "sg_content\030\003 \002(\t\"P\n\016ServerGroupMsg\022\024\n\014fr"
    "om_user_id\030\001 \002(\r\022\023\n\013create_time\030\002 \002(\r\022\023\n"
    "\013msg_content\030\003 \002(\t\"d\n\025ClientOfflineFileI"
    "nfo\022\024\n\014from_user_id\030\001 \002(\t\022\017\n\007file_id\030\002 \002"
    "(\r\022\021\n\tfile_size\030\003 \002(\r\022\021\n\tfile_path\030\004 \002(\t"
    "\"d\n\025ServerOfflineFileInfo\022\024\n\014from_user_i"
    "d\030\001 \002(\r\022\017\n\007file_id\030\002 \002(\r\022\021\n\tfile_size\030\003 "
    "\002(\r\022\021\n\tfile_path\030\004 \002(\t*\227\002\n\nResultType\022\026\n"
    "\022REFUSE_REASON_NONE\020\000\022\037\n\033REFUSE_REASON_N"
    "O_MSG_SERVER\020\001\022!\n\035REFUSE_REASON_MSG_SERV"
    "ER_FULL\020\002\022\036\n\032REFUSE_REASON_NO_DB_SERVER\020"
    "\003\022!\n\035REFUSE_REASON_NO_LOGIN_SERVER\020\004\022!\n\035"
    "REFUSE_REASON_NO_ROUTE_SERVER\020\005\022$\n REFUS"
    "E_REASON_DB_VALIDATE_FAILED\020\006\022!\n\035RESUSE_"
    "REASON_VERSION_TOO_OLD\020\007* \n\010UserType\022\024\n\020"
    "USER_TYPE_NORMAL\020\000*0\n\016KickReasonType\022\036\n\032"
    "KICK_REASON_DUPLICATE_USER\020\001*2\n\016OnlineLi"
    "stType\022 \n\034ONLINE_LIST_TYPE_FRIEND_LIST\020\001"
    "*V\n\014UserStatType\022\026\n\022USER_STATUS_ONLINE\020\001"
    "\022\027\n\023USER_STATUS_OFFLINE\020\002\022\025\n\021USER_STATUS"
    "_LEAVE\020\003*[\n\013SessionType\022\027\n\023SESSION_TYPE_"
    "SINGLE\020\001\022\026\n\022SESSION_TYPE_GROUP\020\002\022\033\n\027SESS"
    "ION_TYPE_TEMP_GROUP\020\003*2\n\tGroupType\022\020\n\014NO"
    "RMAL_GROUP\020\000\022\023\n\017TEMPORARY_GROUP\020\001", 2593);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "IM.BaseDefine.proto", &protobuf_RegisterTypes);
  IpAddr::default_instance_ = new IpAddr();
  ClientUserInfo::default_instance_ = new ClientUserInfo();
  ServerUserInfo::default_instance_ = new ServerUserInfo();
  ClientUserStat::default_instance_ = new ClientUserStat();
  ServerUserStat::default_instance_ = new ServerUserStat();
  ClientUnReadInfo::default_instance_ = new ClientUnReadInfo();
  ServerUnReadInfo::default_instance_ = new ServerUnReadInfo();
  ClientMsgInfo::default_instance_ = new ClientMsgInfo();
  ServerMsgInfo::default_instance_ = new ServerMsgInfo();
  ClientGroupInfo::default_instance_ = new ClientGroupInfo();
  ServerGroupInfo::default_instance_ = new ServerGroupInfo();
  ClientGroupUnReadCnt::default_instance_ = new ClientGroupUnReadCnt();
  ServerGroupUnReadCnt::default_instance_ = new ServerGroupUnReadCnt();
  ClientGroupMsg::default_instance_ = new ClientGroupMsg();
  ServerGroupMsg::default_instance_ = new ServerGroupMsg();
  ClientOfflineFileInfo::default_instance_ = new ClientOfflineFileInfo();
  ServerOfflineFileInfo::default_instance_ = new ServerOfflineFileInfo();
  IpAddr::default_instance_->InitAsDefaultInstance();
  ClientUserInfo::default_instance_->InitAsDefaultInstance();
  ServerUserInfo::default_instance_->InitAsDefaultInstance();
  ClientUserStat::default_instance_->InitAsDefaultInstance();
  ServerUserStat::default_instance_->InitAsDefaultInstance();
  ClientUnReadInfo::default_instance_->InitAsDefaultInstance();
  ServerUnReadInfo::default_instance_->InitAsDefaultInstance();
  ClientMsgInfo::default_instance_->InitAsDefaultInstance();
  ServerMsgInfo::default_instance_->InitAsDefaultInstance();
  ClientGroupInfo::default_instance_->InitAsDefaultInstance();
  ServerGroupInfo::default_instance_->InitAsDefaultInstance();
  ClientGroupUnReadCnt::default_instance_->InitAsDefaultInstance();
  ServerGroupUnReadCnt::default_instance_->InitAsDefaultInstance();
  ClientGroupMsg::default_instance_->InitAsDefaultInstance();
  ServerGroupMsg::default_instance_->InitAsDefaultInstance();
  ClientOfflineFileInfo::default_instance_->InitAsDefaultInstance();
  ServerOfflineFileInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_IM_2eBaseDefine_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_IM_2eBaseDefine_2eproto {
  StaticDescriptorInitializer_IM_2eBaseDefine_2eproto() {
    protobuf_AddDesc_IM_2eBaseDefine_2eproto();
  }
} static_descriptor_initializer_IM_2eBaseDefine_2eproto_;
const ::google::protobuf::EnumDescriptor* ResultType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultType_descriptor_;
}
bool ResultType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* UserType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserType_descriptor_;
}
bool UserType_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* KickReasonType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KickReasonType_descriptor_;
}
bool KickReasonType_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OnlineListType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OnlineListType_descriptor_;
}
bool OnlineListType_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* UserStatType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserStatType_descriptor_;
}
bool UserStatType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SessionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SessionType_descriptor_;
}
bool SessionType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GroupType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupType_descriptor_;
}
bool GroupType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int IpAddr::kIpFieldNumber;
const int IpAddr::kPortFieldNumber;
#endif  // !_MSC_VER

IpAddr::IpAddr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IpAddr::InitAsDefaultInstance() {
}

IpAddr::IpAddr(const IpAddr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IpAddr::SharedCtor() {
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IpAddr::~IpAddr() {
  SharedDtor();
}

void IpAddr::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void IpAddr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IpAddr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IpAddr_descriptor_;
}

const IpAddr& IpAddr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBaseDefine_2eproto();
  return *default_instance_;
}

IpAddr* IpAddr::default_instance_ = NULL;

IpAddr* IpAddr::New() const {
  return new IpAddr;
}

void IpAddr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IpAddr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // required uint32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IpAddr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ip(), output);
  }

  // required uint32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IpAddr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // required uint32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IpAddr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required uint32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IpAddr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IpAddr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IpAddr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IpAddr::MergeFrom(const IpAddr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IpAddr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IpAddr::CopyFrom(const IpAddr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IpAddr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IpAddr::Swap(IpAddr* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IpAddr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IpAddr_descriptor_;
  metadata.reflection = IpAddr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientUserInfo::kUserIdFieldNumber;
const int ClientUserInfo::kNameFieldNumber;
const int ClientUserInfo::kNickNameFieldNumber;
const int ClientUserInfo::kAvatarUrlFieldNumber;
const int ClientUserInfo::kDepartmentFieldNumber;
const int ClientUserInfo::kUserTypeFieldNumber;
const int ClientUserInfo::kUserUpdatedFieldNumber;
#endif  // !_MSC_VER

ClientUserInfo::ClientUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientUserInfo::InitAsDefaultInstance() {
}

ClientUserInfo::ClientUserInfo(const ClientUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientUserInfo::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  department_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_type_ = 0;
  user_updated_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientUserInfo::~ClientUserInfo() {
  SharedDtor();
}

void ClientUserInfo::SharedDtor() {
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete user_id_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    delete avatar_url_;
  }
  if (department_ != &::google::protobuf::internal::kEmptyString) {
    delete department_;
  }
  if (this != default_instance_) {
  }
}

void ClientUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientUserInfo_descriptor_;
}

const ClientUserInfo& ClientUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBaseDefine_2eproto();
  return *default_instance_;
}

ClientUserInfo* ClientUserInfo::default_instance_ = NULL;

ClientUserInfo* ClientUserInfo::New() const {
  return new ClientUserInfo;
}

void ClientUserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_id()) {
      if (user_id_ != &::google::protobuf::internal::kEmptyString) {
        user_id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
        nick_name_->clear();
      }
    }
    if (has_avatar_url()) {
      if (avatar_url_ != &::google::protobuf::internal::kEmptyString) {
        avatar_url_->clear();
      }
    }
    if (has_department()) {
      if (department_ != &::google::protobuf::internal::kEmptyString) {
        department_->clear();
      }
    }
    user_type_ = 0;
    user_updated_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nick_name;
        break;
      }

      // required string nick_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nick_name().data(), this->nick_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_avatar_url;
        break;
      }

      // required string avatar_url = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avatar_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->avatar_url().data(), this->avatar_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_department;
        break;
      }

      // required string department = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_department:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_department()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->department().data(), this->department().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_user_type;
        break;
      }

      // required .IM.BaseDefine.UserType user_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::UserType_IsValid(value)) {
            set_user_type(static_cast< ::IM::BaseDefine::UserType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_user_updated;
        break;
      }

      // required uint32 user_updated = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_updated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_updated_)));
          set_has_user_updated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required string nick_name = 3;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->nick_name(), output);
  }

  // required string avatar_url = 4;
  if (has_avatar_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->avatar_url().data(), this->avatar_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->avatar_url(), output);
  }

  // required string department = 5;
  if (has_department()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->department().data(), this->department().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->department(), output);
  }

  // required .IM.BaseDefine.UserType user_type = 6;
  if (has_user_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->user_type(), output);
  }

  // required uint32 user_updated = 7;
  if (has_user_updated()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->user_updated(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required string nick_name = 3;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nick_name(), target);
  }

  // required string avatar_url = 4;
  if (has_avatar_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->avatar_url().data(), this->avatar_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->avatar_url(), target);
  }

  // required string department = 5;
  if (has_department()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->department().data(), this->department().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->department(), target);
  }

  // required .IM.BaseDefine.UserType user_type = 6;
  if (has_user_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->user_type(), target);
  }

  // required uint32 user_updated = 7;
  if (has_user_updated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->user_updated(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string nick_name = 3;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick_name());
    }

    // required string avatar_url = 4;
    if (has_avatar_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar_url());
    }

    // required string department = 5;
    if (has_department()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->department());
    }

    // required .IM.BaseDefine.UserType user_type = 6;
    if (has_user_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->user_type());
    }

    // required uint32 user_updated = 7;
    if (has_user_updated()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_updated());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientUserInfo::MergeFrom(const ClientUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
    if (from.has_avatar_url()) {
      set_avatar_url(from.avatar_url());
    }
    if (from.has_department()) {
      set_department(from.department());
    }
    if (from.has_user_type()) {
      set_user_type(from.user_type());
    }
    if (from.has_user_updated()) {
      set_user_updated(from.user_updated());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientUserInfo::CopyFrom(const ClientUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientUserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void ClientUserInfo::Swap(ClientUserInfo* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(name_, other->name_);
    std::swap(nick_name_, other->nick_name_);
    std::swap(avatar_url_, other->avatar_url_);
    std::swap(department_, other->department_);
    std::swap(user_type_, other->user_type_);
    std::swap(user_updated_, other->user_updated_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientUserInfo_descriptor_;
  metadata.reflection = ClientUserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerUserInfo::kUserIdFieldNumber;
const int ServerUserInfo::kNameFieldNumber;
const int ServerUserInfo::kNickNameFieldNumber;
const int ServerUserInfo::kAvatarUrlFieldNumber;
const int ServerUserInfo::kDepartmentFieldNumber;
const int ServerUserInfo::kUserTypeFieldNumber;
const int ServerUserInfo::kUserUpdateFieldNumber;
#endif  // !_MSC_VER

ServerUserInfo::ServerUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerUserInfo::InitAsDefaultInstance() {
}

ServerUserInfo::ServerUserInfo(const ServerUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerUserInfo::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  department_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_type_ = 0u;
  user_update_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerUserInfo::~ServerUserInfo() {
  SharedDtor();
}

void ServerUserInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    delete avatar_url_;
  }
  if (department_ != &::google::protobuf::internal::kEmptyString) {
    delete department_;
  }
  if (this != default_instance_) {
  }
}

void ServerUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerUserInfo_descriptor_;
}

const ServerUserInfo& ServerUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBaseDefine_2eproto();
  return *default_instance_;
}

ServerUserInfo* ServerUserInfo::default_instance_ = NULL;

ServerUserInfo* ServerUserInfo::New() const {
  return new ServerUserInfo;
}

void ServerUserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
        nick_name_->clear();
      }
    }
    if (has_avatar_url()) {
      if (avatar_url_ != &::google::protobuf::internal::kEmptyString) {
        avatar_url_->clear();
      }
    }
    if (has_department()) {
      if (department_ != &::google::protobuf::internal::kEmptyString) {
        department_->clear();
      }
    }
    user_type_ = 0u;
    user_update_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nick_name;
        break;
      }

      // required string nick_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nick_name().data(), this->nick_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_avatar_url;
        break;
      }

      // required string avatar_url = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avatar_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->avatar_url().data(), this->avatar_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_department;
        break;
      }

      // required string department = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_department:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_department()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->department().data(), this->department().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_user_type;
        break;
      }

      // required uint32 user_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_type_)));
          set_has_user_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_user_update;
        break;
      }

      // required uint32 user_update = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_update:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_update_)));
          set_has_user_update();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required string nick_name = 3;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->nick_name(), output);
  }

  // required string avatar_url = 4;
  if (has_avatar_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->avatar_url().data(), this->avatar_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->avatar_url(), output);
  }

  // required string department = 5;
  if (has_department()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->department().data(), this->department().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->department(), output);
  }

  // required uint32 user_type = 6;
  if (has_user_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->user_type(), output);
  }

  // required uint32 user_update = 7;
  if (has_user_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->user_update(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required string nick_name = 3;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nick_name(), target);
  }

  // required string avatar_url = 4;
  if (has_avatar_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->avatar_url().data(), this->avatar_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->avatar_url(), target);
  }

  // required string department = 5;
  if (has_department()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->department().data(), this->department().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->department(), target);
  }

  // required uint32 user_type = 6;
  if (has_user_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->user_type(), target);
  }

  // required uint32 user_update = 7;
  if (has_user_update()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->user_update(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string nick_name = 3;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick_name());
    }

    // required string avatar_url = 4;
    if (has_avatar_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar_url());
    }

    // required string department = 5;
    if (has_department()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->department());
    }

    // required uint32 user_type = 6;
    if (has_user_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_type());
    }

    // required uint32 user_update = 7;
    if (has_user_update()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_update());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerUserInfo::MergeFrom(const ServerUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
    if (from.has_avatar_url()) {
      set_avatar_url(from.avatar_url());
    }
    if (from.has_department()) {
      set_department(from.department());
    }
    if (from.has_user_type()) {
      set_user_type(from.user_type());
    }
    if (from.has_user_update()) {
      set_user_update(from.user_update());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerUserInfo::CopyFrom(const ServerUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerUserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void ServerUserInfo::Swap(ServerUserInfo* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(name_, other->name_);
    std::swap(nick_name_, other->nick_name_);
    std::swap(avatar_url_, other->avatar_url_);
    std::swap(department_, other->department_);
    std::swap(user_type_, other->user_type_);
    std::swap(user_update_, other->user_update_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerUserInfo_descriptor_;
  metadata.reflection = ServerUserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientUserStat::kUserIdFieldNumber;
const int ClientUserStat::kUserStatFieldNumber;
#endif  // !_MSC_VER

ClientUserStat::ClientUserStat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientUserStat::InitAsDefaultInstance() {
}

ClientUserStat::ClientUserStat(const ClientUserStat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientUserStat::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_stat_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientUserStat::~ClientUserStat() {
  SharedDtor();
}

void ClientUserStat::SharedDtor() {
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete user_id_;
  }
  if (this != default_instance_) {
  }
}

void ClientUserStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientUserStat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientUserStat_descriptor_;
}

const ClientUserStat& ClientUserStat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBaseDefine_2eproto();
  return *default_instance_;
}

ClientUserStat* ClientUserStat::default_instance_ = NULL;

ClientUserStat* ClientUserStat::New() const {
  return new ClientUserStat;
}

void ClientUserStat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_id()) {
      if (user_id_ != &::google::protobuf::internal::kEmptyString) {
        user_id_->clear();
      }
    }
    user_stat_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientUserStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_stat;
        break;
      }

      // required .IM.BaseDefine.UserStatType user_stat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_stat:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::UserStatType_IsValid(value)) {
            set_user_stat(static_cast< ::IM::BaseDefine::UserStatType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientUserStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_id(), output);
  }

  // required .IM.BaseDefine.UserStatType user_stat = 2;
  if (has_user_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->user_stat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientUserStat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }

  // required .IM.BaseDefine.UserStatType user_stat = 2;
  if (has_user_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->user_stat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientUserStat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }

    // required .IM.BaseDefine.UserStatType user_stat = 2;
    if (has_user_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->user_stat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientUserStat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientUserStat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientUserStat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientUserStat::MergeFrom(const ClientUserStat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_user_stat()) {
      set_user_stat(from.user_stat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientUserStat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientUserStat::CopyFrom(const ClientUserStat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientUserStat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ClientUserStat::Swap(ClientUserStat* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(user_stat_, other->user_stat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientUserStat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientUserStat_descriptor_;
  metadata.reflection = ClientUserStat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerUserStat::kUserIdFieldNumber;
const int ServerUserStat::kUserStatFieldNumber;
#endif  // !_MSC_VER

ServerUserStat::ServerUserStat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerUserStat::InitAsDefaultInstance() {
}

ServerUserStat::ServerUserStat(const ServerUserStat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerUserStat::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0u;
  user_stat_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerUserStat::~ServerUserStat() {
  SharedDtor();
}

void ServerUserStat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerUserStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerUserStat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerUserStat_descriptor_;
}

const ServerUserStat& ServerUserStat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBaseDefine_2eproto();
  return *default_instance_;
}

ServerUserStat* ServerUserStat::default_instance_ = NULL;

ServerUserStat* ServerUserStat::New() const {
  return new ServerUserStat;
}

void ServerUserStat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0u;
    user_stat_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerUserStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_stat;
        break;
      }

      // required .IM.BaseDefine.UserStatType user_stat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_stat:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::UserStatType_IsValid(value)) {
            set_user_stat(static_cast< ::IM::BaseDefine::UserStatType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerUserStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required .IM.BaseDefine.UserStatType user_stat = 2;
  if (has_user_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->user_stat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerUserStat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required .IM.BaseDefine.UserStatType user_stat = 2;
  if (has_user_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->user_stat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerUserStat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .IM.BaseDefine.UserStatType user_stat = 2;
    if (has_user_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->user_stat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerUserStat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerUserStat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerUserStat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerUserStat::MergeFrom(const ServerUserStat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_user_stat()) {
      set_user_stat(from.user_stat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerUserStat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerUserStat::CopyFrom(const ServerUserStat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerUserStat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ServerUserStat::Swap(ServerUserStat* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(user_stat_, other->user_stat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerUserStat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerUserStat_descriptor_;
  metadata.reflection = ServerUserStat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientUnReadInfo::kUserIdFieldNumber;
const int ClientUnReadInfo::kUnreadCountFieldNumber;
#endif  // !_MSC_VER

ClientUnReadInfo::ClientUnReadInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientUnReadInfo::InitAsDefaultInstance() {
}

ClientUnReadInfo::ClientUnReadInfo(const ClientUnReadInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientUnReadInfo::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  unread_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientUnReadInfo::~ClientUnReadInfo() {
  SharedDtor();
}

void ClientUnReadInfo::SharedDtor() {
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete user_id_;
  }
  if (this != default_instance_) {
  }
}

void ClientUnReadInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientUnReadInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientUnReadInfo_descriptor_;
}

const ClientUnReadInfo& ClientUnReadInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBaseDefine_2eproto();
  return *default_instance_;
}

ClientUnReadInfo* ClientUnReadInfo::default_instance_ = NULL;

ClientUnReadInfo* ClientUnReadInfo::New() const {
  return new ClientUnReadInfo;
}

void ClientUnReadInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_id()) {
      if (user_id_ != &::google::protobuf::internal::kEmptyString) {
        user_id_->clear();
      }
    }
    unread_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientUnReadInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_unread_count;
        break;
      }

      // required uint32 unread_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unread_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unread_count_)));
          set_has_unread_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientUnReadInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_id(), output);
  }

  // required uint32 unread_count = 2;
  if (has_unread_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->unread_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientUnReadInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }

  // required uint32 unread_count = 2;
  if (has_unread_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->unread_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientUnReadInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }

    // required uint32 unread_count = 2;
    if (has_unread_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unread_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientUnReadInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientUnReadInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientUnReadInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientUnReadInfo::MergeFrom(const ClientUnReadInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_unread_count()) {
      set_unread_count(from.unread_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientUnReadInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientUnReadInfo::CopyFrom(const ClientUnReadInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientUnReadInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ClientUnReadInfo::Swap(ClientUnReadInfo* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(unread_count_, other->unread_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientUnReadInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientUnReadInfo_descriptor_;
  metadata.reflection = ClientUnReadInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerUnReadInfo::kUserIdFieldNumber;
const int ServerUnReadInfo::kUnreadCountFieldNumber;
#endif  // !_MSC_VER

ServerUnReadInfo::ServerUnReadInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerUnReadInfo::InitAsDefaultInstance() {
}

ServerUnReadInfo::ServerUnReadInfo(const ServerUnReadInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerUnReadInfo::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0u;
  unread_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerUnReadInfo::~ServerUnReadInfo() {
  SharedDtor();
}

void ServerUnReadInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerUnReadInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerUnReadInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerUnReadInfo_descriptor_;
}

const ServerUnReadInfo& ServerUnReadInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBaseDefine_2eproto();
  return *default_instance_;
}

ServerUnReadInfo* ServerUnReadInfo::default_instance_ = NULL;

ServerUnReadInfo* ServerUnReadInfo::New() const {
  return new ServerUnReadInfo;
}

void ServerUnReadInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0u;
    unread_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerUnReadInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_unread_count;
        break;
      }

      // required uint32 unread_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unread_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unread_count_)));
          set_has_unread_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerUnReadInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 unread_count = 2;
  if (has_unread_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->unread_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerUnReadInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required uint32 unread_count = 2;
  if (has_unread_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->unread_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerUnReadInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 unread_count = 2;
    if (has_unread_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unread_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerUnReadInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerUnReadInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerUnReadInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerUnReadInfo::MergeFrom(const ServerUnReadInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_unread_count()) {
      set_unread_count(from.unread_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerUnReadInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerUnReadInfo::CopyFrom(const ServerUnReadInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerUnReadInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ServerUnReadInfo::Swap(ServerUnReadInfo* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(unread_count_, other->unread_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerUnReadInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerUnReadInfo_descriptor_;
  metadata.reflection = ServerUnReadInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientMsgInfo::kFromUserIdFieldNumber;
const int ClientMsgInfo::kFromUserNameFieldNumber;
const int ClientMsgInfo::kFromUserNickNameFieldNumber;
const int ClientMsgInfo::kFromUserAvatarUrlFieldNumber;
const int ClientMsgInfo::kCreateTimeFieldNumber;
const int ClientMsgInfo::kMsgTypeFieldNumber;
const int ClientMsgInfo::kMsgContentFieldNumber;
#endif  // !_MSC_VER

ClientMsgInfo::ClientMsgInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientMsgInfo::InitAsDefaultInstance() {
}

ClientMsgInfo::ClientMsgInfo(const ClientMsgInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientMsgInfo::SharedCtor() {
  _cached_size_ = 0;
  from_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  from_user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  from_user_nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  from_user_avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  create_time_ = 0u;
  msg_type_ = 0u;
  msg_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientMsgInfo::~ClientMsgInfo() {
  SharedDtor();
}

void ClientMsgInfo::SharedDtor() {
  if (from_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete from_user_id_;
  }
  if (from_user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete from_user_name_;
  }
  if (from_user_nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete from_user_nick_name_;
  }
  if (from_user_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    delete from_user_avatar_url_;
  }
  if (msg_content_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_content_;
  }
  if (this != default_instance_) {
  }
}

void ClientMsgInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientMsgInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientMsgInfo_descriptor_;
}

const ClientMsgInfo& ClientMsgInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBaseDefine_2eproto();
  return *default_instance_;
}

ClientMsgInfo* ClientMsgInfo::default_instance_ = NULL;

ClientMsgInfo* ClientMsgInfo::New() const {
  return new ClientMsgInfo;
}

void ClientMsgInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_from_user_id()) {
      if (from_user_id_ != &::google::protobuf::internal::kEmptyString) {
        from_user_id_->clear();
      }
    }
    if (has_from_user_name()) {
      if (from_user_name_ != &::google::protobuf::internal::kEmptyString) {
        from_user_name_->clear();
      }
    }
    if (has_from_user_nick_name()) {
      if (from_user_nick_name_ != &::google::protobuf::internal::kEmptyString) {
        from_user_nick_name_->clear();
      }
    }
    if (has_from_user_avatar_url()) {
      if (from_user_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
        from_user_avatar_url_->clear();
      }
    }
    create_time_ = 0u;
    msg_type_ = 0u;
    if (has_msg_content()) {
      if (msg_content_ != &::google::protobuf::internal::kEmptyString) {
        msg_content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientMsgInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string from_user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->from_user_id().data(), this->from_user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_from_user_name;
        break;
      }

      // required string from_user_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->from_user_name().data(), this->from_user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_from_user_nick_name;
        break;
      }

      // required string from_user_nick_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from_user_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_user_nick_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->from_user_nick_name().data(), this->from_user_nick_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_from_user_avatar_url;
        break;
      }

      // required string from_user_avatar_url = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from_user_avatar_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_user_avatar_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->from_user_avatar_url().data(), this->from_user_avatar_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_create_time;
        break;
      }

      // required uint32 create_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_msg_type;
        break;
      }

      // required uint32 msg_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msg_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_type_)));
          set_has_msg_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_msg_content;
        break;
      }

      // required string msg_content = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg_content().data(), this->msg_content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientMsgInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string from_user_id = 1;
  if (has_from_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_user_id().data(), this->from_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->from_user_id(), output);
  }

  // required string from_user_name = 2;
  if (has_from_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_user_name().data(), this->from_user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->from_user_name(), output);
  }

  // required string from_user_nick_name = 3;
  if (has_from_user_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_user_nick_name().data(), this->from_user_nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->from_user_nick_name(), output);
  }

  // required string from_user_avatar_url = 4;
  if (has_from_user_avatar_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_user_avatar_url().data(), this->from_user_avatar_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->from_user_avatar_url(), output);
  }

  // required uint32 create_time = 5;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->create_time(), output);
  }

  // required uint32 msg_type = 6;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->msg_type(), output);
  }

  // required string msg_content = 7;
  if (has_msg_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_content().data(), this->msg_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->msg_content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientMsgInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string from_user_id = 1;
  if (has_from_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_user_id().data(), this->from_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->from_user_id(), target);
  }

  // required string from_user_name = 2;
  if (has_from_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_user_name().data(), this->from_user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->from_user_name(), target);
  }

  // required string from_user_nick_name = 3;
  if (has_from_user_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_user_nick_name().data(), this->from_user_nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->from_user_nick_name(), target);
  }

  // required string from_user_avatar_url = 4;
  if (has_from_user_avatar_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_user_avatar_url().data(), this->from_user_avatar_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->from_user_avatar_url(), target);
  }

  // required uint32 create_time = 5;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->create_time(), target);
  }

  // required uint32 msg_type = 6;
  if (has_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->msg_type(), target);
  }

  // required string msg_content = 7;
  if (has_msg_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_content().data(), this->msg_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->msg_content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientMsgInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string from_user_id = 1;
    if (has_from_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_user_id());
    }

    // required string from_user_name = 2;
    if (has_from_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_user_name());
    }

    // required string from_user_nick_name = 3;
    if (has_from_user_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_user_nick_name());
    }

    // required string from_user_avatar_url = 4;
    if (has_from_user_avatar_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_user_avatar_url());
    }

    // required uint32 create_time = 5;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->create_time());
    }

    // required uint32 msg_type = 6;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_type());
    }

    // required string msg_content = 7;
    if (has_msg_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg_content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientMsgInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientMsgInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientMsgInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientMsgInfo::MergeFrom(const ClientMsgInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from_user_id()) {
      set_from_user_id(from.from_user_id());
    }
    if (from.has_from_user_name()) {
      set_from_user_name(from.from_user_name());
    }
    if (from.has_from_user_nick_name()) {
      set_from_user_nick_name(from.from_user_nick_name());
    }
    if (from.has_from_user_avatar_url()) {
      set_from_user_avatar_url(from.from_user_avatar_url());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_msg_content()) {
      set_msg_content(from.msg_content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientMsgInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientMsgInfo::CopyFrom(const ClientMsgInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMsgInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void ClientMsgInfo::Swap(ClientMsgInfo* other) {
  if (other != this) {
    std::swap(from_user_id_, other->from_user_id_);
    std::swap(from_user_name_, other->from_user_name_);
    std::swap(from_user_nick_name_, other->from_user_nick_name_);
    std::swap(from_user_avatar_url_, other->from_user_avatar_url_);
    std::swap(create_time_, other->create_time_);
    std::swap(msg_type_, other->msg_type_);
    std::swap(msg_content_, other->msg_content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientMsgInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientMsgInfo_descriptor_;
  metadata.reflection = ClientMsgInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerMsgInfo::kFromUserIdFieldNumber;
const int ServerMsgInfo::kFromUserNameFieldNumber;
const int ServerMsgInfo::kFromUserNickNameFieldNumber;
const int ServerMsgInfo::kFromUserAvatarUrlFieldNumber;
const int ServerMsgInfo::kCreateTimeFieldNumber;
const int ServerMsgInfo::kMsgTypeFieldNumber;
const int ServerMsgInfo::kMsgContentFieldNumber;
#endif  // !_MSC_VER

ServerMsgInfo::ServerMsgInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerMsgInfo::InitAsDefaultInstance() {
}

ServerMsgInfo::ServerMsgInfo(const ServerMsgInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerMsgInfo::SharedCtor() {
  _cached_size_ = 0;
  from_user_id_ = 0u;
  from_user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  from_user_nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  from_user_avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  create_time_ = 0u;
  msg_type_ = 0u;
  msg_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerMsgInfo::~ServerMsgInfo() {
  SharedDtor();
}

void ServerMsgInfo::SharedDtor() {
  if (from_user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete from_user_name_;
  }
  if (from_user_nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete from_user_nick_name_;
  }
  if (from_user_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    delete from_user_avatar_url_;
  }
  if (msg_content_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_content_;
  }
  if (this != default_instance_) {
  }
}

void ServerMsgInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerMsgInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerMsgInfo_descriptor_;
}

const ServerMsgInfo& ServerMsgInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBaseDefine_2eproto();
  return *default_instance_;
}

ServerMsgInfo* ServerMsgInfo::default_instance_ = NULL;

ServerMsgInfo* ServerMsgInfo::New() const {
  return new ServerMsgInfo;
}

void ServerMsgInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    from_user_id_ = 0u;
    if (has_from_user_name()) {
      if (from_user_name_ != &::google::protobuf::internal::kEmptyString) {
        from_user_name_->clear();
      }
    }
    if (has_from_user_nick_name()) {
      if (from_user_nick_name_ != &::google::protobuf::internal::kEmptyString) {
        from_user_nick_name_->clear();
      }
    }
    if (has_from_user_avatar_url()) {
      if (from_user_avatar_url_ != &::google::protobuf::internal::kEmptyString) {
        from_user_avatar_url_->clear();
      }
    }
    create_time_ = 0u;
    msg_type_ = 0u;
    if (has_msg_content()) {
      if (msg_content_ != &::google::protobuf::internal::kEmptyString) {
        msg_content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerMsgInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 from_user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_user_id_)));
          set_has_from_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_from_user_name;
        break;
      }

      // required string from_user_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->from_user_name().data(), this->from_user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_from_user_nick_name;
        break;
      }

      // required string from_user_nick_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from_user_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_user_nick_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->from_user_nick_name().data(), this->from_user_nick_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_from_user_avatar_url;
        break;
      }

      // required string from_user_avatar_url = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from_user_avatar_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_user_avatar_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->from_user_avatar_url().data(), this->from_user_avatar_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_create_time;
        break;
      }

      // required uint32 create_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_msg_type;
        break;
      }

      // required uint32 msg_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msg_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_type_)));
          set_has_msg_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_msg_content;
        break;
      }

      // required string msg_content = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg_content().data(), this->msg_content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerMsgInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 from_user_id = 1;
  if (has_from_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->from_user_id(), output);
  }

  // required string from_user_name = 2;
  if (has_from_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_user_name().data(), this->from_user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->from_user_name(), output);
  }

  // required string from_user_nick_name = 3;
  if (has_from_user_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_user_nick_name().data(), this->from_user_nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->from_user_nick_name(), output);
  }

  // required string from_user_avatar_url = 4;
  if (has_from_user_avatar_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_user_avatar_url().data(), this->from_user_avatar_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->from_user_avatar_url(), output);
  }

  // required uint32 create_time = 5;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->create_time(), output);
  }

  // required uint32 msg_type = 6;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->msg_type(), output);
  }

  // required string msg_content = 7;
  if (has_msg_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_content().data(), this->msg_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->msg_content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerMsgInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 from_user_id = 1;
  if (has_from_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->from_user_id(), target);
  }

  // required string from_user_name = 2;
  if (has_from_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_user_name().data(), this->from_user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->from_user_name(), target);
  }

  // required string from_user_nick_name = 3;
  if (has_from_user_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_user_nick_name().data(), this->from_user_nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->from_user_nick_name(), target);
  }

  // required string from_user_avatar_url = 4;
  if (has_from_user_avatar_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_user_avatar_url().data(), this->from_user_avatar_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->from_user_avatar_url(), target);
  }

  // required uint32 create_time = 5;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->create_time(), target);
  }

  // required uint32 msg_type = 6;
  if (has_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->msg_type(), target);
  }

  // required string msg_content = 7;
  if (has_msg_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_content().data(), this->msg_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->msg_content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerMsgInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 from_user_id = 1;
    if (has_from_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_user_id());
    }

    // required string from_user_name = 2;
    if (has_from_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_user_name());
    }

    // required string from_user_nick_name = 3;
    if (has_from_user_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_user_nick_name());
    }

    // required string from_user_avatar_url = 4;
    if (has_from_user_avatar_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_user_avatar_url());
    }

    // required uint32 create_time = 5;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->create_time());
    }

    // required uint32 msg_type = 6;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_type());
    }

    // required string msg_content = 7;
    if (has_msg_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg_content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerMsgInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerMsgInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerMsgInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerMsgInfo::MergeFrom(const ServerMsgInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from_user_id()) {
      set_from_user_id(from.from_user_id());
    }
    if (from.has_from_user_name()) {
      set_from_user_name(from.from_user_name());
    }
    if (from.has_from_user_nick_name()) {
      set_from_user_nick_name(from.from_user_nick_name());
    }
    if (from.has_from_user_avatar_url()) {
      set_from_user_avatar_url(from.from_user_avatar_url());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_msg_content()) {
      set_msg_content(from.msg_content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerMsgInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerMsgInfo::CopyFrom(const ServerMsgInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMsgInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void ServerMsgInfo::Swap(ServerMsgInfo* other) {
  if (other != this) {
    std::swap(from_user_id_, other->from_user_id_);
    std::swap(from_user_name_, other->from_user_name_);
    std::swap(from_user_nick_name_, other->from_user_nick_name_);
    std::swap(from_user_avatar_url_, other->from_user_avatar_url_);
    std::swap(create_time_, other->create_time_);
    std::swap(msg_type_, other->msg_type_);
    std::swap(msg_content_, other->msg_content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerMsgInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerMsgInfo_descriptor_;
  metadata.reflection = ServerMsgInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientGroupInfo::kGroupIdFieldNumber;
const int ClientGroupInfo::kGroupNameFieldNumber;
const int ClientGroupInfo::kGroupAvatarFieldNumber;
const int ClientGroupInfo::kGroupCreatorIdFieldNumber;
const int ClientGroupInfo::kGroupTypeFieldNumber;
const int ClientGroupInfo::kGroupUpdatedFieldNumber;
const int ClientGroupInfo::kGroupMemberListFieldNumber;
#endif  // !_MSC_VER

ClientGroupInfo::ClientGroupInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientGroupInfo::InitAsDefaultInstance() {
}

ClientGroupInfo::ClientGroupInfo(const ClientGroupInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientGroupInfo::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  group_avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  group_creator_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  group_type_ = 0;
  group_updated_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientGroupInfo::~ClientGroupInfo() {
  SharedDtor();
}

void ClientGroupInfo::SharedDtor() {
  if (group_id_ != &::google::protobuf::internal::kEmptyString) {
    delete group_id_;
  }
  if (group_name_ != &::google::protobuf::internal::kEmptyString) {
    delete group_name_;
  }
  if (group_avatar_ != &::google::protobuf::internal::kEmptyString) {
    delete group_avatar_;
  }
  if (group_creator_id_ != &::google::protobuf::internal::kEmptyString) {
    delete group_creator_id_;
  }
  if (this != default_instance_) {
  }
}

void ClientGroupInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientGroupInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientGroupInfo_descriptor_;
}

const ClientGroupInfo& ClientGroupInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBaseDefine_2eproto();
  return *default_instance_;
}

ClientGroupInfo* ClientGroupInfo::default_instance_ = NULL;

ClientGroupInfo* ClientGroupInfo::New() const {
  return new ClientGroupInfo;
}

void ClientGroupInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_group_id()) {
      if (group_id_ != &::google::protobuf::internal::kEmptyString) {
        group_id_->clear();
      }
    }
    if (has_group_name()) {
      if (group_name_ != &::google::protobuf::internal::kEmptyString) {
        group_name_->clear();
      }
    }
    if (has_group_avatar()) {
      if (group_avatar_ != &::google::protobuf::internal::kEmptyString) {
        group_avatar_->clear();
      }
    }
    if (has_group_creator_id()) {
      if (group_creator_id_ != &::google::protobuf::internal::kEmptyString) {
        group_creator_id_->clear();
      }
    }
    group_type_ = 0;
    group_updated_ = 0u;
  }
  group_member_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientGroupInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->group_id().data(), this->group_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_group_name;
        break;
      }

      // required string group_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->group_name().data(), this->group_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_group_avatar;
        break;
      }

      // required string group_avatar = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_avatar()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->group_avatar().data(), this->group_avatar().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_group_creator_id;
        break;
      }

      // required string group_creator_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_creator_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_creator_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->group_creator_id().data(), this->group_creator_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_group_type;
        break;
      }

      // required .IM.BaseDefine.GroupType group_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::GroupType_IsValid(value)) {
            set_group_type(static_cast< ::IM::BaseDefine::GroupType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_group_updated;
        break;
      }

      // required uint32 group_updated = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_updated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_updated_)));
          set_has_group_updated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_group_member_list;
        break;
      }

      // repeated string group_member_list = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_member_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_group_member_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->group_member_list(this->group_member_list_size() - 1).data(),
            this->group_member_list(this->group_member_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_group_member_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientGroupInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->group_id(), output);
  }

  // required string group_name = 2;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group_name().data(), this->group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->group_name(), output);
  }

  // required string group_avatar = 3;
  if (has_group_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group_avatar().data(), this->group_avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->group_avatar(), output);
  }

  // required string group_creator_id = 4;
  if (has_group_creator_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group_creator_id().data(), this->group_creator_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->group_creator_id(), output);
  }

  // required .IM.BaseDefine.GroupType group_type = 5;
  if (has_group_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->group_type(), output);
  }

  // required uint32 group_updated = 6;
  if (has_group_updated()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->group_updated(), output);
  }

  // repeated string group_member_list = 7;
  for (int i = 0; i < this->group_member_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->group_member_list(i).data(), this->group_member_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->group_member_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientGroupInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group_id(), target);
  }

  // required string group_name = 2;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group_name().data(), this->group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->group_name(), target);
  }

  // required string group_avatar = 3;
  if (has_group_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group_avatar().data(), this->group_avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->group_avatar(), target);
  }

  // required string group_creator_id = 4;
  if (has_group_creator_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group_creator_id().data(), this->group_creator_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->group_creator_id(), target);
  }

  // required .IM.BaseDefine.GroupType group_type = 5;
  if (has_group_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->group_type(), target);
  }

  // required uint32 group_updated = 6;
  if (has_group_updated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->group_updated(), target);
  }

  // repeated string group_member_list = 7;
  for (int i = 0; i < this->group_member_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group_member_list(i).data(), this->group_member_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->group_member_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientGroupInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_id());
    }

    // required string group_name = 2;
    if (has_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_name());
    }

    // required string group_avatar = 3;
    if (has_group_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_avatar());
    }

    // required string group_creator_id = 4;
    if (has_group_creator_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_creator_id());
    }

    // required .IM.BaseDefine.GroupType group_type = 5;
    if (has_group_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->group_type());
    }

    // required uint32 group_updated = 6;
    if (has_group_updated()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_updated());
    }

  }
  // repeated string group_member_list = 7;
  total_size += 1 * this->group_member_list_size();
  for (int i = 0; i < this->group_member_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->group_member_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientGroupInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientGroupInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientGroupInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientGroupInfo::MergeFrom(const ClientGroupInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  group_member_list_.MergeFrom(from.group_member_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_group_name()) {
      set_group_name(from.group_name());
    }
    if (from.has_group_avatar()) {
      set_group_avatar(from.group_avatar());
    }
    if (from.has_group_creator_id()) {
      set_group_creator_id(from.group_creator_id());
    }
    if (from.has_group_type()) {
      set_group_type(from.group_type());
    }
    if (from.has_group_updated()) {
      set_group_updated(from.group_updated());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientGroupInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientGroupInfo::CopyFrom(const ClientGroupInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientGroupInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void ClientGroupInfo::Swap(ClientGroupInfo* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(group_name_, other->group_name_);
    std::swap(group_avatar_, other->group_avatar_);
    std::swap(group_creator_id_, other->group_creator_id_);
    std::swap(group_type_, other->group_type_);
    std::swap(group_updated_, other->group_updated_);
    group_member_list_.Swap(&other->group_member_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientGroupInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientGroupInfo_descriptor_;
  metadata.reflection = ClientGroupInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerGroupInfo::kGroupIdFieldNumber;
const int ServerGroupInfo::kGroupNameFieldNumber;
const int ServerGroupInfo::kGroupAvatarFieldNumber;
const int ServerGroupInfo::kGroupCreatorIdFieldNumber;
const int ServerGroupInfo::kGroupTypeFieldNumber;
const int ServerGroupInfo::kGroupUpdatedFieldNumber;
const int ServerGroupInfo::kGroupMemberListFieldNumber;
#endif  // !_MSC_VER

ServerGroupInfo::ServerGroupInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerGroupInfo::InitAsDefaultInstance() {
}

ServerGroupInfo::ServerGroupInfo(const ServerGroupInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerGroupInfo::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = 0u;
  group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  group_avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  group_creator_id_ = 0u;
  group_type_ = 0;
  group_updated_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerGroupInfo::~ServerGroupInfo() {
  SharedDtor();
}

void ServerGroupInfo::SharedDtor() {
  if (group_name_ != &::google::protobuf::internal::kEmptyString) {
    delete group_name_;
  }
  if (group_avatar_ != &::google::protobuf::internal::kEmptyString) {
    delete group_avatar_;
  }
  if (this != default_instance_) {
  }
}

void ServerGroupInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerGroupInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerGroupInfo_descriptor_;
}

const ServerGroupInfo& ServerGroupInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBaseDefine_2eproto();
  return *default_instance_;
}

ServerGroupInfo* ServerGroupInfo::default_instance_ = NULL;

ServerGroupInfo* ServerGroupInfo::New() const {
  return new ServerGroupInfo;
}

void ServerGroupInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = 0u;
    if (has_group_name()) {
      if (group_name_ != &::google::protobuf::internal::kEmptyString) {
        group_name_->clear();
      }
    }
    if (has_group_avatar()) {
      if (group_avatar_ != &::google::protobuf::internal::kEmptyString) {
        group_avatar_->clear();
      }
    }
    group_creator_id_ = 0u;
    group_type_ = 0;
    group_updated_ = 0u;
  }
  group_member_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerGroupInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_group_name;
        break;
      }

      // required string group_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->group_name().data(), this->group_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_group_avatar;
        break;
      }

      // required string group_avatar = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_avatar()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->group_avatar().data(), this->group_avatar().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_group_creator_id;
        break;
      }

      // required uint32 group_creator_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_creator_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_creator_id_)));
          set_has_group_creator_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_group_type;
        break;
      }

      // required .IM.BaseDefine.GroupType group_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::GroupType_IsValid(value)) {
            set_group_type(static_cast< ::IM::BaseDefine::GroupType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_group_updated;
        break;
      }

      // required uint32 group_updated = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_updated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_updated_)));
          set_has_group_updated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_group_member_list;
        break;
      }

      // repeated uint32 group_member_list = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_member_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_group_member_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_group_member_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_group_member_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerGroupInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group_id(), output);
  }

  // required string group_name = 2;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group_name().data(), this->group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->group_name(), output);
  }

  // required string group_avatar = 3;
  if (has_group_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group_avatar().data(), this->group_avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->group_avatar(), output);
  }

  // required uint32 group_creator_id = 4;
  if (has_group_creator_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->group_creator_id(), output);
  }

  // required .IM.BaseDefine.GroupType group_type = 5;
  if (has_group_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->group_type(), output);
  }

  // required uint32 group_updated = 6;
  if (has_group_updated()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->group_updated(), output);
  }

  // repeated uint32 group_member_list = 7;
  for (int i = 0; i < this->group_member_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->group_member_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerGroupInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->group_id(), target);
  }

  // required string group_name = 2;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group_name().data(), this->group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->group_name(), target);
  }

  // required string group_avatar = 3;
  if (has_group_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group_avatar().data(), this->group_avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->group_avatar(), target);
  }

  // required uint32 group_creator_id = 4;
  if (has_group_creator_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->group_creator_id(), target);
  }

  // required .IM.BaseDefine.GroupType group_type = 5;
  if (has_group_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->group_type(), target);
  }

  // required uint32 group_updated = 6;
  if (has_group_updated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->group_updated(), target);
  }

  // repeated uint32 group_member_list = 7;
  for (int i = 0; i < this->group_member_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->group_member_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerGroupInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required string group_name = 2;
    if (has_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_name());
    }

    // required string group_avatar = 3;
    if (has_group_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_avatar());
    }

    // required uint32 group_creator_id = 4;
    if (has_group_creator_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_creator_id());
    }

    // required .IM.BaseDefine.GroupType group_type = 5;
    if (has_group_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->group_type());
    }

    // required uint32 group_updated = 6;
    if (has_group_updated()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_updated());
    }

  }
  // repeated uint32 group_member_list = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->group_member_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->group_member_list(i));
    }
    total_size += 1 * this->group_member_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerGroupInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerGroupInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerGroupInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerGroupInfo::MergeFrom(const ServerGroupInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  group_member_list_.MergeFrom(from.group_member_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_group_name()) {
      set_group_name(from.group_name());
    }
    if (from.has_group_avatar()) {
      set_group_avatar(from.group_avatar());
    }
    if (from.has_group_creator_id()) {
      set_group_creator_id(from.group_creator_id());
    }
    if (from.has_group_type()) {
      set_group_type(from.group_type());
    }
    if (from.has_group_updated()) {
      set_group_updated(from.group_updated());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerGroupInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerGroupInfo::CopyFrom(const ServerGroupInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerGroupInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void ServerGroupInfo::Swap(ServerGroupInfo* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(group_name_, other->group_name_);
    std::swap(group_avatar_, other->group_avatar_);
    std::swap(group_creator_id_, other->group_creator_id_);
    std::swap(group_type_, other->group_type_);
    std::swap(group_updated_, other->group_updated_);
    group_member_list_.Swap(&other->group_member_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerGroupInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerGroupInfo_descriptor_;
  metadata.reflection = ServerGroupInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientGroupUnReadCnt::kGroupIdFieldNumber;
const int ClientGroupUnReadCnt::kUnreadCntFieldNumber;
#endif  // !_MSC_VER

ClientGroupUnReadCnt::ClientGroupUnReadCnt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientGroupUnReadCnt::InitAsDefaultInstance() {
}

ClientGroupUnReadCnt::ClientGroupUnReadCnt(const ClientGroupUnReadCnt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientGroupUnReadCnt::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  unread_cnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientGroupUnReadCnt::~ClientGroupUnReadCnt() {
  SharedDtor();
}

void ClientGroupUnReadCnt::SharedDtor() {
  if (group_id_ != &::google::protobuf::internal::kEmptyString) {
    delete group_id_;
  }
  if (this != default_instance_) {
  }
}

void ClientGroupUnReadCnt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientGroupUnReadCnt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientGroupUnReadCnt_descriptor_;
}

const ClientGroupUnReadCnt& ClientGroupUnReadCnt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBaseDefine_2eproto();
  return *default_instance_;
}

ClientGroupUnReadCnt* ClientGroupUnReadCnt::default_instance_ = NULL;

ClientGroupUnReadCnt* ClientGroupUnReadCnt::New() const {
  return new ClientGroupUnReadCnt;
}

void ClientGroupUnReadCnt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_group_id()) {
      if (group_id_ != &::google::protobuf::internal::kEmptyString) {
        group_id_->clear();
      }
    }
    unread_cnt_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientGroupUnReadCnt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->group_id().data(), this->group_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_unread_cnt;
        break;
      }

      // required uint32 unread_cnt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unread_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unread_cnt_)));
          set_has_unread_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientGroupUnReadCnt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->group_id(), output);
  }

  // required uint32 unread_cnt = 2;
  if (has_unread_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->unread_cnt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientGroupUnReadCnt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group_id(), target);
  }

  // required uint32 unread_cnt = 2;
  if (has_unread_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->unread_cnt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientGroupUnReadCnt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_id());
    }

    // required uint32 unread_cnt = 2;
    if (has_unread_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unread_cnt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientGroupUnReadCnt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientGroupUnReadCnt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientGroupUnReadCnt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientGroupUnReadCnt::MergeFrom(const ClientGroupUnReadCnt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_unread_cnt()) {
      set_unread_cnt(from.unread_cnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientGroupUnReadCnt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientGroupUnReadCnt::CopyFrom(const ClientGroupUnReadCnt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientGroupUnReadCnt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ClientGroupUnReadCnt::Swap(ClientGroupUnReadCnt* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(unread_cnt_, other->unread_cnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientGroupUnReadCnt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientGroupUnReadCnt_descriptor_;
  metadata.reflection = ClientGroupUnReadCnt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerGroupUnReadCnt::kGroupIdFieldNumber;
const int ServerGroupUnReadCnt::kUnreadCntFieldNumber;
#endif  // !_MSC_VER

ServerGroupUnReadCnt::ServerGroupUnReadCnt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerGroupUnReadCnt::InitAsDefaultInstance() {
}

ServerGroupUnReadCnt::ServerGroupUnReadCnt(const ServerGroupUnReadCnt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerGroupUnReadCnt::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = 0u;
  unread_cnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerGroupUnReadCnt::~ServerGroupUnReadCnt() {
  SharedDtor();
}

void ServerGroupUnReadCnt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerGroupUnReadCnt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerGroupUnReadCnt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerGroupUnReadCnt_descriptor_;
}

const ServerGroupUnReadCnt& ServerGroupUnReadCnt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBaseDefine_2eproto();
  return *default_instance_;
}

ServerGroupUnReadCnt* ServerGroupUnReadCnt::default_instance_ = NULL;

ServerGroupUnReadCnt* ServerGroupUnReadCnt::New() const {
  return new ServerGroupUnReadCnt;
}

void ServerGroupUnReadCnt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = 0u;
    unread_cnt_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerGroupUnReadCnt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_unread_cnt;
        break;
      }

      // required uint32 unread_cnt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unread_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unread_cnt_)));
          set_has_unread_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerGroupUnReadCnt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group_id(), output);
  }

  // required uint32 unread_cnt = 2;
  if (has_unread_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->unread_cnt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerGroupUnReadCnt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->group_id(), target);
  }

  // required uint32 unread_cnt = 2;
  if (has_unread_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->unread_cnt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerGroupUnReadCnt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required uint32 unread_cnt = 2;
    if (has_unread_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unread_cnt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerGroupUnReadCnt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerGroupUnReadCnt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerGroupUnReadCnt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerGroupUnReadCnt::MergeFrom(const ServerGroupUnReadCnt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_unread_cnt()) {
      set_unread_cnt(from.unread_cnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerGroupUnReadCnt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerGroupUnReadCnt::CopyFrom(const ServerGroupUnReadCnt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerGroupUnReadCnt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ServerGroupUnReadCnt::Swap(ServerGroupUnReadCnt* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(unread_cnt_, other->unread_cnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerGroupUnReadCnt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerGroupUnReadCnt_descriptor_;
  metadata.reflection = ServerGroupUnReadCnt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientGroupMsg::kFromUserIdFieldNumber;
const int ClientGroupMsg::kCreateTimeFieldNumber;
const int ClientGroupMsg::kMsgContentFieldNumber;
#endif  // !_MSC_VER

ClientGroupMsg::ClientGroupMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientGroupMsg::InitAsDefaultInstance() {
}

ClientGroupMsg::ClientGroupMsg(const ClientGroupMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientGroupMsg::SharedCtor() {
  _cached_size_ = 0;
  from_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  create_time_ = 0u;
  msg_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientGroupMsg::~ClientGroupMsg() {
  SharedDtor();
}

void ClientGroupMsg::SharedDtor() {
  if (from_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete from_user_id_;
  }
  if (msg_content_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_content_;
  }
  if (this != default_instance_) {
  }
}

void ClientGroupMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientGroupMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientGroupMsg_descriptor_;
}

const ClientGroupMsg& ClientGroupMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBaseDefine_2eproto();
  return *default_instance_;
}

ClientGroupMsg* ClientGroupMsg::default_instance_ = NULL;

ClientGroupMsg* ClientGroupMsg::New() const {
  return new ClientGroupMsg;
}

void ClientGroupMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_from_user_id()) {
      if (from_user_id_ != &::google::protobuf::internal::kEmptyString) {
        from_user_id_->clear();
      }
    }
    create_time_ = 0u;
    if (has_msg_content()) {
      if (msg_content_ != &::google::protobuf::internal::kEmptyString) {
        msg_content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientGroupMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string from_user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->from_user_id().data(), this->from_user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_create_time;
        break;
      }

      // required uint32 create_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msg_content;
        break;
      }

      // required string msg_content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg_content().data(), this->msg_content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientGroupMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string from_user_id = 1;
  if (has_from_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_user_id().data(), this->from_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->from_user_id(), output);
  }

  // required uint32 create_time = 2;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->create_time(), output);
  }

  // required string msg_content = 3;
  if (has_msg_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_content().data(), this->msg_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->msg_content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientGroupMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string from_user_id = 1;
  if (has_from_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_user_id().data(), this->from_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->from_user_id(), target);
  }

  // required uint32 create_time = 2;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->create_time(), target);
  }

  // required string msg_content = 3;
  if (has_msg_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_content().data(), this->msg_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msg_content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientGroupMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string from_user_id = 1;
    if (has_from_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_user_id());
    }

    // required uint32 create_time = 2;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->create_time());
    }

    // required string msg_content = 3;
    if (has_msg_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg_content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientGroupMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientGroupMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientGroupMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientGroupMsg::MergeFrom(const ClientGroupMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from_user_id()) {
      set_from_user_id(from.from_user_id());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_msg_content()) {
      set_msg_content(from.msg_content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientGroupMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientGroupMsg::CopyFrom(const ClientGroupMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientGroupMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ClientGroupMsg::Swap(ClientGroupMsg* other) {
  if (other != this) {
    std::swap(from_user_id_, other->from_user_id_);
    std::swap(create_time_, other->create_time_);
    std::swap(msg_content_, other->msg_content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientGroupMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientGroupMsg_descriptor_;
  metadata.reflection = ClientGroupMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerGroupMsg::kFromUserIdFieldNumber;
const int ServerGroupMsg::kCreateTimeFieldNumber;
const int ServerGroupMsg::kMsgContentFieldNumber;
#endif  // !_MSC_VER

ServerGroupMsg::ServerGroupMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerGroupMsg::InitAsDefaultInstance() {
}

ServerGroupMsg::ServerGroupMsg(const ServerGroupMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerGroupMsg::SharedCtor() {
  _cached_size_ = 0;
  from_user_id_ = 0u;
  create_time_ = 0u;
  msg_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerGroupMsg::~ServerGroupMsg() {
  SharedDtor();
}

void ServerGroupMsg::SharedDtor() {
  if (msg_content_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_content_;
  }
  if (this != default_instance_) {
  }
}

void ServerGroupMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerGroupMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerGroupMsg_descriptor_;
}

const ServerGroupMsg& ServerGroupMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBaseDefine_2eproto();
  return *default_instance_;
}

ServerGroupMsg* ServerGroupMsg::default_instance_ = NULL;

ServerGroupMsg* ServerGroupMsg::New() const {
  return new ServerGroupMsg;
}

void ServerGroupMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    from_user_id_ = 0u;
    create_time_ = 0u;
    if (has_msg_content()) {
      if (msg_content_ != &::google::protobuf::internal::kEmptyString) {
        msg_content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerGroupMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 from_user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_user_id_)));
          set_has_from_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_create_time;
        break;
      }

      // required uint32 create_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msg_content;
        break;
      }

      // required string msg_content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg_content().data(), this->msg_content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerGroupMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 from_user_id = 1;
  if (has_from_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->from_user_id(), output);
  }

  // required uint32 create_time = 2;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->create_time(), output);
  }

  // required string msg_content = 3;
  if (has_msg_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_content().data(), this->msg_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->msg_content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerGroupMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 from_user_id = 1;
  if (has_from_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->from_user_id(), target);
  }

  // required uint32 create_time = 2;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->create_time(), target);
  }

  // required string msg_content = 3;
  if (has_msg_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_content().data(), this->msg_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msg_content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerGroupMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 from_user_id = 1;
    if (has_from_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_user_id());
    }

    // required uint32 create_time = 2;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->create_time());
    }

    // required string msg_content = 3;
    if (has_msg_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg_content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerGroupMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerGroupMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerGroupMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerGroupMsg::MergeFrom(const ServerGroupMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from_user_id()) {
      set_from_user_id(from.from_user_id());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_msg_content()) {
      set_msg_content(from.msg_content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerGroupMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerGroupMsg::CopyFrom(const ServerGroupMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerGroupMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ServerGroupMsg::Swap(ServerGroupMsg* other) {
  if (other != this) {
    std::swap(from_user_id_, other->from_user_id_);
    std::swap(create_time_, other->create_time_);
    std::swap(msg_content_, other->msg_content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerGroupMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerGroupMsg_descriptor_;
  metadata.reflection = ServerGroupMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientOfflineFileInfo::kFromUserIdFieldNumber;
const int ClientOfflineFileInfo::kFileIdFieldNumber;
const int ClientOfflineFileInfo::kFileSizeFieldNumber;
const int ClientOfflineFileInfo::kFilePathFieldNumber;
#endif  // !_MSC_VER

ClientOfflineFileInfo::ClientOfflineFileInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientOfflineFileInfo::InitAsDefaultInstance() {
}

ClientOfflineFileInfo::ClientOfflineFileInfo(const ClientOfflineFileInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientOfflineFileInfo::SharedCtor() {
  _cached_size_ = 0;
  from_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_id_ = 0u;
  file_size_ = 0u;
  file_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientOfflineFileInfo::~ClientOfflineFileInfo() {
  SharedDtor();
}

void ClientOfflineFileInfo::SharedDtor() {
  if (from_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete from_user_id_;
  }
  if (file_path_ != &::google::protobuf::internal::kEmptyString) {
    delete file_path_;
  }
  if (this != default_instance_) {
  }
}

void ClientOfflineFileInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientOfflineFileInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientOfflineFileInfo_descriptor_;
}

const ClientOfflineFileInfo& ClientOfflineFileInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBaseDefine_2eproto();
  return *default_instance_;
}

ClientOfflineFileInfo* ClientOfflineFileInfo::default_instance_ = NULL;

ClientOfflineFileInfo* ClientOfflineFileInfo::New() const {
  return new ClientOfflineFileInfo;
}

void ClientOfflineFileInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_from_user_id()) {
      if (from_user_id_ != &::google::protobuf::internal::kEmptyString) {
        from_user_id_->clear();
      }
    }
    file_id_ = 0u;
    file_size_ = 0u;
    if (has_file_path()) {
      if (file_path_ != &::google::protobuf::internal::kEmptyString) {
        file_path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientOfflineFileInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string from_user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->from_user_id().data(), this->from_user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_file_id;
        break;
      }

      // required uint32 file_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_id_)));
          set_has_file_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_file_size;
        break;
      }

      // required uint32 file_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_size_)));
          set_has_file_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_file_path;
        break;
      }

      // required string file_path = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_path().data(), this->file_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientOfflineFileInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string from_user_id = 1;
  if (has_from_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_user_id().data(), this->from_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->from_user_id(), output);
  }

  // required uint32 file_id = 2;
  if (has_file_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->file_id(), output);
  }

  // required uint32 file_size = 3;
  if (has_file_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->file_size(), output);
  }

  // required string file_path = 4;
  if (has_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->file_path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientOfflineFileInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string from_user_id = 1;
  if (has_from_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_user_id().data(), this->from_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->from_user_id(), target);
  }

  // required uint32 file_id = 2;
  if (has_file_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->file_id(), target);
  }

  // required uint32 file_size = 3;
  if (has_file_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->file_size(), target);
  }

  // required string file_path = 4;
  if (has_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->file_path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientOfflineFileInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string from_user_id = 1;
    if (has_from_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_user_id());
    }

    // required uint32 file_id = 2;
    if (has_file_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_id());
    }

    // required uint32 file_size = 3;
    if (has_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_size());
    }

    // required string file_path = 4;
    if (has_file_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientOfflineFileInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientOfflineFileInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientOfflineFileInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientOfflineFileInfo::MergeFrom(const ClientOfflineFileInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from_user_id()) {
      set_from_user_id(from.from_user_id());
    }
    if (from.has_file_id()) {
      set_file_id(from.file_id());
    }
    if (from.has_file_size()) {
      set_file_size(from.file_size());
    }
    if (from.has_file_path()) {
      set_file_path(from.file_path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientOfflineFileInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientOfflineFileInfo::CopyFrom(const ClientOfflineFileInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientOfflineFileInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ClientOfflineFileInfo::Swap(ClientOfflineFileInfo* other) {
  if (other != this) {
    std::swap(from_user_id_, other->from_user_id_);
    std::swap(file_id_, other->file_id_);
    std::swap(file_size_, other->file_size_);
    std::swap(file_path_, other->file_path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientOfflineFileInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientOfflineFileInfo_descriptor_;
  metadata.reflection = ClientOfflineFileInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerOfflineFileInfo::kFromUserIdFieldNumber;
const int ServerOfflineFileInfo::kFileIdFieldNumber;
const int ServerOfflineFileInfo::kFileSizeFieldNumber;
const int ServerOfflineFileInfo::kFilePathFieldNumber;
#endif  // !_MSC_VER

ServerOfflineFileInfo::ServerOfflineFileInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerOfflineFileInfo::InitAsDefaultInstance() {
}

ServerOfflineFileInfo::ServerOfflineFileInfo(const ServerOfflineFileInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerOfflineFileInfo::SharedCtor() {
  _cached_size_ = 0;
  from_user_id_ = 0u;
  file_id_ = 0u;
  file_size_ = 0u;
  file_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerOfflineFileInfo::~ServerOfflineFileInfo() {
  SharedDtor();
}

void ServerOfflineFileInfo::SharedDtor() {
  if (file_path_ != &::google::protobuf::internal::kEmptyString) {
    delete file_path_;
  }
  if (this != default_instance_) {
  }
}

void ServerOfflineFileInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerOfflineFileInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerOfflineFileInfo_descriptor_;
}

const ServerOfflineFileInfo& ServerOfflineFileInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBaseDefine_2eproto();
  return *default_instance_;
}

ServerOfflineFileInfo* ServerOfflineFileInfo::default_instance_ = NULL;

ServerOfflineFileInfo* ServerOfflineFileInfo::New() const {
  return new ServerOfflineFileInfo;
}

void ServerOfflineFileInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    from_user_id_ = 0u;
    file_id_ = 0u;
    file_size_ = 0u;
    if (has_file_path()) {
      if (file_path_ != &::google::protobuf::internal::kEmptyString) {
        file_path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerOfflineFileInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 from_user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_user_id_)));
          set_has_from_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_file_id;
        break;
      }

      // required uint32 file_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_id_)));
          set_has_file_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_file_size;
        break;
      }

      // required uint32 file_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_size_)));
          set_has_file_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_file_path;
        break;
      }

      // required string file_path = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_path().data(), this->file_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerOfflineFileInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 from_user_id = 1;
  if (has_from_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->from_user_id(), output);
  }

  // required uint32 file_id = 2;
  if (has_file_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->file_id(), output);
  }

  // required uint32 file_size = 3;
  if (has_file_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->file_size(), output);
  }

  // required string file_path = 4;
  if (has_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->file_path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerOfflineFileInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 from_user_id = 1;
  if (has_from_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->from_user_id(), target);
  }

  // required uint32 file_id = 2;
  if (has_file_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->file_id(), target);
  }

  // required uint32 file_size = 3;
  if (has_file_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->file_size(), target);
  }

  // required string file_path = 4;
  if (has_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->file_path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerOfflineFileInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 from_user_id = 1;
    if (has_from_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_user_id());
    }

    // required uint32 file_id = 2;
    if (has_file_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_id());
    }

    // required uint32 file_size = 3;
    if (has_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_size());
    }

    // required string file_path = 4;
    if (has_file_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerOfflineFileInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerOfflineFileInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerOfflineFileInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerOfflineFileInfo::MergeFrom(const ServerOfflineFileInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from_user_id()) {
      set_from_user_id(from.from_user_id());
    }
    if (from.has_file_id()) {
      set_file_id(from.file_id());
    }
    if (from.has_file_size()) {
      set_file_size(from.file_size());
    }
    if (from.has_file_path()) {
      set_file_path(from.file_path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerOfflineFileInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerOfflineFileInfo::CopyFrom(const ServerOfflineFileInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerOfflineFileInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ServerOfflineFileInfo::Swap(ServerOfflineFileInfo* other) {
  if (other != this) {
    std::swap(from_user_id_, other->from_user_id_);
    std::swap(file_id_, other->file_id_);
    std::swap(file_size_, other->file_size_);
    std::swap(file_path_, other->file_path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerOfflineFileInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerOfflineFileInfo_descriptor_;
  metadata.reflection = ServerOfflineFileInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace BaseDefine
}  // namespace IM

// @@protoc_insertion_point(global_scope)
